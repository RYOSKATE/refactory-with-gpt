{"bug_code": "def unique_day ( date , possible_birthdays ) :\n    for i in range ( 0 , len ( possible_birthdays ) ) :\n        list = [ x for x in possible_birthdays [ i ] [ 1 ] ]\n        list = sorted ( list )\n        if ( ( date == list [ i ] ) and ( date != list [ ( i + 1 ) ] ) and ( date != list [ ( i - 1 ) ] ) ) :\n            return True\n        else :\n            return False\ndef unique_month ( month , possible_birthdays ) :\n    for i in range ( 0 , len ( possible_birthdays ) ) :\n        list = [ x for x in possible_birthdays [ i ] [ 0 ] ]\n        list = sorted ( list )\n        if ( ( month == list [ i ] ) and ( month != list [ ( i + 1 ) ] ) and ( month != list [ ( i - 1 ) ] ) ) :\n            return True\n        else :\n            return False\ndef contains_unique_day ( month , possible_birthdays ) :\n    month_tuple = ( )\n    for i in range ( 0 , len ( possible_birthdays ) ) :\n        if ( possible_birthdays [ i ] [ 0 ] == month ) :\n            month_tuple = ( month_tuple + ( possible_birthdays [ i ] [ 1 ] , ) )\n    for x in month_tuple :\n        for i in range ( 0 , len ( possible_birthdays ) ) :\n            if ( x == possible_birthdays [ i ] [ 1 ] ) :\n                return False\n            else :\n                return True\n\n\n", "description": "Task: Unique dates and months\nImplement unique_day, unique_month and contains_unique_day.\n", "sample_correct_code_blocks": ["def unique_day ( date , possible_birthdays ) :\n    ref_s = 0\n    for ref_b in possible_birthdays :\n        if ( ref_b [ 1 ] == date ) :\n            ref_s = ( ref_s + 1 )\n        else :\n            continue\n        pass\n    return ( ref_s == 1 )\n\n\ndef unique_month ( month , possible_birthdays ) :\n    ref_s = 0\n    for ref_b in possible_birthdays :\n        if ( ref_b [ 0 ] == month ) :\n            ref_s = ( ref_s + 1 )\n        else :\n            continue\n        pass\n    return ( ref_s == 1 )\n\n\ndef contains_unique_day ( month , possible_birthdays ) :\n    month_tuple = ( )\n    for ref_date in possible_birthdays :\n        pass\n        if ( month == ref_date [ 0 ] ) :\n            month_tuple += ( ref_date [ 1 ] , )\n        continue\n    pass\n    for x in month_tuple :\n        pass\n        if True :\n            pass\n            if unique_day ( x , possible_birthdays ) :\n                return True\n            else :\n                continue\n            pass\n        pass\n    return False\n"], "gpt_model": "gpt-3.5-turbo", "patch_size": 154.0, "gpt_rep_code": "def unique_day ( date , possible_birthdays ) :\n    for i in range ( 0 , len ( possible_birthdays ) ) :\n        lst = [ x for x in possible_birthdays [ i ] [ 1 ] ]\n        lst = sorted ( lst )\n        if ( ( date == lst [ i ] ) and ( date != lst [ ( i + 1 ) ] ) and ( date != lst [ ( i - 1 ) ] ) ) :\n            return True\n    return False\ndef unique_month ( month , possible_birthdays ) :\n    for i in range ( 0 , len ( possible_birthdays ) ) :\n        lst = [ x for x in possible_birthdays [ i ] [ 0 ] ]\n        lst = sorted ( lst )\n        if ( ( month == lst [ i ] ) and ( month != lst [ ( i + 1 ) ] ) and ( month != lst [ ( i - 1 ) ] ) ) :\n            return True\n    return False\ndef contains_unique_day ( month , possible_birthdays ) :\n    month_tuple = ( )\n    for i in range ( 0 , len ( possible_birthdays ) ) :\n        if ( possible_birthdays [ i ] [ 0 ] == month ) :\n            month_tuple = ( month_tuple + ( possible_birthdays [ i ] [ 1 ] , ) )\n    for x in month_tuple :\n        for i in range ( 0 , len ( possible_birthdays ) ) :\n            if ( x == possible_birthdays [ i ] [ 1 ] ) :\n                return False\n    return True\n\n\n", "gpt_patch_size": null}