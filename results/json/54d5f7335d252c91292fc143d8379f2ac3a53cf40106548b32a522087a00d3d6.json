{
    "bug_code": "def sort_age ( lst ) :\n    result = [ ]\n    while ( lst != [ ] ) :\n        largest = lst [ 0 ] [ 1 ]\n        for i in lst :\n            if ( i [ 1 ] > largest ) :\n                largest_tup = i\n                largest = i [ 1 ]\n        lst . remove ( largest_tup )\n        result . append ( largest_tup )\n    return result\n\n\n",
    "description": "Task: Sorting Tuples\nCan we sort items other than integers? For this question, you will be sorting tuples! We represent a person using a tuple (<gender>, <age>). Given a list of people, write a function sort_age that sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [(\"M\", 23), (\"F\", 19), (\"M\", 30)]. The sorted list would look like [(\"M\", 30), (\"M\", 23), (\"F\", 19)]. You may assume that no two members in the list of people are of the same age.\n",
    "sample_correct_code_blocks": [
        "def sort_age ( lst ) :\n    for i in range ( 0 , ( len ( lst ) - 1 ) ) :\n        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :\n            pass\n            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :\n                ref_tmp = lst [ i ]\n                lst [ i ] = lst [ ref_j ]\n                if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :\n                    pass\n                lst [ ref_j ] = ref_tmp\n            elif False :\n                pass\n            pass\n    return lst\n"
    ],
    "gpt_model": "gpt-3.5-turbo",
    "patch_size": 76.0,
    "gpt_rep_code": "def sort_age ( lst ) :\n    for i in range ( 0 , ( len ( lst ) - 1 ) ) :\n        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :\n            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :\n                ref_tmp = lst [ i ]\n                lst [ i ] = lst [ ref_j ]\n                lst [ ref_j ] = ref_tmp\n    return lst\n\n\n",
    "gpt_patch_size": 58.0
}