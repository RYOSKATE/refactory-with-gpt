{"bug_code": "def sort_age ( lst ) :\n    if ( len ( lst ) < 2 ) :\n        return lst\n    midpoint = ( len ( lst ) // 2 )\n    left = sort_age ( lst [ : midpoint ] )\n    right = sort_age ( lst [ midpoint : ] )\n    new_list = [ ]\n    while ( left and right ) :\n        if ( left [ 0 ] [ 1 ] > right [ 0 ] [ 1 ] ) :\n            new_list . append ( left . pop ( 0 ) )\n        else :\n            new_list . append ( right . pop ( 0 ) )\n        new_list . extend ( left )\n        new_list . extend ( right )\n        new_list . reverse\n        return new_list\n\n\n", "description": "Task: Sorting Tuples\nCan we sort items other than integers? For this question, you will be sorting tuples! We represent a person using a tuple (<gender>, <age>). Given a list of people, write a function sort_age that sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [(\"M\", 23), (\"F\", 19), (\"M\", 30)]. The sorted list would look like [(\"M\", 30), (\"M\", 23), (\"F\", 19)]. You may assume that no two members in the list of people are of the same age.\n", "sample_correct_code_blocks": ["def sort_age ( lst ) :\n    if ( len ( lst ) < 2 ) :\n        pass\n    ref_i = 0\n    while ( ( ref_i + 1 ) < len ( lst ) ) :\n        if ( lst [ ref_i ] [ 1 ] < lst [ ( ref_i + 1 ) ] [ 1 ] ) :\n            lst . extend ( [ lst [ ref_i ] ] )\n            del lst [ ref_i ]\n            ref_i = 0\n        else :\n            ref_i += 1\n    return lst\n"], "gpt_model": "gpt-3.5-turbo", "patch_size": 73.0, "gpt_rep_code": "def sort_age ( lst ) :\n    if ( len ( lst ) < 2 ) :\n        return lst\n    midpoint = ( len ( lst ) // 2 )\n    left = sort_age ( lst [ : midpoint ] )\n    right = sort_age ( lst [ midpoint : ] )\n    new_list = [ ]\n    while ( left and right ) :\n        if ( left [ 0 ] [ 1 ] > right [ 0 ] [ 1 ] ) :\n            new_list . append ( left . pop ( 0 ) )\n        else :\n            new_list . append ( right . pop ( 0 ) )\n    new_list . extend ( left )\n    new_list . extend ( right )\n    new_list . reverse ( )\n    return new_list\n\n\n", "gpt_patch_size": null}