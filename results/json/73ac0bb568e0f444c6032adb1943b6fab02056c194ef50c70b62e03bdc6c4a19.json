{"bug_code": "def sort_age ( lst ) :\n    A = map ( ( lambda x : x [ 1 ] ) , lst )\n    a = [ ]\n    counter = 0\n    while ( counter < len ( lst ) ) :\n        for i in A :\n            if ( i > a [ 0 ] ) :\n                a = i . extend ( a )\n            elif ( i < a [ ( - 1 ) ] ) :\n                a = a . extend ( i )\n        counter += 1\n    b = [ ]\n    for i in a :\n        for y in lst :\n            if ( y [ 1 ] == i ) :\n                b . append ( y )\n    return b\n\n\n", "description": "Task: Sorting Tuples\nCan we sort items other than integers? For this question, you will be sorting tuples! We represent a person using a tuple (<gender>, <age>). Given a list of people, write a function sort_age that sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [(\"M\", 23), (\"F\", 19), (\"M\", 30)]. The sorted list would look like [(\"M\", 30), (\"M\", 23), (\"F\", 19)]. You may assume that no two members in the list of people are of the same age.\n", "sample_correct_code_blocks": ["def sort_age ( a ) :\n    A = [ ]\n    while a :\n        ref_oldest = a [ 0 ] [ 1 ]\n        for ref_person in a :\n            pass\n            if ( ref_person [ 1 ] > ref_oldest ) :\n                if False :\n                    pass\n                ref_oldest = ref_person [ 1 ]\n            else :\n                pass\n            pass\n        pass\n        for ref_person in a :\n            pass\n            if ( ref_person [ 1 ] == ref_oldest ) :\n                A . append ( ref_person )\n                a . remove ( ref_person )\n            pass\n        pass\n    return A\n"], "gpt_model": "gpt-3.5-turbo", "patch_size": 78.0, "gpt_rep_code": "def sort_age ( lst ) :\n    A = map ( ( lambda x : x [ 1 ] ) , lst )\n    a = [ ]\n    counter = 0\n    while ( counter < len ( lst ) ) :\n        for i in A :\n            if ( i > a [ 0 ] ) :\n                a = i . extend ( a )\n            elif ( i < a [ ( - 1 ) ] ) :\n                a = a . extend ( i )\n        counter += 1\n    b = [ ]\n    for i in a :\n        for y in lst :\n            if ( y [ 1 ] == i ) :\n                b . append ( y )\n    return b\ndef sort_age ( lst ) :\n    A = [ x [ 1 ] for x in lst ]\n    a = [ ]\n    counter = 0\n    while ( counter < len ( lst ) ) :\n        for i in A :\n            if ( i > a [ 0 ] ) :\n                a . insert ( 0 , i )\n            elif ( i < a [ ( - 1 ) ] ) :\n                a . append ( i )\n        counter += 1\n    b = [ ]\n    for i in a :\n        for y in lst :\n            if ( y [ 1 ] == i ) :\n                b . append ( y )\n    return b\n\n\n", "gpt_patch_size": null}