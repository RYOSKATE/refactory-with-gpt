{"bug_code": "def sort_age ( lst ) :\n    new_lst = [ ]\n    new_lst . append ( lst [ 0 ] )\n    for i in lst [ 1 : ] :\n        for j in range ( len ( new_lst ) ) :\n            if ( ( i [ 1 ] > new_lst [ j ] [ 1 ] ) and ( j == 0 ) ) :\n                new_lst . insert ( 0 , i )\n            elif ( i [ 1 ] < new_lst [ j ] [ ( - 1 ) ] ) :\n                new_lst . insert ( ( - 1 ) , i )\n            elif ( i [ 1 ] > new_lst [ j ] [ 1 ] ) :\n                new_lst . insert ( j , i )\n    return new_lst\n\n\n", "description": "Task: Sorting Tuples\nCan we sort items other than integers? For this question, you will be sorting tuples! We represent a person using a tuple (<gender>, <age>). Given a list of people, write a function sort_age that sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [(\"M\", 23), (\"F\", 19), (\"M\", 30)]. The sorted list would look like [(\"M\", 30), (\"M\", 23), (\"F\", 19)]. You may assume that no two members in the list of people are of the same age.\n", "sample_correct_code_blocks": ["def sort_age ( lst ) :\n    for i in range ( len ( lst ) ) :\n        ref_maxi = lst [ i ] [ 1 ]\n        for j in range ( ( i + 1 ) , len ( lst ) ) :\n            pass\n            if ( lst [ j ] [ 1 ] > ref_maxi ) :\n                ref_maxi = lst [ j ] [ 1 ]\n                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )\n        pass\n    if True :\n        pass\n    return lst\n"], "gpt_model": "gpt-3.5-turbo", "patch_size": 84.0, "gpt_rep_code": "def sort_age ( lst ) :\n    for i in range ( len ( lst ) ) :\n        ref_maxi = lst [ i ] [ 1 ]\n        for j in range ( ( i + 1 ) , len ( lst ) ) :\n            if ( lst [ j ] [ 1 ] > ref_maxi ) :\n                ref_maxi = lst [ j ] [ 1 ]\n                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )\n    return lst\n\n\n", "gpt_patch_size": 79.0}