{"bug_code": "def unique_day ( day , possible_birthdays ) :\n    possible_days = tuple ( map ( ( lambda x : x [ 1 ] ) , possible_birthdays ) )\n    counter = 0\n    for possible_day in possible_days :\n        if ( day == possible_day ) :\n            counter = ( counter + 1 )\n    if ( counter == 1 ) :\n        return True\n    elif ( counter > 1 ) :\n        return False\n    else :\n        return 'Not a day in possible_birthdays'\ndef unique_month ( month , possible_birthdays ) :\n    possible_months = tuple ( map ( ( lambda x : x [ 0 ] ) , possible_birthdays ) )\n    counter = 0\n    for possible_month in possible_months :\n        if ( month == possible_month ) :\n            counter = ( counter + 1 )\n    if ( counter == 1 ) :\n        return True\n    elif ( counter > 1 ) :\n        return False\n    else :\n        return 'Not a month in possible_birthdays'\ndef contains_unique_day ( month , possible_birthdays ) :\n    def contains_month ( month , elem ) :\n        return ( month == elem [ 0 ] )\n    pos_bd_containing_month = tuple ( filter ( ( lambda x : contains_month ( month , x ) ) , possible_birthdays ) )\n    for element in pos_bd_containing_month :\n        if ( unique_day ( element [ 1 ] , possible_birthdays ) == True ) :\n            return True\n    return False\n\n\n", "description": "Task: Unique dates and months\nImplement unique_day, unique_month and contains_unique_day.\n", "sample_correct_code_blocks": ["def unique_day ( day , possible_birthdays ) :\n    possible_days = tuple ( map ( ( lambda x : x [ 1 ] ) , possible_birthdays ) )\n    counter = 0\n    for possible_day in possible_birthdays :\n        pass\n        if ( day in possible_day ) :\n            counter = ( counter + 1 )\n        pass\n    pass\n    if ( counter > 1 ) :\n        return False\n    elif ( counter == 0 ) :\n        return False\n    else :\n        return True\n    pass\n\n\ndef unique_month ( month , possible_birthdays ) :\n    possible_months = tuple ( map ( ( lambda x : x [ 0 ] ) , possible_birthdays ) )\n    counter = 0\n    for possible_month in possible_birthdays :\n        pass\n        if ( month in possible_month ) :\n            counter = ( counter + 1 )\n        pass\n    pass\n    if ( counter > 1 ) :\n        return False\n    elif ( counter == 0 ) :\n        return False\n    else :\n        return True\n    pass\n\n\ndef contains_unique_day ( month , possible_birthdays ) :\n    pos_bd_containing_month = tuple ( filter ( ( lambda x : ( x [ 0 ] == month ) ) , possible_birthdays ) )\n    for element in pos_bd_containing_month :\n        pass\n        if ( unique_day ( element [ 1 ] , possible_birthdays ) == True ) :\n            return True\n        pass\n    return False\n"], "gpt_model": "gpt-3.5-turbo", "patch_size": 41.0, "gpt_rep_code": "def unique_day ( day , possible_birthdays ) :\n    possible_days = tuple ( map ( ( lambda x : x [ 1 ] ) , possible_birthdays ) )\n    counter = 0\n    for possible_day in possible_days :\n        if ( day == possible_day ) :\n            counter = ( counter + 1 )\n    if ( counter == 1 ) :\n        return True\n    elif ( counter > 1 ) :\n        return False\n    else :\n        return 'Not a day in possible_birthdays'\ndef unique_month ( month , possible_birthdays ) :\n    possible_months = tuple ( map ( ( lambda x : x [ 0 ] ) , possible_birthdays ) )\n    counter = 0\n    for possible_month in possible_months :\n        if ( month == possible_month ) :\n            counter = ( counter + 1 )\n    if ( counter == 1 ) :\n        return True\n    elif ( counter > 1 ) :\n        return False\n    else :\n        return 'Not a month in possible_birthdays'\ndef contains_unique_day ( month , possible_birthdays ) :\n    def contains_month ( month , elem ) :\n        return ( month == elem [ 0 ] )\n    pos_bd_containing_month = tuple ( filter ( ( lambda x : contains_month ( month , x ) ) , possible_birthdays ) )\n    for element in pos_bd_containing_month :\n        if ( unique_day ( element [ 1 ] , possible_birthdays ) == True ) :\n            return True\n    return False\n\n\n", "gpt_patch_size": null}