{"bug_code": "def unique_day ( day , possible_birthdays ) :\n    counter = 0\n    for i in possible_birthdays :\n        if ( i [ 1 ] == day ) :\n            counter = ( counter + 1 )\n    if ( counter <= 1 ) :\n        return true\n    else :\n        return False\n    return True\ndef unique_month ( month , possible_birthdays ) :\n    for i in possible_birthdays :\n        if ( i [ 0 ] == month ) :\n            counter = ( counter + 1 )\n    if ( counter <= 1 ) :\n        return True\n    else :\n        return False\ndef contains_unique_day ( month , possible_birthdays ) :\n    return\n\n\n", "description": "Task: Unique dates and months\nImplement unique_day, unique_month and contains_unique_day.\n", "sample_correct_code_blocks": ["def unique_day ( day , possible_birthdays ) :\n    counter = 0\n    for i in possible_birthdays :\n        if ( i [ 1 ] == day ) :\n            counter = ( counter + 1 )\n    if ( counter == 1 ) :\n        return True\n    else :\n        return False\n\n\ndef unique_month ( month , possible_birthdays ) :\n    ref_count = 0\n    for i in possible_birthdays :\n        if ( i [ 0 ] == month ) :\n            ref_count = ( ref_count + 1 )\n    if ( ref_count == 1 ) :\n        return True\n    else :\n        return False\n\n\ndef contains_unique_day ( month , possible_birthdays ) :\n    return ( len ( tuple ( filter ( ( lambda ref_x : unique_day ( ref_x [ 1 ] , possible_birthdays ) ) , filter ( ( lambda ref_y : ( ref_y [ 0 ] == month ) ) , possible_birthdays ) ) ) ) > 0 )\n"], "gpt_model": "gpt-3.5-turbo", "patch_size": 43.0, "gpt_rep_code": "def unique_day ( day , possible_birthdays ) :\n    counter = 0\n    for i in possible_birthdays :\n        if ( i [ 1 ] == day ) :\n            counter += 1\n    if ( counter == 1 ) :\n        return True\n    else :\n        return False\ndef unique_month ( month , possible_birthdays ) :\n    counter = 0\n    for i in possible_birthdays :\n        if ( i [ 0 ] == month ) :\n            counter += 1\n    if ( counter == 1 ) :\n        return True\n    else :\n        return False\ndef contains_unique_day ( month , possible_birthdays ) :\n    return ( len ( tuple ( filter ( ( lambda ref_x : unique_day ( ref_x [ 1 ] , possible_birthdays ) ) , filter ( ( lambda ref_y : ( ref_y [ 0 ] == month ) ) , possible_birthdays ) ) ) ) > 0 )\n\n\n", "gpt_patch_size": 46.0}