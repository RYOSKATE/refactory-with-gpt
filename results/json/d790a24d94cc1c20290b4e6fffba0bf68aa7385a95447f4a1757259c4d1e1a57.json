{"bug_code": "def sort_age ( lst ) :\n    male = [ ]\n    female = [ ]\n    for i in range ( len ( lst ) ) :\n        if ( lst [ i ] [ 0 ] == 'M' ) :\n            male . append ( lst [ i ] )\n        else :\n            female . append ( lst [ i ] )\n    male . sort ( )\n    female . sort ( )\n    combine = ( male [ : : ( - 1 ) ] + female [ : : ( - 1 ) ] )\n    return combine\n\n\n", "description": "Task: Sorting Tuples\nCan we sort items other than integers? For this question, you will be sorting tuples! We represent a person using a tuple (<gender>, <age>). Given a list of people, write a function sort_age that sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [(\"M\", 23), (\"F\", 19), (\"M\", 30)]. The sorted list would look like [(\"M\", 30), (\"M\", 23), (\"F\", 19)]. You may assume that no two members in the list of people are of the same age.\n", "sample_correct_code_blocks": ["def sort_age ( male ) :\n    ref_slist = [ ]\n    while male :\n        ref_elder = male [ 0 ]\n        for i in range ( len ( male ) ) :\n            pass\n            if ( male [ i ] [ 1 ] > ref_elder [ 1 ] ) :\n                ref_elder = male [ i ]\n            else :\n                continue\n        ref_slist . append ( ref_elder )\n        male . remove ( ref_elder )\n    return ref_slist\n"], "gpt_model": "gpt-3.5-turbo", "patch_size": 50.0, "gpt_rep_code": "def sort_age ( lst ) :\n    male = [ ]\n    female = [ ]\n    for i in range ( len ( lst ) ) :\n        if ( lst [ i ] [ 0 ] == 'M' ) :\n            male . append ( lst [ i ] )\n        else :\n            female . append ( lst [ i ] )\n    male . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )\n    female . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )\n    combine = ( male [ : : ( - 1 ) ] + female [ : : ( - 1 ) ] )\n    return combine\n\n\n", "gpt_patch_size": null}