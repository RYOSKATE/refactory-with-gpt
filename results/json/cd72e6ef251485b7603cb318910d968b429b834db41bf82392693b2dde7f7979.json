{"bug_code": "def unique_day ( date , possible_birthdays ) :\n    counter = 0\n    for date in possible_birthdays :\n        if ( date [ 1 ] == day ) :\n            counter += 1\n        else :\n            counter = counter\n    if ( counter == 1 ) :\n        return True\n    else :\n        return False\ndef unique_month ( month , possible_birthdays ) :\n    counter = 0\n    for date in possible_birthdays :\n        if ( date [ 0 ] == month ) :\n            counter += 1\n        else :\n            counter = counter\n    if ( counter == 1 ) :\n        return True\n    else :\n        return False\ndef contains_unique_day ( month , possible_birthdays ) :\n    date = ( )\n    for mon in possible_birthdays :\n        if ( month == mon [ 0 ] ) :\n            date += ( mon , )\n        else :\n            date = date\n    days = ( )\n    for day in date :\n        days += ( day [ 1 ] , )\n    y = ( )\n    for x in days :\n        if ( unique_day ( x , possible_birthdays ) == True ) :\n            y += ( x , )\n        else :\n            y = y\n    if ( y == ( ) ) :\n        return False\n    else :\n        return True\n\n\n", "description": "Task: Unique dates and months\nImplement unique_day, unique_month and contains_unique_day.\n", "sample_correct_code_blocks": ["def unique_day ( date , possible_birthdays ) :\n    counter = 0\n    for ref_i in possible_birthdays :\n        if ( ref_i [ 1 ] == date ) :\n            counter += 1\n        else :\n            counter = counter\n    if ( counter == 1 ) :\n        return True\n    else :\n        return False\n\n\ndef unique_month ( month , possible_birthdays ) :\n    counter = 0\n    for date in possible_birthdays :\n        if ( date [ 0 ] == month ) :\n            counter += 1\n        else :\n            counter = counter\n    if ( counter == 1 ) :\n        return True\n    else :\n        return False\n\n\ndef contains_unique_day ( month , possible_birthdays ) :\n    date = ( )\n    for mon in possible_birthdays :\n        if ( month == mon [ 0 ] ) :\n            date += ( mon , )\n        else :\n            date = date\n    days = ( )\n    for day in date :\n        days += ( day [ 1 ] , )\n    y = ( )\n    for x in days :\n        if ( unique_day ( x , possible_birthdays ) == True ) :\n            y += ( x , )\n        else :\n            y = y\n    if ( y == ( ) ) :\n        return False\n    else :\n        return True\n"], "gpt_model": "gpt-3.5-turbo", "patch_size": 3.0, "gpt_rep_code": "def unique_day ( date , possible_birthdays ) :\n    counter = 0\n    for ref_i in possible_birthdays :\n        if ( ref_i [ 1 ] == date ) :\n            counter += 1\n        else :\n            counter = counter\n    if ( counter == 1 ) :\n        return True\n    else :\n        return False\ndef unique_month ( month , possible_birthdays ) :\n    counter = 0\n    for date in possible_birthdays :\n        if ( date [ 0 ] == month ) :\n            counter += 1\n        else :\n            counter = counter\n    if ( counter == 1 ) :\n        return True\n    else :\n        return False\ndef contains_unique_day ( month , possible_birthdays ) :\n    date = ( )\n    for mon in possible_birthdays :\n        if ( month == mon [ 0 ] ) :\n            date += ( mon , )\n        else :\n            date = date\n    days = ( )\n    for day in date :\n        days += ( day [ 1 ] , )\n    y = ( )\n    for x in days :\n        if ( unique_day ( x , possible_birthdays ) == True ) :\n            y += ( x , )\n        else :\n            y = y\n    if ( y == ( ) ) :\n        return False\n    else :\n        return True\n\n\n", "gpt_patch_size": 3.0}