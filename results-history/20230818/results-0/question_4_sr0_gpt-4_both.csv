Question,Sampling Rate,Experiment ID,File Name,Status,Match (Rfty Code),Match (Ori Code),Buggy Code,Buggy Mutation,Refactored Correct Code,Original Correct File Name,Rule ID,Repair,Stru. Matching Time,Online Refactoring Time,GCR Time,Stru. Mutation Time,Block Mapping Time,Variable Mapping Time,Specification&Synthesis Time,GPT Time,Total Time,#Passed Test Case,#Test Case,RPS
question_4,0,0,wrong_4_005.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] >= oldest [ 1 ] ) :
                person = oldest
        lst . remove ( oldest )
        sort . append ( oldest )
    print ( lst )


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for person in lst :
            pass
            if ( person [ 1 ] >= oldest [ 1 ] ) :
                person = oldest
            else :
                pass
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
        pass
    pass
    if False :
        lst . remove ( oldest )
        sort . append ( oldest )
    print ( lst )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    if False:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] > oldest [ 1 ] ) :
                oldest = person
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.170,0.410,0.000,0.002,0.061,0.239,0.142,9.329,6,6,1.413
question_4,0,0,wrong_4_014.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                return lst
            pass
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.209,0.199,0.000,0.002,0.051,0.699,0.089,9.376,6,6,3.900
question_4,0,0,wrong_4_284.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlist = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > oldest ) :
                oldest = i
            else :
                continue
        lst . remove ( oldest )
        newlist . append ( oldest )
    return newlist


","def sort_age ( lst ) :
    newlist = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > oldest ) :
                oldest = i
                if True :
                    pass
                elif False :
                    pass
                continue
            pass
        lst . remove ( oldest )
        newlist . append ( oldest )
    return newlist
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                if True:
                    pass
                elif False:
                    pass
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.j'}","def sort_age ( lst ) :
    newlist = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
            else :
                continue
        lst . remove ( oldest )
        newlist . append ( oldest )
    return newlist


",N/A,7.346,0.207,0.000,0.001,0.052,0.297,0.123,8.326,6,6,1.595
question_4,0,0,wrong_4_085.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )


","def sort_age ( lst ) :
    new_lst = [ ]
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            else :
                oldest = lst [ i ]
            pass
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    new_lst = lst . copy ( )
    for i in range ( ( len ( new_lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( new_lst ) ) :
            if ( new_lst [ i ] [ 1 ] < new_lst [ j ] [ 1 ] ) :
                oldest = new_lst [ i ]
                new_lst [ i ] = new_lst [ j ]
                new_lst [ j ] = oldest
    return new_lst


",N/A,8.146,0.472,0.000,0.002,0.063,2.302,0.392,11.771,6,6,0.982
question_4,0,0,wrong_4_247.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        b = lst [ 0 ]
        for i in range ( 1 , ( len ( lst ) - 1 ) ) :
            if ( lst [ i ] [ 1 ] > biggest ) :
                biggest = lst [ i ] [ 1 ]
                s = ( lst [ i ] , )
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ] [ 1 ]
        b = lst [ 0 ]
        for i in range ( 1 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] > biggest ) :
                return lst
            else :
                biggest = lst [ i ] [ 1 ]
                s = ( lst [ i ] , )
            pass
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        b = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > biggest ) :
                biggest = lst [ i ] [ 1 ]
                b = lst [ i ]
        lst . remove ( b )
        list1 . append ( b )
    return list1


",N/A,8.204,0.588,0.000,0.002,0.063,0.262,0.511,10.225,6,6,0.824
question_4,0,0,wrong_4_354.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                return lst
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
    return lst


",N/A,8.201,0.185,0.000,0.002,0.049,0.219,0.089,8.873,6,6,3.900
question_4,0,0,wrong_4_277.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    pass


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if False :
                pass
            pass
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.326,0.205,0.000,0.002,0.044,0.191,0.223,9.101,6,6,3.143
question_4,0,0,wrong_4_074.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
    return lst


",N/A,8.292,0.188,0.000,0.002,0.051,0.024,0.009,8.579,6,6,3.900
question_4,0,0,wrong_4_060.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element > biggest ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for element in lst :
            pass
            if ( element > biggest ) :
                biggest = element
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.309,0.366,0.000,0.001,0.041,0.279,0.129,9.341,6,6,1.763
question_4,0,0,wrong_4_226.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = [ ]
    for i in lst :
        if ( i [ 1 ] > lst [ 0 ] [ 1 ] ) :
            a . append ( i )
    return a


","def sort_age ( lst ) :
    a = [ ]
    if True :
        pass
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in lst :
            pass
            if ( i [ 1 ] > lst [ 0 ] [ 1 ] ) :
                pass
            else :
                return lst
            a . append ( i )
        pass
    return a
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.197,0.290,0.000,0.001,0.047,0.171,0.185,9.071,6,6,1.742
question_4,0,0,wrong_4_181.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
        print ( sort )


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = a [ 0 ]
        for item in a :
            pass
            if ( item [ 1 ] > largest [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                pass
            else :
                largest = item
            pass
        a . remove ( largest )
        sort . append ( largest )
        print ( sort )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.202,0.441,0.000,0.001,0.095,0.135,0.181,9.488,6,6,1.612
question_4,0,0,wrong_4_111.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )


","def sort_age ( lst ) :
    new_lst = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            else :
                oldest = lst [ i ]
            pass
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                oldest = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = oldest
    return lst


",N/A,8.210,0.446,0.000,0.002,0.049,0.259,0.383,9.763,6,6,0.946
question_4,0,0,wrong_4_087.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )


","def sort_age ( lst ) :
    new_lst = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                pass
            else :
                oldest = lst [ i ]
            pass
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.203,0.447,0.000,0.002,0.048,0.156,0.352,9.224,6,6,0.946
question_4,0,0,wrong_4_152.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    i = 0
    while ( ( i + 1 ) < len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
            lst . extend ( [ lst [ i ] ] )
            lst . pop ( lst [ i ] )
        else :
            i += 1
    return lst


","def sort_age ( lst ) :
    i = 0
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
                    lst . extend ( [ lst [ i ] ] )
                    lst . pop ( lst [ i ] )
                else :
                    pass
                pass
            i += 1
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    i = 0
    while ( i < len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
        i += 1
    return lst


",N/A,7.436,0.086,0.000,0.002,0.046,0.432,0.386,8.880,6,6,0.733
question_4,0,0,wrong_4_155.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        curr = lst [ 0 ] [ 1 ]
        for i in range ( lst ( old ) ) :
            if ( lst [ i ] [ 1 ] < curr ) :
                curr = lst [ i ] [ 1 ]
                counter = i
        lst . remove ( counter )
        new . append ( counter )
    return new


","def sort_age ( lst ) :
    new = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        curr = lst [ 0 ] [ 1 ]
        for i in range ( lst ( old ) ) :
            pass
            if ( lst [ i ] [ 1 ] < curr ) :
                curr = lst [ i ] [ 1 ]
                counter = i
            pass
        return lst
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        lst . remove ( counter )
        new . append ( counter )
    return new
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        counter = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ counter ] [ 1 ] ) :
                counter = j
        ( lst [ i ] , lst [ counter ] ) = ( lst [ counter ] , lst [ i ] )
    return lst


",N/A,8.225,0.490,0.000,0.002,0.046,0.680,0.405,10.330,6,6,0.967
question_4,0,0,wrong_4_307.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i < smallest ) :
                smallest = i
        lst . remove ( smallest )
        sort . append ( smallest )
    return sort
    pass


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i < smallest ) :
                pass
            else :
                smallest = i
            pass
        lst . remove ( smallest )
        sort . append ( smallest )
    return sort
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > smallest [ 1 ] ) :
                smallest = i
        lst . remove ( smallest )
        sort . append ( smallest )
    return sort
    pass


",N/A,8.240,0.375,0.000,0.001,0.048,0.315,0.109,9.341,6,6,1.667
question_4,0,0,wrong_4_242.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    i = 0
    smallest = lst [ 0 ] [ 1 ]
    s = lst [ 0 ]
    for i in range ( 1 , len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < smallest ) :
            smallest = lst [ i ] [ 1 ]
            s = lst [ i ]
    list1 += s
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    i = 0
    smallest = lst [ 0 ] [ 1 ]
    s = lst [ 0 ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < smallest ) :
                pass
            else :
                pass
            smallest = lst [ i ] [ 1 ]
            s = lst [ i ]
        pass
    list1 += s
    return list1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                s = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = s
    return lst


",N/A,8.238,0.496,0.000,0.002,0.053,0.351,0.403,9.976,6,6,0.815
question_4,0,0,wrong_4_117.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = T )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = T )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,8.176,0.184,0.000,0.002,0.050,0.016,0.022,8.555,6,6,3.722
question_4,0,0,wrong_4_011.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    result = [ ]
    while ( lst != [ ] ) :
        largest = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > largest ) :
                largest_tup = i
                largest = i [ 1 ]
        lst . remove ( largest_tup )
        result . append ( largest_tup )
    return result


","def sort_age ( lst ) :
    result = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] > largest ) :
                pass
                if True :
                    pass
                lst [ j ] = tmp
            elif False :
                largest_tup = i
                largest = i [ 1 ]
            pass
        lst . remove ( largest_tup )
        result . append ( largest_tup )
    return result
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                if True:
                    pass
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.h'}","def sort_age ( lst ) :
    result = [ ]
    while lst :
        largest_tup = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest_tup [ 1 ] ) :
                largest_tup = i
        lst . remove ( largest_tup )
        result . append ( largest_tup )
    return result


",N/A,8.241,0.458,0.000,0.001,0.064,0.174,0.185,9.506,6,6,1.189
question_4,0,0,wrong_4_311.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    for i in range ( len ( ( lst - 1 ) ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( len ( ( lst - 1 ) ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.l'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] , lst [ ( j + 1 ) ] ) = ( lst [ ( j + 1 ) ] , lst [ j ] )
            else :
                continue
    return lst
    pass


",N/A,0.075,0.025,0.000,0.000,0.046,0.182,1.101,2.306,6,6,0.523
question_4,0,0,wrong_4_139.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort_list = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        sort_list . append ( smallest )


","def sort_age ( lst ) :
    sort_list = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
            pass
        lst . remove ( smallest )
        sort_list . append ( smallest )
    pass
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort_list = [ ]
    while lst :
        largest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > largest [ 1 ] ) :
                largest = element
        lst . remove ( largest )
        sort_list . append ( largest )
    return sort_list


",N/A,8.124,0.382,0.000,0.001,0.146,0.206,0.142,9.285,6,6,1.452
question_4,0,0,wrong_4_197.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    for i in range ( len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
            new_lst . append ( lst [ i ] )
    lst . reverse ( )
    return lst
    pass


","def sort_age ( lst ) :
    new_lst = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            else :
                pass
            new_lst . append ( lst [ i ] )
        pass
    lst . reverse ( )
    return lst
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst
    pass


",N/A,8.201,0.413,0.000,0.003,0.050,0.262,0.293,9.549,6,6,0.980
question_4,0,0,wrong_4_121.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    first = lst [ 0 ]
    firstnum = lst [ 0 ] [ 1 ]
    result = [ ]
    for x in lst [ 1 : ] :
        if ( x [ 1 ] > firstnum ) :
            result = ( ( first , ) + ( x , ) )
        else :
            result = ( ( x , ) + ( first , ) )
    return result
    pass


","def sort_age ( lst ) :
    first = lst [ 0 ]
    firstnum = lst [ 0 ] [ 1 ]
    result = [ ]
    for x in lst [ 1 : ] :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( x [ 1 ] > firstnum ) :
                    result = ( ( first , ) + ( x , ) )
                else :
                    pass
                pass
            result = ( ( x , ) + ( first , ) )
        pass
    return result
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        first = lst [ i ]
        firstnum = lst [ i ] [ 1 ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            x = lst [ j ]
            if ( x [ 1 ] > firstnum ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
                first = lst [ i ]
                firstnum = lst [ i ] [ 1 ]
    return lst
    pass


",N/A,7.332,0.092,0.000,0.002,0.050,0.425,0.483,8.795,6,6,1.218
question_4,0,0,wrong_4_037.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    print ( lst )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    print ( lst )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                return lst
                if True :
                    pass
                else :
                    pass
                pass
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
    return lst


",N/A,8.089,0.205,0.000,0.002,0.047,0.015,0.135,8.613,6,6,3.000
question_4,0,0,wrong_4_059.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = [ ]
    b = [ ]
    n = len ( lst )
    for i in range ( n ) :
        age = lst [ i ] [ 1 ]
        a += [ age ]
        a . sort ( )
        a . reverse ( )
    for j in range ( n ) :
        for k in range ( n ) :
            if ( a [ j ] == lst [ k ] [ 1 ] ) :
                b += [ lst [ k ] ]
            else :
                continue
    return b


","def sort_age ( lst ) :
    a = [ ]
    b = [ ]
    n = len ( lst )
    for i in range ( n ) :
        age = lst [ i ] [ 1 ]
        a += [ age ]
        a . sort ( )
        a . reverse ( )
        for j in range ( n ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( a [ j ] == lst [ k ] [ 1 ] ) :
                    pass
                b += [ lst [ k ] ]
            else :
                continue
            pass
        pass
    return b
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if False:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    n = len ( lst )
    for i in range ( n ) :
        for j in range ( ( i + 1 ) , n ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.764,0.149,0.000,0.002,0.130,0.221,0.477,10.333,6,6,0.935
question_4,0,0,wrong_4_253.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i [ 1 ]
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i [ 1 ]
            pass
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1


",N/A,7.958,0.422,0.000,0.001,0.064,0.246,0.165,9.175,6,6,1.234
question_4,0,0,wrong_4_264.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.035,0.202,0.000,0.001,0.047,0.113,0.092,8.616,6,6,3.950
question_4,0,0,wrong_4_224.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = [ ]
    for i in lst :
        if ( i == max ( lst ) ) :
            a . append ( i )
        continue
    return a


","def sort_age ( lst ) :
    a = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in lst :
            pass
            if ( i == max ( lst ) ) :
                pass
            else :
                pass
            a . append ( i )
        continue
    return a
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = len ( lst )
    for i in range ( a ) :
        for j in range ( ( i + 1 ) , a ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.087,0.268,0.000,0.001,0.047,0.243,0.135,8.914,6,6,2.520
question_4,0,0,wrong_4_023.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lsst :
        biggest = a [ 0 ]
        for element in a :
            if ( element > biggest ) :
                smallest = element
        a . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = a [ 0 ]
        for element in a :
            pass
            if ( element > biggest ) :
                smallest = element
            pass
        a . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.031,0.375,0.000,0.001,0.041,0.297,0.134,9.104,6,6,1.816
question_4,0,0,wrong_4_073.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst [ 1 : ] :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
        return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in lst [ 1 : ] :
            pass
            if ( i [ 1 ] > oldest [ 1 ] ) :
                pass
            else :
                oldest = i
            pass
        lst . remove ( oldest )
        sort . append ( oldest )
        return sort
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst [ 1 : ] :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.129,0.427,0.000,0.001,0.050,0.127,0.180,9.246,6,6,1.298
question_4,0,0,wrong_4_094.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda tup : tup [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda tup : tup [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tup = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tup
    return lst


",N/A,8.046,0.195,0.000,0.002,0.048,0.015,0.194,8.632,6,6,3.200
question_4,0,0,wrong_4_057.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    arranged = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person > oldest ) :
                oldest = person
        lst . remove ( oldest )
        arranged . append ( oldest )
    return arranged
    pass


","def sort_age ( lst ) :
    arranged = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for person in lst :
            pass
            if ( person > oldest ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                pass
            else :
                oldest = person
            pass
        lst . remove ( oldest )
        arranged . append ( oldest )
    return arranged
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    arranged = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] > oldest [ 1 ] ) :
                oldest = person
        lst . remove ( oldest )
        arranged . append ( oldest )
    return arranged
    pass


",N/A,8.077,0.374,0.000,0.001,0.076,0.211,0.107,9.157,6,6,2.077
question_4,0,0,wrong_4_292.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > biggest ) :
                biggest = i [ 1 ]
        lst . remove ( i )
        sort . append ( i )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] > biggest ) :
                biggest = i [ 1 ]
            pass
        lst . remove ( i )
        sort . append ( i )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.056,0.408,0.000,0.001,0.043,0.322,0.138,9.288,6,6,1.298
question_4,0,0,wrong_4_306.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i < smallest ) :
                smallest = i
        lst . remove ( smallest )
        sort . append ( smallest )
    pass


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        return lst
    else :
        pass
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i < smallest ) :
                smallest = i
            pass
        lst . remove ( smallest )
        sort . append ( smallest )
    pass
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > smallest [ 1 ] ) :
                smallest = i
        lst . remove ( smallest )
        sort . append ( smallest )
    return sort


",N/A,8.066,0.358,0.000,0.001,0.043,0.196,0.131,9.008,6,6,1.730
question_4,0,0,wrong_4_019.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    product = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
        lst . remove ( smallest )
        product . append ( smallest )
    return product


","def sort_age ( lst ) :
    product = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
            pass
        lst . remove ( smallest )
        product . append ( smallest )
    return product
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    product = lst . copy ( )
    for i in range ( ( len ( product ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( product ) ) :
            if ( product [ i ] [ 1 ] < product [ j ] [ 1 ] ) :
                ( product [ i ] , product [ j ] ) = ( product [ j ] , product [ i ] )
    return product


",N/A,8.059,0.394,0.000,0.001,0.104,0.254,0.272,9.374,6,6,1.318
question_4,0,0,wrong_4_041.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.068,0.186,0.000,0.002,0.049,0.024,0.116,8.574,6,6,3.850
question_4,0,0,wrong_4_077.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,8.087,0.191,0.000,0.001,0.047,0.103,0.092,8.625,6,6,3.250
question_4,0,0,wrong_4_044.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.126,0.186,0.000,0.001,0.047,0.111,0.094,8.669,6,6,3.250
question_4,0,0,wrong_4_272.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) < 2 ) :
        return lst
    midpoint = ( len ( lst ) // 2 )
    left = sort_age ( lst [ : midpoint ] )
    right = sort_age ( lst [ midpoint : ] )
    new_list = [ ]
    while ( left and right ) :
        if ( left [ 0 ] [ 1 ] > right [ 0 ] [ 1 ] ) :
            new_list . append ( left . pop ( 0 ) )
        else :
            new_list . append ( right . pop ( 0 ) )
        new_list . extend ( left )
        new_list . extend ( right )
        new_list . reverse
        return new_list


","def sort_age ( lst ) :
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            midpoint = ( len ( lst ) // 2 )
            left = sort_age ( lst [ : midpoint ] )
            right = sort_age ( lst [ midpoint : ] )
            new_list = [ ]
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( left [ 0 ] [ 1 ] > right [ 0 ] [ 1 ] ) :
                    pass
                new_list . append ( left . pop ( 0 ) )
            else :
                pass
            new_list . append ( right . pop ( 0 ) )
        new_list . extend ( left )
        new_list . extend ( right )
        new_list . reverse
        return new_list
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    if ( len ( lst ) < 2 ) :
        return lst
    midpoint = ( len ( lst ) // 2 )
    left = sort_age ( lst [ : midpoint ] )
    right = sort_age ( lst [ midpoint : ] )
    new_list = [ ]
    while ( left and right ) :
        if ( left [ 0 ] [ 1 ] > right [ 0 ] [ 1 ] ) :
            new_list . append ( left . pop ( 0 ) )
        else :
            new_list . append ( right . pop ( 0 ) )
    new_list . extend ( left )
    new_list . extend ( right )
    return new_list


",N/A,7.543,0.248,0.000,0.002,0.057,0.159,0.603,9.212,6,6,0.903
question_4,0,0,wrong_4_076.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                return lst
            pass
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,7.941,0.185,0.000,0.002,0.049,0.554,0.093,8.952,6,6,4.000
question_4,0,0,wrong_4_187.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        eldest = lst [ 0 ]
        for i in lst :
            if ( i > eldest ) :
                eldest = i
        lst . remove ( eldest )
        new . append ( eldest )
    return new


","def sort_age ( lst ) :
    new = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        eldest = lst [ 0 ]
        for i in lst :
            pass
            if ( i > eldest ) :
                eldest = i
            pass
        lst . remove ( eldest )
        new . append ( eldest )
    return new
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        eldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > eldest [ 1 ] ) :
                eldest = i
        lst . remove ( eldest )
        new . append ( eldest )
    return new


",N/A,8.045,0.365,0.000,0.001,0.043,0.241,0.127,9.036,6,6,1.711
question_4,0,0,wrong_4_124.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    firstnum = lst [ 0 ] [ 1 ]
    result = [ lst [ 0 ] ]
    for x in lst [ 1 : ] :
        if ( x [ 1 ] < firstnum ) :
            result += ( x , )
        else :
            result = ( ( x , ) + result )
    return result
    pass


","def sort_age ( lst ) :
    firstnum = lst [ 0 ] [ 1 ]
    result = [ lst [ 0 ] ]
    for x in lst [ 1 : ] :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( x [ 1 ] < firstnum ) :
                    result += ( x , )
                else :
                    pass
                pass
            result = ( ( x , ) + result )
        pass
    return result
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        firstnum = lst [ i ] [ 1 ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > firstnum ) :
                firstnum = lst [ j ] [ 1 ]
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,7.283,0.079,0.000,0.001,0.058,0.341,0.331,8.429,6,6,1.327
question_4,0,0,wrong_4_269.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            return lst
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                return lst
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.062,0.191,0.000,0.002,0.049,0.022,0.091,8.579,6,6,3.900
question_4,0,0,wrong_4_022.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    while lsst :
        biggest = a [ 0 ]
        for element in a :
            if ( element > biggest ) :
                smallest = element
        a . remove ( biggest )
        sort . append ( biggest )
    return lst


","def sort_age ( lst ) :
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = a [ 0 ]
        for element in a :
            pass
            if ( element > biggest ) :
                pass
            else :
                smallest = element
            pass
        a . remove ( biggest )
        sort . append ( biggest )
    return lst
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.119,0.338,0.000,0.001,0.046,0.150,10.268,19.127,6,6,2.000
question_4,0,0,wrong_4_161.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.027,0.185,0.000,0.001,0.046,0.100,0.087,8.548,6,6,3.250
question_4,0,0,wrong_4_323.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    new_lst = lst
    newnew = [ new_lst [ 0 ] ]
    for i in new_lst :
        for j in range ( len ( newnew ) ) :
            if ( i [ 1 ] > newnew [ j ] [ 1 ] ) :
                newnew . insert ( ( j + 1 ) , i )
            elif ( i [ 1 ] < newnew [ j ] [ 1 ] ) :
                newnew . insert ( j , i )
            return newnew
        return newnew


","def sort_age ( lst ) :
    new_lst = lst
    newnew = [ new_lst [ 0 ] ]
    for i in new_lst :
        for j in range ( len ( newnew ) ) :
            if ( i [ 1 ] > newnew [ j ] [ 1 ] ) :
                newnew . insert ( ( j + 1 ) , i )
            elif ( i [ 1 ] < newnew [ j ] [ 1 ] ) :
                newnew . insert ( j , i )
            return newnew
        return newnew


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.j'},"def sort_age ( lst ) :
    new_lst = lst
    newnew = [ ]
    for i in new_lst :
        inserted = False
        for j in range ( len ( newnew ) ) :
            if ( i [ 1 ] > newnew [ j ] [ 1 ] ) :
                newnew . insert ( j , i )
                inserted = True
                break
        if ( not inserted ) :
            newnew . append ( i )
    return newnew


",N/A,0.071,0.040,0.000,0.000,0.046,0.219,0.450,1.423,6,6,0.817
question_4,0,0,wrong_4_262.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    s = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        s . append ( smallest )
        s . reverse ( )
    return s


","def sort_age ( lst ) :
    s = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if True :
                    pass
                pass
            else :
                smallest = element
            pass
        lst . remove ( smallest )
        s . append ( smallest )
        s . reverse ( )
    return s
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    s = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        s . append ( smallest )
    return s


",N/A,8.000,0.426,0.000,0.001,0.077,0.165,0.177,9.176,6,6,1.312
question_4,0,0,wrong_4_332.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                ( biggest - i )
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > biggest [ 1 ] ) :
                ( biggest - i )
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.045,0.404,0.000,0.001,0.058,0.261,0.134,9.213,6,6,1.326
question_4,0,0,wrong_4_249.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        b = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > biggest ) :
                biggest = lst [ i ] [ 1 ]
                b = ( lst [ i ] , )
        lst . remove ( b )
        list1 . append ( b )
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ] [ 1 ]
        b = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > biggest ) :
                pass
            else :
                biggest = lst [ i ] [ 1 ]
                b = ( lst [ i ] , )
            pass
        lst . remove ( b )
        list1 . append ( b )
    return list1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        b = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > biggest ) :
                biggest = lst [ i ] [ 1 ]
                b = lst [ i ]
        lst . remove ( b )
        list1 . append ( b )
    return list1


",N/A,8.111,0.576,0.000,0.002,0.091,0.165,0.505,10.020,6,6,0.831
question_4,0,0,wrong_4_333.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    for i in range ( 1 , len ( lst ) ) :
        while ( lst [ i ] [ 1 ] < lst [ ( i - 1 ) ] [ 1 ] ) :
            lst . pop ( lst [ i ] )
            lst . insert ( lst [ i ] , ( i - 1 ) )
    return lst . reverse ( )


","def sort_age ( lst ) :
    pass
    for i in range ( 1 , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            lst . pop ( lst [ i ] )
            lst . insert ( lst [ i ] , ( i - 1 ) )
            if False :
                pass
            else :
                return lst
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    return lst . reverse ( )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    if False:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.090,0.458,0.000,0.002,0.049,0.195,0.373,9.570,6,6,0.821
question_4,0,0,wrong_4_337.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ lst [ 0 ] ]
    for x in lst [ 1 : ] :
        if ( x [ 1 ] > new_lst [ ( - 1 ) ] [ 1 ] ) :
            new_lst += [ x ]
        else :
            count = 0
            while ( count < len ( new_lst ) ) :
                if ( x [ 1 ] > new_lst [ count ] [ 1 ] ) :
                    count += 1
                    continue
                else :
                    new_lst = ( ( new_lst [ 0 : count ] + [ x ] ) + new_lst [ count : ] )
                    break
    return new_lst [ : : ( - 1 ) ]


","def sort_age ( lst ) :
    new_lst = [ lst [ 0 ] ]
    for x in lst [ 1 : ] :
        pass
        if ( x [ 1 ] > new_lst [ ( - 1 ) ] [ 1 ] ) :
            new_lst += [ x ]
        count = 0
        if True :
            pass
            for j in range ( ( i + 1 ) , len ( lst ) ) :
                count += 1
                continue
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    new_lst = ( ( new_lst [ 0 : count ] + [ x ] ) + new_lst [ count : ] )
                    break
                pass
            pass
        pass
    return new_lst [ : : ( - 1 ) ]
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if True:
            pass
        if True:
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B1.f'}","def sort_age ( lst ) :
    for ref_i in range ( ( len ( lst ) - 1 ) ) :
        pass
        if True :
            pass
        if True :
            pass
            for count in range ( ( ref_i + 1 ) , len ( lst ) ) :
                if ( lst [ ref_i ] [ 1 ] < lst [ count ] [ 1 ] ) :
                    x = lst [ ref_i ]
                    lst [ ref_i ] = lst [ count ]
                    lst [ count ] = x
                pass
            pass
        pass
    return lst


",N/A,9.524,0.090,0.000,0.002,0.053,0.429,1.051,12.187,6,6,0.957
question_4,0,0,wrong_4_103.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    largest = lst [ 0 ] [ 1 ]
    sort1 = [ ]
    for i in lst :
        if ( i [ 1 ] > largest ) :
            largest = i [ 1 ]
        sort1 . append ( i )
    return sort1


","def sort_age ( lst ) :
    largest = lst [ 0 ] [ 1 ]
    sort1 = [ ]
    for i in lst :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
            pass
        return lst
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        sort1 . append ( i )
    return sort1
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        largest = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ largest ] [ 1 ] ) :
                largest = j
        ( lst [ i ] , lst [ largest ] ) = ( lst [ largest ] , lst [ i ] )
    return lst


",N/A,8.108,0.353,0.000,0.002,0.049,0.298,0.178,9.258,6,6,1.550
question_4,0,0,wrong_4_029.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) == 0 ) :
        return [ ]
    elif ( len ( lst ) == 1 ) :
        return lst
    else :
        mid = ( len ( lst ) // 2 )
        lst1 = lst [ : mid ]
        lst2 = lst [ mid : ]
        result = [ ]
        while ( lst1 and lst2 ) :
            if ( lst1 [ 0 ] [ 1 ] < lst2 [ 0 ] [ 1 ] ) :
                result . append ( lst1 . pop ( ) )
            else :
                result . append ( lst2 . pop ( ) )
        result . extend ( lst1 )
        result . extend ( lst2 )
        return result


","def sort_age ( lst ) :
    pass
    if ( len ( lst ) == 0 ) :
        return [ ]
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            mid = ( len ( lst ) // 2 )
            lst1 = lst [ : mid ]
            lst2 = lst [ mid : ]
            result = [ ]
            for j in range ( ( i + 1 ) , len ( lst ) ) :
                pass
                if ( lst1 [ 0 ] [ 1 ] < lst2 [ 0 ] [ 1 ] ) :
                    result . append ( lst1 . pop ( ) )
                else :
                    pass
                result . append ( lst2 . pop ( ) )
            pass
        result . extend ( lst1 )
        result . extend ( lst2 )
        return result
    pass
","

def sort_age(lst):
    if (len(range(0, (len(lst) - 1))) > 0):
        for i in range(0, (len(lst) - 1)):
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'C1.n,B2.l'}","def sort_age ( lst ) :
    if ( len ( lst ) == 0 ) :
        return [ ]
    elif ( len ( lst ) == 1 ) :
        return lst
    else :
        for i in range ( len ( lst ) ) :
            for j in range ( ( i + 1 ) , len ( lst ) ) :
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
        return lst


",N/A,9.708,0.619,0.000,0.002,0.048,0.244,1.200,12.960,6,6,0.903
question_4,0,0,wrong_4_106.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    smallest = lst [ 0 ] [ 1 ]
    sort = [ ]
    while lst :
        for k in lst :
            if ( k [ 1 ] < smallest ) :
                smallest = k [ 1 ]
        a . remove ( smallest )
        sort . append ( smallest )


","def sort_age ( lst ) :
    smallest = lst [ 0 ] [ 1 ]
    sort = [ ]
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for k in lst :
            pass
            if ( k [ 1 ] < smallest ) :
                pass
            else :
                smallest = k [ 1 ]
            pass
        a . remove ( smallest )
        sort . append ( smallest )
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,7.976,0.406,0.000,0.001,0.095,0.106,0.062,8.966,6,6,1.511
question_4,0,0,wrong_4_267.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sorted_list = [ ]
    while a :
        oldest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > oldest ) :
                oldest = element [ 1 ]
        lst . remove ( oldest )
        sorted_list . append ( oldest )
    return sorted_list


","def sort_age ( lst ) :
    sorted_list = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] > oldest ) :
                oldest = element [ 1 ]
            pass
        lst . remove ( oldest )
        sorted_list . append ( oldest )
    return sorted_list
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sorted_list = [ ]
    while lst :
        oldest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > oldest [ 1 ] ) :
                oldest = element
        lst . remove ( oldest )
        sorted_list . append ( oldest )
    return sorted_list


",N/A,8.069,0.394,0.000,0.001,0.041,0.300,0.128,9.239,6,6,1.409
question_4,0,0,wrong_4_045.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    result = [ lst [ 0 ] ]
    for i in lst [ 1 : ] :
        if ( i [ 1 ] > result [ 0 ] [ 1 ] ) :
            result . insert ( 0 , i )
        elif ( i [ 1 ] < result [ ( - 1 ) ] [ 1 ] ) :
            result . append ( i )
        else :
            for j in range ( ( len ( result ) - 1 ) ) :
                if ( ( i [ 1 ] < result [ j ] [ 1 ] ) and ( i [ 1 ] > result [ ( j + 1 ) ] [ 1 ] ) ) :
                    result . insert ( ( j + 1 ) , i )
    return result


","def sort_age ( lst ) :
    result = [ lst [ 0 ] ]
    if True :
        pass
        if ( i [ 1 ] > result [ 0 ] [ 1 ] ) :
            result . insert ( 0 , i )
        pass
    result . append ( i )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( len ( result ) - 1 ) ) :
            pass
            if ( ( i [ 1 ] < result [ j ] [ 1 ] ) and ( i [ 1 ] > result [ ( j + 1 ) ] [ 1 ] ) ) :
                pass
            pass
        pass
    return result
","

def sort_age(lst):
    if True:
        if True:
            pass
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B1.h'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,10.616,0.477,0.000,0.002,0.044,0.305,1.205,13.947,6,6,0.847
question_4,0,0,wrong_4_246.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    list1 = [ ]
    smallest = lst [ 0 ] [ 1 ]
    s = ( lst [ 0 ] , )
    for j in range ( 1 , len ( lst ) ) :
        for i in range ( 1 , ( len ( lst ) - 1 ) ) :
            if ( lst [ i ] [ 1 ] < smallest ) :
                smallest = lst [ i ] [ 1 ]
                s = ( lst [ i ] , )
        list1 += s
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    smallest = lst [ 0 ] [ 1 ]
    s = ( lst [ 0 ] , )
    for j in range ( 1 , len ( lst ) ) :
        for i in range ( 1 , ( len ( lst ) - 1 ) ) :
            if ( lst [ i ] [ 1 ] < smallest ) :
                smallest = lst [ i ] [ 1 ]
                s = ( lst [ i ] , )
        list1 += s
    return list1


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    for j in range ( len ( lst ) ) :
        smallest = lst [ j ] [ 1 ]
        s = j
        for i in range ( ( j + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > smallest ) :
                smallest = lst [ i ] [ 1 ]
                s = i
        ( lst [ j ] , lst [ s ] ) = ( lst [ s ] , lst [ j ] )
    return lst


",N/A,0.001,0.021,0.000,0.000,0.094,0.462,0.588,1.726,6,6,0.773
question_4,0,0,wrong_4_250.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    swap = True
    while swap :
        swap = False
        for tag in range ( ( len ( lst ) - 1 ) ) :
            if ( lst [ tag ] [ 1 ] < lst [ ( tag + 1 ) ] [ 1 ] ) :
                ( lst [ tag ] , lst [ ( tag + 1 ) ] ) = ( lst [ ( tag + 1 ) ] , lst [ tag ] )
                swap = True


","def sort_age ( lst ) :
    swap = True
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        swap = False
        for tag in range ( ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ tag ] [ 1 ] < lst [ ( tag + 1 ) ] [ 1 ] ) :
                pass
            else :
                ( lst [ tag ] , lst [ ( tag + 1 ) ] ) = ( lst [ ( tag + 1 ) ] , lst [ tag ] )
                swap = True
            pass
        pass
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    swap = True
    while swap :
        swap = False
        for tag in range ( ( len ( lst ) - 1 ) ) :
            if ( lst [ tag ] [ 1 ] < lst [ ( tag + 1 ) ] [ 1 ] ) :
                ( lst [ tag ] , lst [ ( tag + 1 ) ] ) = ( lst [ ( tag + 1 ) ] , lst [ tag ] )
                swap = True
    return lst


",N/A,8.031,0.571,0.000,0.002,0.050,0.127,0.748,10.233,6,6,0.729
question_4,0,0,wrong_4_174.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ] [ 1 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < smallest ) :
                smallest = lst [ i ] [ 1 ]
        lst . remove ( smallest )
        sort . append ( smallest )
        sort . reverse ( smallest )
        return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ] [ 1 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < smallest ) :
                smallest = lst [ i ] [ 1 ]
            pass
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        lst . remove ( smallest )
        sort . append ( smallest )
        sort . reverse ( smallest )
        return sort
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > largest [ 1 ] ) :
                largest = lst [ i ]
        lst . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.078,0.515,0.000,0.002,0.129,0.279,0.291,9.783,6,6,0.984
question_4,0,0,wrong_4_190.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
    for element in lst :
        if ( element [ 1 ] > biggest [ 1 ] ) :
            biggest = element
    lst . remove ( biggest )
    sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        if True :
            biggest = lst [ 0 ]
        pass
        for element in lst :
            pass
            if ( element [ 1 ] > biggest [ 1 ] ) :
                pass
            else :
                pass
            biggest = element
        pass
    lst . remove ( biggest )
    sort . append ( biggest )
    return sort
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if True:
            pass
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.l,B1.h'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.091,0.155,0.000,0.001,0.051,0.291,0.113,8.959,6,6,1.500
question_4,0,0,wrong_4_345.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        if ( i [ 1 ] > current ) :
            tup += tuple ( i )
            current = i [ 1 ]
        else :
            ( tuple ( i ) + tup )
    return tup


","def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if ( i [ 1 ] > current ) :
                    tup += tuple ( i )
                    current = i [ 1 ]
                else :
                    pass
                pass
            ( tuple ( i ) + tup )
        pass
    return tup
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                current = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = current
    return lst


",N/A,7.271,0.070,0.000,0.002,0.052,0.542,0.547,8.786,6,6,1.381
question_4,0,0,wrong_4_028.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    def for_age ( lst ) :
        for i in range ( len ( lst ) ) :
            if ( i == 0 ) :
                continue
            else :
                while ( i > 0 ) :
                    if ( lst [ i ] [ 1 ] < lst [ ( i - 1 ) ] [ 1 ] ) :
                        ( lst [ i ] , lst [ ( i - 1 ) ] ) = ( lst [ ( i - 1 ) ] , lst [ i ] )
                        i -= 1
                    else :
                        i = 0
    for_age ( lst ) . reverse
    return lst


","def sort_age ( lst ) :
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( len ( lst ) ) :
            pass
            if ( i == 0 ) :
                continue
            pass
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) [ int ( ( len ( range ( ( i + 1 ) , len ( lst ) ) ) / 2 ) ) : ] :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ( i - 1 ) ] [ 1 ] ) :
                ( lst [ i ] , lst [ ( i - 1 ) ] ) = ( lst [ ( i - 1 ) ] , lst [ i ] )
                i -= 1
                if True :
                    pass
                pass
            pass
        pass
    for_age ( lst ) . reverse
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst))[:int((len(range((i + 1), len(lst))) / 2))]:
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
        for j in range((i + 1), len(lst))[int((len(range((i + 1), len(lst))) / 2)):]:
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                if True:
                    lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'E1.z,B1.f'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,13.014,0.211,0.000,0.002,0.065,0.682,0.911,17.413,6,6,1.345
question_4,0,0,wrong_4_112.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.097,0.185,0.000,0.001,0.046,0.114,0.093,8.664,6,6,4.000
question_4,0,0,wrong_4_238.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = list [ 0 ]
        for x in lst :
            if ( x [ 1 ] > oldest [ 1 ] ) :
                oldest = x
        a . remove ( oldest )
        sort . append ( oldest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = list [ 0 ]
        for x in lst :
            pass
            if ( x [ 1 ] > oldest [ 1 ] ) :
                oldest = x
            pass
        a . remove ( oldest )
        sort . append ( oldest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for x in lst :
            if ( x [ 1 ] > oldest [ 1 ] ) :
                oldest = x
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.131,0.392,0.000,0.002,0.041,0.250,0.133,9.242,6,6,1.432
question_4,0,0,wrong_4_330.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                ( biggesr - k )
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > biggest [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            else :
                ( biggesr - k )
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.088,0.404,0.000,0.002,0.060,0.165,0.160,9.276,6,6,1.630
question_4,0,0,wrong_4_015.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element < smallest ) :
                smallest = element
        a . remove ( smallest )
        sort . append ( smallest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for element in lst :
            pass
            if ( element < smallest ) :
                smallest = element
            pass
        a . remove ( smallest )
        sort . append ( smallest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > largest [ 1 ] ) :
                largest = element
        lst . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.074,0.366,0.000,0.001,0.041,0.289,0.137,9.122,6,6,1.763
question_4,0,0,wrong_4_214.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
            pass
        pass
    return lst


",N/A,8.073,0.174,0.000,0.001,0.047,0.022,0.110,8.545,6,6,4.444
question_4,0,0,wrong_4_274.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        largest = lst [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] > largest ) :
                largest = ele
        a . remove ( largest )
        new . append ( largest )
        return new


","def sort_age ( lst ) :
    new = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ]
        for ele in lst :
            pass
            if ( ele [ 1 ] > largest ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                pass
            else :
                largest = ele
            pass
        a . remove ( largest )
        new . append ( largest )
        return new
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        largest = lst [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] > largest [ 1 ] ) :
                largest = ele
        lst . remove ( largest )
        new . append ( largest )
    return new


",N/A,8.065,0.382,0.000,0.001,0.063,0.112,0.145,9.125,6,6,1.927
question_4,0,0,wrong_4_083.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )


","def sort_age ( lst ) :
    new_lst = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                pass
            else :
                oldest = lst [ i ]
            pass
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        oldest = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ oldest ] [ 1 ] ) :
                oldest = j
        ( lst [ i ] , lst [ oldest ] ) = ( lst [ oldest ] , lst [ i ] )
    return lst


",N/A,8.033,0.451,0.000,0.002,0.047,0.241,0.367,9.550,6,6,0.946
question_4,0,0,wrong_4_142.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < oldest [ 1 ] ) :
                oldest = i
            pass
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.044,0.393,0.000,0.001,0.041,0.285,0.125,9.177,6,6,1.318
question_4,0,0,wrong_4_232.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    compiled = [ ]
    result = [ ]
    for i in lst :
        compiled = ( compiled + [ i [ 1 ] ] )
    compiled . sort ( )
    compiled . reverse ( )
    for i in compiled :
        for j in lst :
            if ( i == j [ 1 ] ) :
                result = ( result + [ j ] )
    return result


","def sort_age ( lst ) :
    compiled = [ ]
    result = [ ]
    if False :
        compiled = ( compiled + [ i [ 1 ] ] )
    compiled . sort ( )
    compiled . reverse ( )
    for i in compiled :
        pass
        if False :
            pass
        pass
        for j in lst :
            pass
            if ( i == j [ 1 ] ) :
                result = ( result + [ j ] )
            pass
        pass
    return result
","

def sort_age(lst):
    if False:
        pass
    for i in range(0, (len(lst) - 1)):
        if False:
            pass
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B1.g'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,9.214,0.056,0.000,0.001,0.045,0.249,0.328,10.267,6,6,1.333
question_4,0,0,wrong_4_071.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    while lst :
        oldest = lst [ 0 ]
        for i in lst [ 1 : ] :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


","def sort_age ( lst ) :
    pass
    if True :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in lst [ 1 : ] :
            pass
            if ( i [ 1 ] > oldest [ 1 ] ) :
                pass
            else :
                oldest = i
            pass
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst [ 1 : ] :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.088,0.388,0.000,0.001,0.046,0.165,0.140,9.134,6,6,1.386
question_4,0,0,wrong_4_164.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    return lst
                return lst
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
    return lst


",N/A,8.087,0.160,0.000,0.002,0.052,0.091,0.072,8.549,6,6,4.125
question_4,0,0,wrong_4_297.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    ages = [ ]
    output = [ ]
    for item in lst :
        ages . append ( item [ 1 ] )
    for item in lst :
        age = max ( ages )
        if ( age == item [ 1 ] ) :
            output . append ( item )
            ages . remove ( age )
    return output


","def sort_age ( lst ) :
    ages = [ ]
    output = [ ]
    if True :
        ages . append ( item [ 1 ] )
    else :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for item in lst :
            age = max ( ages )
            if ( age == item [ 1 ] ) :
                pass
            output . append ( item )
            ages . remove ( age )
        pass
    return output
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.218,0.665,0.000,0.001,0.042,0.168,0.280,9.683,6,6,1.367
question_4,0,0,wrong_4_007.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( 0 , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] < this [ 1 ] ) :
                del lst [ i ]
                lst = ( ( lst [ 0 : ( j - 1 ) ] + [ this ] ) + lst [ j : ] )
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( 0 , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] < this [ 1 ] ) :
                del lst [ i ]
                lst = ( ( lst [ 0 : ( j - 1 ) ] + [ this ] ) + lst [ j : ] )
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > this [ 1 ] ) :
                lst [ i ] = lst [ j ]
                lst [ j ] = this
                this = lst [ i ]
    return lst
    pass


",N/A,0.001,0.019,0.000,0.000,0.062,0.366,0.614,1.643,6,6,0.565
question_4,0,0,wrong_4_160.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
        pass
    return lst


",N/A,8.090,0.184,0.000,0.002,0.047,0.111,0.085,8.615,6,6,3.667
question_4,0,0,wrong_4_184.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
        return sort


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = a [ 0 ]
        for item in a :
            pass
            if ( item [ 1 ] > largest [ 1 ] ) :
                pass
                if True :
                    pass
                return lst
            else :
                largest = item
            pass
        a . remove ( largest )
        sort . append ( largest )
        return sort
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.089,0.415,0.000,0.001,0.098,0.170,0.174,9.289,6,6,1.426
question_4,0,0,wrong_4_056.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    while lst :
        for i in range ( len ( lst ) ) :
            oldest = lst [ 0 ]
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        lst . remove ( oldest )
        new_lst . append ( oldest )
    return new_lst


","def sort_age ( lst ) :
    new_lst = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( len ( lst ) ) :
            oldest = lst [ 0 ]
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
            pass
        lst . remove ( oldest )
        new_lst . append ( oldest )
    return new_lst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    new_lst = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        lst . remove ( oldest )
        new_lst . append ( oldest )
    return new_lst


",N/A,8.075,0.455,0.000,0.001,0.042,0.296,0.250,9.501,6,6,0.926
question_4,0,0,wrong_4_091.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    holder = [ ]
    if ( lst == [ ] ) :
        return [ ]
    for x in lst :
        if ( holder == [ ] ) :
            holder = x
        elif ( x [ 1 ] > holder [ 1 ] ) :
            holder = x
    return ( [ holder ] + sort_age ( lst . remove ( holder ) ) )


","def sort_age ( lst ) :
    holder = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        if ( lst == [ ] ) :
            return [ ]
        pass
        for x in lst :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( holder == [ ] ) :
                    holder = x
                pass
            holder = x
        pass
    return ( [ holder ] + sort_age ( lst . remove ( holder ) ) )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if False:
            pass
        for j in range((i + 1), len(lst)):
            if True:
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B1.f'}","def sort_age ( lst ) :
    holder = [ ]
    if ( lst == [ ] ) :
        return [ ]
    for x in lst [ : ] :
        if ( holder == [ ] ) :
            holder = x
        elif ( x [ 1 ] > holder [ 1 ] ) :
            holder = x
    lst . remove ( holder )
    return ( [ holder ] + sort_age ( lst ) )


",N/A,7.826,0.190,0.000,0.002,0.051,0.227,0.158,8.933,6,6,1.640
question_4,0,0,wrong_4_327.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sorted = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        sorted . append ( lst . pop ( i ) )
    return sorted


","def sort_age ( lst ) :
    sorted = [ ]
    if True :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
            pass
        sorted . append ( lst . pop ( i ) )
    return sorted
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sorted = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        sorted . append ( lst . pop ( lst . index ( oldest ) ) )
    return sorted


",N/A,7.994,0.445,0.000,0.001,0.041,0.251,0.273,9.383,6,6,0.962
question_4,0,0,wrong_4_172.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.069,0.185,0.000,0.002,0.047,0.023,0.096,8.578,6,6,4.000
question_4,0,0,wrong_4_080.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                return lst
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.063,0.190,0.000,0.001,0.047,0.168,0.009,8.491,6,6,4.000
question_4,0,0,wrong_4_093.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    result = [ ]
    maximum = 0
    for i in lst :
        if ( i [ 1 ] > maximum ) :
            maximum = i [ 1 ]
            result . insert ( 0 , i )
        else :
            result . append ( i )
    return result


","def sort_age ( lst ) :
    result = [ ]
    maximum = 0
    for i in lst :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if True :
                pass
                if ( i [ 1 ] > maximum ) :
                    maximum = i [ 1 ]
                    result . insert ( 0 , i )
                else :
                    pass
                pass
            result . append ( i )
        pass
    return result
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        maximum = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ maximum ] [ 1 ] ) :
                maximum = j
        ( lst [ i ] , lst [ maximum ] ) = ( lst [ maximum ] , lst [ i ] )
    return lst


",N/A,7.316,0.069,0.000,0.001,0.047,0.690,0.238,8.640,6,6,1.475
question_4,0,0,wrong_4_084.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )


","def sort_age ( lst ) :
    new_lst = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                pass
            else :
                oldest = lst [ i ]
            pass
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.054,0.444,0.000,0.002,0.048,0.235,0.018,8.815,6,6,0.946
question_4,0,0,wrong_4_340.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    l = len ( lst )
    for i in range ( 0 , l ) :
        for j in range ( 0 , ( ( l - i ) - 1 ) ) :
            if ( lst [ j ] [ 1 ] > lst [ ( j + 1 ) ] [ 1 ] ) :
                temp = lst [ j ]
                lst [ j ] = lst [ ( j + 1 ) ]
                lst [ ( j + 1 ) ] = temp
    return lst


","def sort_age ( lst ) :
    l = len ( lst )
    for i in range ( 0 , l ) :
        for j in range ( 0 , ( ( l - i ) - 1 ) ) :
            if ( lst [ j ] [ 1 ] > lst [ ( j + 1 ) ] [ 1 ] ) :
                temp = lst [ j ]
                lst [ j ] = lst [ ( j + 1 ) ]
                lst [ ( j + 1 ) ] = temp
    return lst


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    l = len ( lst )
    for i in range ( 0 , l ) :
        for j in range ( 0 , ( ( l - i ) - 1 ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                temp = lst [ j ]
                lst [ j ] = lst [ ( j + 1 ) ]
                lst [ ( j + 1 ) ] = temp
    return lst


",N/A,0.001,0.020,0.000,0.000,0.086,1.315,0.775,2.823,6,6,0.447
question_4,0,0,wrong_4_222.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    n = len ( lst )
    result = [ ]
    while ( n != 0 ) :
        test = [ ]
        for counter in range ( n ) :
            test . append ( lst [ counter ] [ 1 ] )
        first = max ( test )
        for counter in range ( n ) :
            if ( lst [ counter ] [ 1 ] == first ) :
                result . append ( lst . pop ( counter ) )
        n = len ( lst )
    return result


","def sort_age ( lst ) :
    n = len ( lst )
    result = [ ]
    if True :
        test = [ ]
        for counter in range ( n ) :
            test . append ( lst [ counter ] [ 1 ] )
            if True :
                first = max ( test )
                for counter in range ( n ) :
                    pass
                    if ( lst [ counter ] [ 1 ] == first ) :
                        tmp = lst [ i ]
                        lst [ i ] = lst [ j ]
                        lst [ j ] = tmp
                    pass
                result . append ( lst . pop ( counter ) )
            pass
        n = len ( lst )
    return result
","

def sort_age(lst):
    if True:
        for i in range(0, (len(lst) - 1)):
            if True:
                for j in range((i + 1), len(lst)):
                    if (lst[i][1] < lst[j][1]):
                        tmp = lst[i]
                        lst[i] = lst[j]
                        lst[j] = tmp
        return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B1.f'}","def sort_age ( lst ) :
    n = len ( lst )
    result = [ ]
    while ( n != 0 ) :
        test = [ ]
        for counter in range ( n ) :
            test . append ( lst [ counter ] [ 1 ] )
        first = max ( test )
        for counter in range ( ( n - 1 ) , ( - 1 ) , ( - 1 ) ) :
            if ( lst [ counter ] [ 1 ] == first ) :
                result . append ( lst . pop ( counter ) )
                break
        n = len ( lst )
    return result


",N/A,8.645,0.025,0.000,0.002,0.066,0.145,0.527,10.117,6,6,1.000
question_4,0,0,wrong_4_072.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    while lst :
        oldest = lst [ 0 ]
        for i in lst [ 1 : ] :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
        return sort


","def sort_age ( lst ) :
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in lst [ 1 : ] :
            pass
            if ( i [ 1 ] > oldest [ 1 ] ) :
                pass
            else :
                oldest = i
            pass
        lst . remove ( oldest )
        sort . append ( oldest )
        return sort
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sorted_lst = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst [ 1 : ] :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sorted_lst . append ( oldest )
    return sorted_lst


",N/A,7.983,0.389,0.000,0.001,0.047,0.158,0.170,9.068,6,6,1.409
question_4,0,0,wrong_4_185.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
        print ( a )
        print ( sort )


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = a [ 0 ]
        for item in a :
            pass
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
            pass
        pass
    pass
    if False :
        pass
    else :
        a . remove ( largest )
        sort . append ( largest )
        print ( a )
        print ( sort )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    a = lst . copy ( )
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.103,0.461,0.000,0.001,0.252,0.195,0.192,9.557,6,6,1.340
question_4,0,0,wrong_4_078.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.058,0.192,0.000,0.002,0.048,0.017,0.009,8.457,6,6,3.150
question_4,0,0,wrong_4_318.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                return lst
            pass
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,8.062,0.190,0.000,0.002,0.050,0.181,0.021,8.632,6,6,4.211
question_4,0,0,wrong_4_120.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    first = lst [ 0 ] [ 1 ]
    result = [ ]
    for x in lst [ 1 : ] :
        if ( x [ 1 ] > first ) :
            result = ( ( first , ) + ( x [ 1 ] , ) )
        else :
            result = ( ( x [ 1 ] , ) + ( first , ) )
    return result
    pass


","def sort_age ( lst ) :
    first = lst [ 0 ] [ 1 ]
    result = [ ]
    for x in lst [ 1 : ] :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( x [ 1 ] > first ) :
                    result = ( ( first , ) + ( x [ 1 ] , ) )
                else :
                    pass
                pass
            result = ( ( x [ 1 ] , ) + ( first , ) )
        pass
    return result
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( len ( lst ) ) :
        first = lst [ ref_i ]
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            x = lst [ j ]
            if ( x [ 1 ] > first [ 1 ] ) :
                ( lst [ ref_i ] , lst [ j ] ) = ( x , first )
                first = x
    return lst


",N/A,7.317,0.090,0.000,0.001,0.046,0.371,0.355,8.598,6,6,1.218
question_4,0,0,wrong_4_216.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        return lst
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if True :
                pass
                if True :
                    return lst
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.086,0.166,0.000,0.001,0.046,0.105,0.079,8.574,6,6,3.500
question_4,0,0,wrong_4_243.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    i = 0
    smallest = lst [ 0 ] [ 1 ]
    s = ( lst [ 0 ] , )
    for i in range ( 1 , len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < smallest ) :
            smallest = lst [ i ] [ 1 ]
            s = ( lst [ i ] , )
    list1 += s
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    i = 0
    smallest = lst [ 0 ] [ 1 ]
    s = ( lst [ 0 ] , )
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < smallest ) :
                pass
            else :
                return lst
            smallest = lst [ i ] [ 1 ]
            s = ( lst [ i ] , )
        pass
    list1 += s
    return list1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    list1 = lst
    for i in range ( 0 , ( len ( list1 ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( list1 ) ) :
            if ( list1 [ i ] [ 1 ] < list1 [ j ] [ 1 ] ) :
                smallest = list1 [ i ]
                list1 [ i ] = list1 [ j ]
                list1 [ j ] = smallest
    return list1


",N/A,8.110,0.531,0.000,0.002,0.054,0.314,0.442,9.883,6,6,0.836
question_4,0,0,wrong_4_263.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    return lst
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.107,0.165,0.000,0.001,0.049,0.110,0.086,8.623,6,6,5.125
question_4,0,0,wrong_4_275.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.101,0.186,0.000,0.003,0.050,0.023,0.009,8.501,6,6,3.900
question_4,0,0,wrong_4_244.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    smallest = lst [ 0 ] [ 1 ]
    s = ( lst [ 0 ] , )
    for i in range ( 1 , len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < smallest ) :
            smallest = lst [ i ] [ 1 ]
            s = ( lst [ i ] , )
    list1 += s
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    smallest = lst [ 0 ] [ 1 ]
    s = ( lst [ 0 ] , )
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < smallest ) :
                pass
            else :
                pass
            smallest = lst [ i ] [ 1 ]
            s = ( lst [ i ] , )
        pass
    list1 += s
    return list1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.062,0.506,0.000,0.003,0.055,0.390,0.424,9.853,6,6,0.844
question_4,0,0,wrong_4_230.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    oldest = lst [ 0 ] [ 1 ]
    for item in lst :
        if ( item [ 1 ] > oldest ) :
            oldest = item [ 1 ]
            lst . remove ( item )
            lst = ( [ item ] + lst )
    return lst


","def sort_age ( lst ) :
    oldest = lst [ 0 ] [ 1 ]
    for item in lst :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( item [ 1 ] > oldest ) :
                pass
                if True :
                    pass
                pass
            elif False :
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            oldest = item [ 1 ]
            lst . remove ( item )
            lst = ( [ item ] + lst )
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.h'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        oldest = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ oldest ] [ 1 ] ) :
                oldest = j
        ( lst [ i ] , lst [ oldest ] ) = ( lst [ oldest ] , lst [ i ] )
    return lst


",N/A,8.103,0.367,0.000,0.001,0.147,0.110,0.256,9.302,6,6,1.364
question_4,0,0,wrong_4_319.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            pass
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,8.104,0.192,0.000,0.002,0.050,0.117,0.009,8.487,6,6,4.000
question_4,0,0,wrong_4_254.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                return lst
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,8.156,0.186,0.000,0.002,0.048,0.179,0.094,8.794,6,6,4.000
question_4,0,0,wrong_4_342.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        return lst
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
    return lst


",N/A,8.142,0.185,0.000,0.002,0.048,0.108,0.092,8.678,6,6,3.150
question_4,0,0,wrong_4_138.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        sort . append ( smallest )


","def sort_age ( lst ) :
    pass
    if True :
        pass
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                pass
            else :
                smallest = element
            pass
        lst . remove ( smallest )
        sort . append ( smallest )
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    return sorted ( lst , key = ( lambda x : x [ 1 ] ) , reverse = True )


",N/A,8.118,0.353,0.000,0.001,0.046,0.121,0.051,8.970,6,6,1.590
question_4,0,0,wrong_4_227.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i > biggest ) :
                biggest = i
        lst . remove ( biggest )
        a . append ( biggest )
    return a


","def sort_age ( lst ) :
    a = [ ]
    if True :
        pass
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in lst :
            pass
            if ( i > biggest ) :
                biggest = i
            pass
        lst . remove ( biggest )
        a . append ( biggest )
    return a
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        a . append ( biggest )
    return a


",N/A,8.066,0.376,0.000,0.001,0.041,0.268,0.129,9.097,6,6,1.684
question_4,0,0,wrong_4_349.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    current = 0
    tup = [ ]
    for i in lst :
        if ( i [ 1 ] > current ) :
            tup . append ( i )
        else :
            i . append ( tup )
    return tup


","def sort_age ( lst ) :
    current = 0
    tup = [ ]
    for i in lst :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( i [ 1 ] > current ) :
                    tup . append ( i )
                else :
                    pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            i . append ( tup )
        pass
    return tup
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,7.285,0.063,0.000,0.002,0.052,0.244,0.183,8.030,6,6,1.788
question_4,0,0,wrong_4_050.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    final = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
        lst . remove ( smallest )
        final . append ( smallest )
    print ( lst )


","def sort_age ( lst ) :
    final = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
            else :
                pass
            pass
        pass
    pass
    if False :
        lst . remove ( smallest )
        final . append ( smallest )
    print ( lst )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    if False:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    final = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > smallest [ 1 ] ) :
                smallest = i
        lst . remove ( smallest )
        final . append ( smallest )
    return final


",N/A,8.061,0.405,0.000,0.001,0.150,0.234,0.138,9.294,6,6,1.391
question_4,0,0,wrong_4_008.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( 0 , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] < this [ 1 ] ) :
                del lst [ i ]
                lst = ( ( lst [ 0 : j ] + [ this ] ) + lst [ j : ] )
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( 0 , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] < this [ 1 ] ) :
                del lst [ i ]
                lst = ( ( lst [ 0 : j ] + [ this ] ) + lst [ j : ] )
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > this [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
                this = lst [ i ]
    return lst
    pass


",N/A,0.001,0.019,0.000,0.000,0.095,0.348,0.615,1.625,6,6,0.545
question_4,0,0,wrong_4_149.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        small = lst [ 0 ] [ 1 ]
        name = lst [ 0 ] [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] < small ) :
                small = ele [ 1 ]
                name = ele [ 0 ]
        new . append ( ( name , small ) )
        lst . remove ( ( name , small ) )
    return new


","def sort_age ( lst ) :
    new = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        small = lst [ 0 ] [ 1 ]
        name = lst [ 0 ] [ 0 ]
        for ele in lst :
            pass
            if ( ele [ 1 ] < small ) :
                small = ele [ 1 ]
                name = ele [ 0 ]
            pass
        return lst
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        return lst
    elif False :
        new . append ( ( name , small ) )
        lst . remove ( ( name , small ) )
    return new
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    elif False:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.j'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        small = lst [ 0 ] [ 1 ]
        name = lst [ 0 ] [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] > small ) :
                small = ele [ 1 ]
                name = ele [ 0 ]
        new . append ( ( name , small ) )
        lst . remove ( ( name , small ) )
    return new


",N/A,8.118,0.540,0.000,0.002,0.094,0.662,0.399,10.334,6,6,1.015
question_4,0,0,wrong_4_123.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    firstnum = lst [ 0 ] [ 1 ]
    result = ( lst [ 0 ] , )
    for x in lst [ 1 : ] :
        if ( x [ 1 ] < firstnum ) :
            result += ( x , )
        else :
            result = ( ( x , ) + result )
    return result
    pass


","def sort_age ( lst ) :
    firstnum = lst [ 0 ] [ 1 ]
    result = ( lst [ 0 ] , )
    for x in lst [ 1 : ] :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( x [ 1 ] < firstnum ) :
                    result += ( x , )
                else :
                    pass
                pass
            result = ( ( x , ) + result )
        pass
    return result
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,7.342,0.081,0.000,0.001,0.053,0.314,0.277,8.406,6,6,1.327
question_4,0,0,wrong_4_170.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sorted_lst = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
        lst . remove ( smallest )
        sorted_lst . append ( smallest )
    return sorted_lst . reverse


","def sort_age ( lst ) :
    sorted_lst = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
            else :
                pass
            pass
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        lst . remove ( smallest )
        sorted_lst . append ( smallest )
    return sorted_lst . reverse
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    if False:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    sorted_lst = lst [ : ]
    for i in range ( len ( sorted_lst ) ) :
        for j in range ( ( i + 1 ) , len ( sorted_lst ) ) :
            if ( sorted_lst [ i ] [ 1 ] < sorted_lst [ j ] [ 1 ] ) :
                ( sorted_lst [ i ] , sorted_lst [ j ] ) = ( sorted_lst [ j ] , sorted_lst [ i ] )
    return sorted_lst


",N/A,8.071,0.403,0.000,0.001,0.150,0.309,0.267,9.501,6,6,1.400
question_4,0,0,wrong_4_347.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        if ( i [ 1 ] > current ) :
            tup += tuple ( i )
            current = i [ 1 ]
        else :
            tup = ( tuple ( i ) + tup )
    return list ( tup )


","def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( i [ 1 ] > current ) :
                    tup += tuple ( i )
                    current = i [ 1 ]
                else :
                    return lst
                pass
            tup = ( tuple ( i ) + tup )
        pass
    return list ( tup )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,7.338,0.076,0.000,0.001,0.054,0.671,0.273,8.753,6,6,1.356
question_4,0,0,wrong_4_024.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = a [ 0 ]
        for element in a :
            if ( element > biggest ) :
                smallest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = a [ 0 ]
        for element in a :
            pass
            if ( element > biggest ) :
                smallest = element
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.047,0.363,0.000,0.001,0.041,0.291,0.137,9.105,6,6,1.763
question_4,0,0,wrong_4_166.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . removal ( largest )
        sort . append ( largest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        pass
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
            pass
        lst . removal ( largest )
        sort . append ( largest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.152,0.409,0.000,0.002,0.063,0.264,0.125,9.306,6,6,1.341
question_4,0,0,wrong_4_335.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) == 1 ) :
        return lst
    else :
        temp = lst [ 0 ] [ 1 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < temp ) :
                temp = lst [ i ] [ 1 ]
                count = i
        result = [ lst [ count ] ]
        pop = lst . pop ( count )
        return ( result + sort_age ( lst ) )
    pass


","def sort_age ( lst ) :
    pass
    if ( len ( lst ) == 1 ) :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        temp = lst [ 0 ] [ 1 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < temp ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                temp = lst [ i ] [ 1 ]
                count = i
            pass
        result = [ lst [ count ] ]
        pop = lst . pop ( count )
        return ( result + sort_age ( lst ) )
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B1.h'}","def sort_age ( lst ) :
    if ( len ( lst ) == 1 ) :
        return lst
    else :
        for count in range ( len ( lst ) ) :
            temp = lst [ count ] [ 1 ]
            for i in range ( ( count + 1 ) , len ( lst ) ) :
                if ( lst [ i ] [ 1 ] > temp ) :
                    temp = lst [ i ] [ 1 ]
                    ( lst [ count ] , lst [ i ] ) = ( lst [ i ] , lst [ count ] )
        return lst
    pass


",N/A,8.620,0.471,0.000,0.002,0.057,0.442,0.774,10.983,6,6,0.822
question_4,0,0,wrong_4_225.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = [ ]
    for i in lst :
        if ( i [ 1 ] > lst [ 0 ] [ 1 ] ) :
            a . append ( i )
        continue
    return a


","def sort_age ( lst ) :
    a = [ ]
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in lst :
            pass
            if ( i [ 1 ] > lst [ 0 ] [ 1 ] ) :
                pass
            else :
                return lst
            a . append ( i )
        continue
    return a
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = len ( lst )
    for i in range ( a ) :
        for j in range ( ( i + 1 ) , a ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
            else :
                continue
    return lst


",N/A,8.117,0.298,0.000,0.001,0.051,0.181,0.178,9.007,6,6,1.688
question_4,0,0,wrong_4_183.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    print ( lst )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    print ( lst )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.132,0.195,0.000,0.001,0.068,0.110,0.110,8.729,6,6,3.091
question_4,0,0,wrong_4_017.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for tmp in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( tmp + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ tmp ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                i = lst [ tmp ]
                lst [ tmp ] = lst [ j ]
                lst [ j ] = i
            pass
        pass
    return lst


",N/A,8.109,0.190,0.000,0.003,0.060,0.769,0.093,9.331,6,6,3.250
question_4,0,0,wrong_4_086.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            return lst
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.157,0.192,0.000,0.002,0.051,0.615,0.008,9.152,6,6,3.850
question_4,0,0,wrong_4_154.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        small = lst [ 0 ] [ 1 ]
        name = lst [ 0 ] [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] > small ) :
                small = ele [ 1 ]
                name = ele [ 0 ]
        new . append ( ( name , small ) )
        lst . remove ( ( name , small ) )
    return new . reverse


","def sort_age ( lst ) :
    new = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        small = lst [ 0 ] [ 1 ]
        name = lst [ 0 ] [ 0 ]
        for ele in lst :
            pass
            if ( ele [ 1 ] > small ) :
                small = ele [ 1 ]
                name = ele [ 0 ]
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    return lst
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    elif False :
        new . append ( ( name , small ) )
        lst . remove ( ( name , small ) )
    return new . reverse
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    elif False:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.j'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        max_age = lst [ 0 ] [ 1 ]
        person = lst [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] > max_age ) :
                max_age = ele [ 1 ]
                person = ele
        new . append ( person )
        lst . remove ( person )
    return new


",N/A,8.128,0.557,0.000,0.002,0.104,0.675,0.323,10.321,6,6,1.015
question_4,0,0,wrong_4_356.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        maximum = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > maximum ) :
                maximum = i [ 1 ]
        newlst . append ( i )
        lst . remove ( i )
    return newlst


","def sort_age ( lst ) :
    newlst = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        maximum = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] > maximum ) :
                maximum = i [ 1 ]
            pass
        newlst . append ( i )
        lst . remove ( i )
    return newlst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        maximum = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > maximum [ 1 ] ) :
                maximum = i
        newlst . append ( maximum )
        lst . remove ( maximum )
    return newlst


",N/A,8.121,0.409,0.000,0.002,0.042,0.287,0.138,9.328,6,6,1.298
question_4,0,0,wrong_4_134.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( lst == [ ] ) :
        return new
    new = [ ]
    small = lst [ 0 ] [ 1 ]
    for i in range ( 1 , len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < small ) :
            small = lst [ i ] [ 1 ]
    new . append ( small )
    lst . remove ( small )
    sort_age ( lst )


","def sort_age ( lst ) :
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        if ( lst == [ ] ) :
            return new
        new = [ ]
        small = lst [ 0 ] [ 1 ]
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < small ) :
                pass
                if False :
                    pass
                return lst
            small = lst [ i ] [ 1 ]
        pass
    new . append ( small )
    lst . remove ( small )
    sort_age ( lst )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if False:
            pass
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if False:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B1.g'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        small = lst [ 0 ] [ 1 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > small ) :
                small = lst [ i ] [ 1 ]
        for person in lst :
            if ( person [ 1 ] == small ) :
                new . append ( person )
                lst . remove ( person )
                break
    return new


",N/A,8.254,0.042,0.000,0.002,0.045,0.375,0.375,9.518,6,6,1.015
question_4,0,0,wrong_4_143.py,success_w_gpt_only,N/A,0,N/A,N/A,N/A,N/A,N/A,"def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,N/A,N/A,N/A,N/A,N/A,N/A,0.944,8.761,N/A,N/A,N/A
question_4,0,0,wrong_4_129.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    people = [ ]
    while lst :
        i = lst [ 0 ]
        for a in lst :
            if ( a [ 1 ] >= i [ 1 ] ) :
                i = a
        lst . remove ( i )
        final . append ( i )
    return final


","def sort_age ( lst ) :
    people = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        i = lst [ 0 ]
        for a in lst :
            pass
            if ( a [ 1 ] >= i [ 1 ] ) :
                i = a
            pass
        lst . remove ( i )
        final . append ( i )
    return final
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    final = [ ]
    while lst :
        i = lst [ 0 ]
        for a in lst :
            if ( a [ 1 ] >= i [ 1 ] ) :
                i = a
        lst . remove ( i )
        final . append ( i )
    return final


",N/A,8.184,0.396,0.000,0.001,0.041,0.330,0.128,9.372,6,6,1.364
question_4,0,0,wrong_4_251.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > biggest [ 1 ] ) :
                biggest = lst [ i ] [ 1 ]
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > biggest [ 1 ] ) :
                pass
            else :
                biggest = lst [ i ] [ 1 ]
            pass
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > biggest [ 1 ] ) :
                biggest = lst [ i ]
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1


",N/A,8.107,0.489,0.000,0.001,0.065,0.177,0.313,9.575,6,6,0.897
question_4,0,0,wrong_4_287.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.107,0.186,0.000,0.002,0.047,0.023,0.009,8.387,6,6,4.000
question_4,0,0,wrong_4_066.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    rslt = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in a :
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        rslt . append ( smallest )
    return rslt


","def sort_age ( lst ) :
    rslt = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for element in a :
            pass
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
            pass
        lst . remove ( smallest )
        rslt . append ( smallest )
    return rslt
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    rslt = lst . copy ( )
    for i in range ( len ( rslt ) ) :
        smallest = i
        for j in range ( ( i + 1 ) , len ( rslt ) ) :
            if ( rslt [ j ] [ 1 ] > rslt [ smallest ] [ 1 ] ) :
                smallest = j
        ( rslt [ i ] , rslt [ smallest ] ) = ( rslt [ smallest ] , rslt [ i ] )
    return rslt


",N/A,8.156,0.402,0.000,0.001,0.040,0.312,0.255,9.468,6,6,1.409
question_4,0,0,wrong_4_031.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) == 0 ) :
        return [ ]
    elif ( len ( lst ) == 1 ) :
        return lst
    else :
        mid = ( len ( lst ) // 2 )
        lst1 = sort_age ( lst [ : mid ] )
        lst2 = sort_age ( lst [ mid : ] )
        result = [ ]
        while ( lst1 and lst2 ) :
            if ( lst1 [ 0 ] [ 1 ] < lst2 [ 0 ] [ 1 ] ) :
                result . append ( lst2 . pop ( ) )
            else :
                result . append ( lst1 . pop ( ) )
        result . extend ( lst1 )
        result . extend ( lst2 )
        return result


","def sort_age ( lst ) :
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return [ ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                mid = ( len ( lst ) // 2 )
                lst1 = sort_age ( lst [ : mid ] )
                lst2 = sort_age ( lst [ mid : ] )
                result = [ ]
                if False :
                    pass
                result . append ( lst2 . pop ( ) )
            else :
                result . append ( lst1 . pop ( ) )
            pass
        result . extend ( lst1 )
        result . extend ( lst2 )
        return result
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if False:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.l,B1.g'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,9.730,0.631,0.000,0.002,0.052,0.085,0.930,12.417,6,6,0.887
question_4,0,0,wrong_4_215.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                return lst
                if True :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.055,0.209,0.000,0.002,0.049,0.122,0.216,8.758,6,6,2.955
question_4,0,0,wrong_4_320.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,8.127,0.187,0.000,0.001,0.050,0.116,0.009,8.598,6,6,3.250
question_4,0,0,wrong_4_034.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        smallest = a [ 0 ]
        for element in a :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
        a . remove ( smallest )
        sort . append ( smallest )
        sort . reverse ( )
    return sort


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = a [ 0 ]
        for element in a :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                pass
                if True :
                    pass
                pass
            else :
                smallest = element
            pass
        a . remove ( smallest )
        sort . append ( smallest )
        sort . reverse ( )
    return sort
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        smallest = a [ 0 ]
        for element in a :
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
        a . remove ( smallest )
        sort . append ( smallest )
    return sort


",N/A,8.143,0.443,0.000,0.001,0.296,0.176,0.176,9.573,6,6,1.294
question_4,0,0,wrong_4_205.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) == 1 ) :
        return lst
    else :
        used_lst = lst . copy ( )
        ages = ( )
        for i in lst :
            ages += ( i [ 1 ] , )
        for i in lst :
            if ( i [ 1 ] == max ( ages ) ) :
                new_lst = [ i ]
                used_lst . remove ( i )
        return ( new_lst + sort_age ( used_lst ) )


","def sort_age ( lst ) :
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        if False :
            pass
        used_lst = lst . copy ( )
        ages = ( )
        if True :
            ages += ( i [ 1 ] , )
        pass
        for i in lst :
            pass
            if ( i [ 1 ] == max ( ages ) ) :
                new_lst = [ i ]
                used_lst . remove ( i )
            pass
        return ( new_lst + sort_age ( used_lst ) )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if False:
            pass
        if True:
            pass
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B1.g'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,9.643,0.187,0.000,0.001,0.047,0.494,0.420,11.279,6,6,1.148
question_4,0,0,wrong_4_258.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    res = [ ]
    age_list = [ ]
    while lst :
        for i in range ( len ( lst ) ) :
            age_list = ( age_list + [ lst [ i ] [ 1 ] ] )
        for i in lst :
            if ( max ( age_list ) == i [ 1 ] ) :
                res = ( res + [ i ] )
            else :
                res = res
        lst . remove ( i )
        age_list . remove ( i [ 1 ] )
    return res


","def sort_age ( lst ) :
    res = [ ]
    age_list = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( len ( lst ) ) :
            age_list = ( age_list + [ lst [ i ] [ 1 ] ] )
            if True :
                pass
                if True :
                    pass
                    if ( max ( age_list ) == i [ 1 ] ) :
                        res = ( res + [ i ] )
                    pass
                res = res
            pass
        lst . remove ( i )
        age_list . remove ( i [ 1 ] )
    return res
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    lst[i] = lst[j]
                    if True:
                        lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B1.f'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,9.246,1.914,0.000,0.002,0.060,0.412,0.501,12.746,6,6,0.986
question_4,0,0,wrong_4_113.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    out = [ lst [ 0 ] ]
    for ele in lst [ 1 : ] :
        for indx in range ( len ( out ) ) :
            if ( out [ indx ] < ele ) :
                out . insert ( indx , ele )
                break
            elif ( indx == ( len ( out ) - 1 ) ) :
                out . append ( ele )
    return out


","def sort_age ( lst ) :
    out = [ lst [ 0 ] ]
    for ele in lst [ 1 : ] :
        for indx in range ( len ( out ) ) :
            if ( out [ indx ] < ele ) :
                out . insert ( indx , ele )
                break
            elif ( indx == ( len ( out ) - 1 ) ) :
                out . append ( ele )
    return out


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.j'},"def sort_age ( lst ) :
    for indx in range ( len ( lst ) ) :
        for j in range ( ( indx + 1 ) , len ( lst ) ) :
            if ( lst [ indx ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ indx ] , lst [ j ] ) = ( lst [ j ] , lst [ indx ] )
    return lst


",N/A,0.075,0.037,0.000,0.000,0.061,0.474,0.402,1.491,6,6,1.161
question_4,0,0,wrong_4_204.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    agelist = [ lst [ 0 ] ]
    for i in range ( 1 , len ( lst ) ) :
        if ( lst [ i ] [ 1 ] > agelist [ 0 ] [ 1 ] ) :
            agelist . insert ( 0 , lst [ i ] )
        elif ( lst [ i ] [ 1 ] < agelist [ ( len ( agelist ) - 1 ) ] [ 1 ] ) :
            agelist . insert ( len ( agelist ) , lst [ i ] )
        else :
            for x in range ( 0 , len ( agelist ) ) :
                if ( agelist [ x ] [ 1 ] > lst [ i ] [ 1 ] > agelist [ ( x + 1 ) ] [ 1 ] ) :
                    agelist . insert ( ( x + 1 ) , lst [ i ] )
                break
    return agelist


","def sort_age ( lst ) :
    agelist = [ lst [ 0 ] ]
    if ( len ( range ( 0 , ( len ( lst ) - 1 ) ) ) > 0 ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            agelist . insert ( 0 , lst [ i ] )
            if False :
                agelist . insert ( len ( agelist ) , lst [ i ] )
            pass
            for x in range ( 0 , len ( agelist ) ) :
                pass
                if ( agelist [ x ] [ 1 ] > lst [ i ] [ 1 ] > agelist [ ( x + 1 ) ] [ 1 ] ) :
                    agelist . insert ( ( x + 1 ) , lst [ i ] )
                break
            pass
        pass
    return agelist
","

def sort_age(lst):
    if (len(range(0, (len(lst) - 1))) > 0):
        for i in range(0, (len(lst) - 1)):
            if False:
                pass
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,C1.n'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,10.571,0.530,0.000,0.002,0.075,0.397,1.482,15.208,6,6,0.806
question_4,0,0,wrong_4_271.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) < 2 ) :
        return lst
    midpoint = ( len ( lst ) // 2 )
    left = sort_age ( lst [ : midpoint ] )
    right = sort_age ( lst [ midpoint : ] )
    new_list = [ ]
    while ( left and right ) :
        if ( left [ 0 ] [ 1 ] < right [ 0 ] [ 1 ] ) :
            new_list . append ( right . pop ( 0 ) )
        else :
            new_list . append ( left . pop ( 0 ) )
        new_list . extend ( left )
        new_list . extend ( right )
        return new_list


","def sort_age ( lst ) :
    pass
    if ( len ( lst ) < 2 ) :
        return lst
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            midpoint = ( len ( lst ) // 2 )
            left = sort_age ( lst [ : midpoint ] )
            right = sort_age ( lst [ midpoint : ] )
            new_list = [ ]
            for j in range ( ( i + 1 ) , len ( lst ) ) :
                pass
                if ( left [ 0 ] [ 1 ] < right [ 0 ] [ 1 ] ) :
                    pass
                elif True :
                    new_list . append ( right . pop ( 0 ) )
                pass
            new_list . append ( left . pop ( 0 ) )
        new_list . extend ( left )
        new_list . extend ( right )
        return new_list
    pass
","

def sort_age(lst):
    if True:
        for i in range(0, (len(lst) - 1)):
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                elif True:
                    pass
        return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.k,B1.f'}","def sort_age ( lst ) :
    if ( len ( lst ) < 2 ) :
        return lst
    midpoint = ( len ( lst ) // 2 )
    left = sort_age ( lst [ : midpoint ] )
    right = sort_age ( lst [ midpoint : ] )
    new_list = [ ]
    while ( left and right ) :
        if ( left [ 0 ] [ 1 ] < right [ 0 ] [ 1 ] ) :
            new_list . append ( right . pop ( 0 ) )
        else :
            new_list . append ( left . pop ( 0 ) )
    new_list . extend ( left )
    new_list . extend ( right )
    return new_list


",N/A,7.513,0.246,0.000,0.002,0.049,0.380,0.534,9.482,6,6,0.911
question_4,0,0,wrong_4_032.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        smallest = a [ 0 ]
        for element in a :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
    a . remove ( smallest )
    sort . append ( smallest )
    return sort


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    if True :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = a [ 0 ]
        for element in a :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
            pass
        pass
    a . remove ( smallest )
    sort . append ( smallest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        smallest = a [ 0 ]
        for element in a :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
        a . remove ( smallest )
        sort . append ( smallest )
    return sort [ : : ( - 1 ) ]


",N/A,8.032,0.420,0.000,0.001,0.043,0.512,0.142,9.447,6,6,1.426
question_4,0,0,wrong_4_309.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    for i in range ( len ( ( lst - 1 ) ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( len ( ( lst - 1 ) ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.l'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] , lst [ ( j + 1 ) ] ) = ( lst [ ( j + 1 ) ] , lst [ j ] )
            else :
                continue
    return lst
    pass


",N/A,0.074,0.001,0.000,0.000,0.046,0.197,0.009,0.340,6,6,0.523
question_4,0,0,wrong_4_016.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element > biggest ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        pass
    else :
        pass
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for element in lst :
            pass
            if ( element > biggest ) :
                biggest = element
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.071,0.350,0.000,0.001,0.041,0.267,0.009,8.954,6,6,1.737
question_4,0,0,wrong_4_079.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst = lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst = lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,8.191,0.207,0.000,0.002,0.051,0.717,0.034,9.363,6,6,3.714
question_4,0,0,wrong_4_308.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    for j in range ( ( len ( lst ) - 1 ) ) :
        for i in range ( ( ( len ( lst ) - 1 ) - j ) ) :
            if ( lst [ i ] [ 1 ] > lst [ ( i + 1 ) ] [ 1 ] ) :
                ( lst [ i ] , lst [ ( i + 1 ) ] ) = ( lst [ ( i + 1 ) ] , lst [ i ] )
    return lst


","def sort_age ( lst ) :
    for j in range ( ( len ( lst ) - 1 ) ) :
        for i in range ( ( ( len ( lst ) - 1 ) - j ) ) :
            if ( lst [ i ] [ 1 ] > lst [ ( i + 1 ) ] [ 1 ] ) :
                ( lst [ i ] , lst [ ( i + 1 ) ] ) = ( lst [ ( i + 1 ) ] , lst [ i ] )
    return lst


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    for j in range ( ( len ( lst ) - 1 ) ) :
        for i in range ( ( j + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] < lst [ i ] [ 1 ] ) :
                ( lst [ j ] , lst [ i ] ) = ( lst [ i ] , lst [ j ] )
    return lst


",N/A,0.001,0.021,0.000,0.000,0.048,0.204,0.669,1.623,6,6,0.459
question_4,0,0,wrong_4_270.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) < 2 ) :
        return lst
    midpoint = ( len ( lst ) // 2 )
    left = sort_age ( lst [ : midpoint ] )
    right = sort_age ( lst [ midpoint : ] )
    new_list = [ ]
    while ( left and right ) :
        if ( left [ 0 ] [ 1 ] < right [ 0 ] [ 1 ] ) :
            new_list . append ( right . pop ( 0 ) )
        else :
            new_list . append ( left . pop ( 0 ) )
        new_list . extend ( left )
        new_list . extend ( right )
        return new_list


","def sort_age ( lst ) :
    pass
    if ( len ( lst ) < 2 ) :
        return lst
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            midpoint = ( len ( lst ) // 2 )
            left = sort_age ( lst [ : midpoint ] )
            right = sort_age ( lst [ midpoint : ] )
            new_list = [ ]
            for j in range ( ( i + 1 ) , len ( lst ) ) :
                pass
                if ( left [ 0 ] [ 1 ] < right [ 0 ] [ 1 ] ) :
                    pass
                elif True :
                    new_list . append ( right . pop ( 0 ) )
                pass
            new_list . append ( left . pop ( 0 ) )
        new_list . extend ( left )
        new_list . extend ( right )
        return new_list
    pass
","

def sort_age(lst):
    if True:
        for i in range(0, (len(lst) - 1)):
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                elif True:
                    pass
        return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.k,B1.f'}","def sort_age ( lst ) :
    if ( len ( lst ) < 2 ) :
        return lst
    midpoint = ( len ( lst ) // 2 )
    left = sort_age ( lst [ : midpoint ] )
    right = sort_age ( lst [ midpoint : ] )
    new_list = [ ]
    while ( left and right ) :
        if ( left [ 0 ] [ 1 ] < right [ 0 ] [ 1 ] ) :
            new_list . append ( right . pop ( 0 ) )
        else :
            new_list . append ( left . pop ( 0 ) )
    new_list . extend ( left )
    new_list . extend ( right )
    return new_list


",N/A,7.534,0.217,0.000,0.002,0.048,0.430,0.010,8.999,6,6,0.911
question_4,0,0,wrong_4_128.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    people = [ ]
    while lst :
        i = lst [ 0 ]
        for a in lst :
            if ( i [ 1 ] <= a [ 1 ] ) :
                i = a
        lst . remove ( i )
        final . append ( i )
    return final


","def sort_age ( lst ) :
    people = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        i = lst [ 0 ]
        for a in lst :
            pass
            if ( i [ 1 ] <= a [ 1 ] ) :
                i = a
            pass
        lst . remove ( i )
        final . append ( i )
    return final
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    final = [ ]
    while lst :
        i = lst [ 0 ]
        for a in lst :
            if ( i [ 1 ] <= a [ 1 ] ) :
                i = a
        lst . remove ( i )
        final . append ( i )
    return final


",N/A,8.037,0.393,0.000,0.001,0.063,0.344,0.126,9.260,6,6,1.318
question_4,0,0,wrong_4_145.py,success_w_gpt_only,N/A,0,N/A,N/A,N/A,N/A,N/A,"def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,N/A,N/A,N/A,N/A,N/A,N/A,0.979,8.925,N/A,N/A,N/A
question_4,0,0,wrong_4_035.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,8.169,0.185,0.000,0.002,0.051,0.016,0.093,8.623,6,6,3.200
question_4,0,0,wrong_4_108.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    return lst
                else :
                    return lst
                pass
            pass
        return lst
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.149,0.185,0.000,0.002,0.047,0.124,0.087,8.721,6,6,3.900
question_4,0,0,wrong_4_165.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . removal ( largest )
        sort . append ( a )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
            pass
        lst . removal ( largest )
        sort . append ( a )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.127,0.393,0.000,0.001,0.041,0.328,0.132,9.317,6,6,1.341
question_4,0,0,wrong_4_203.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while ( len ( lst ) > 0 ) :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest [ 1 ] = i [ 1 ]
        lst . remove ( smallest )
        sort . append ( smallest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < smallest [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                return lst
            elif False :
                smallest [ 1 ] = i [ 1 ]
            pass
        lst . remove ( smallest )
        sort . append ( smallest )
    return sort
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                if True:
                    pass
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.h'}","def sort_age ( lst ) :
    sort = [ ]
    while ( len ( lst ) > 0 ) :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.142,0.460,0.000,0.001,0.066,0.262,0.216,9.671,6,6,1.309
question_4,0,0,wrong_4_178.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,8.153,0.187,0.000,0.002,0.048,0.015,0.017,8.435,6,6,3.250
question_4,0,0,wrong_4_286.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        return lst
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
    return lst


",N/A,8.193,0.181,0.000,0.002,0.049,0.024,0.118,8.694,6,6,4.500
question_4,0,0,wrong_4_098.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        while ( lst [ i ] [ 1 ] > lst [ ( i + 1 ) ] [ 1 ] ) :
            temp = lst [ i ]
            del lst [ i ]
            lst += [ temp ]
    return lst


","def sort_age ( lst ) :
    pass
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            temp = lst [ i ]
            del lst [ i ]
            lst += [ temp ]
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
            pass
        pass
    return lst
    if False :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                temp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = temp
    return lst


",N/A,8.150,0.410,0.000,0.002,0.110,0.016,0.393,9.507,6,6,0.736
question_4,0,0,wrong_4_322.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            return lst
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            pass
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.137,0.193,0.000,0.002,0.050,0.018,0.178,8.719,6,6,3.150
question_4,0,0,wrong_4_126.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( biggest )
        sort . append ( biggest )
        return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
            pass
        pass
    return lst
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        lst . remove ( biggest )
        sort . append ( biggest )
        return sort
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.174,0.393,0.000,0.001,0.121,0.283,0.127,9.396,6,6,1.409
question_4,0,0,wrong_4_321.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    newlst = [ ]
    for i in lst :
        big = lst [ 0 ]
        for n in lst :
            if ( n [ 1 ] > big [ 1 ] ) :
                big = n
        lst . remove ( big )
        newlst . append ( big )
    return newlst


","def sort_age ( lst ) :
    newlst = [ ]
    for i in lst :
        big = lst [ 0 ]
        for n in lst :
            if ( n [ 1 ] > big [ 1 ] ) :
                big = n
        lst . remove ( big )
        newlst . append ( big )
    return newlst


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    newlst = lst . copy ( )
    for i in range ( len ( newlst ) ) :
        big = newlst [ i ]
        for n in range ( i , len ( newlst ) ) :
            if ( newlst [ n ] [ 1 ] > big [ 1 ] ) :
                big = newlst [ n ]
        newlst . remove ( big )
        newlst . insert ( i , big )
    return newlst


",N/A,0.001,0.014,0.000,0.000,0.083,0.243,0.225,0.846,6,6,1.244
question_4,0,0,wrong_4_026.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element > biggest ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for element in lst :
            pass
            if ( element > biggest ) :
                biggest = element
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.181,0.346,0.000,0.001,0.044,0.368,0.009,8.964,6,6,1.763
question_4,0,0,wrong_4_061.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                return lst
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
        pass
    return lst


",N/A,8.213,0.185,0.000,0.002,0.049,0.825,0.091,9.491,6,6,3.900
question_4,0,0,wrong_4_148.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    i = 0
    while ( ( i + 1 ) < len ( lst ) ) :
        if ( i [ 1 ] < ( i + 1 [ 1 ] ) ) :
            lst . pop ( i )
            lst . extend ( i )
        else :
            i += 1
    return lst


","def sort_age ( lst ) :
    i = 0
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( i [ 1 ] < ( i + 1 [ 1 ] ) ) :
                    lst . pop ( i )
                    lst . extend ( i )
                else :
                    pass
                pass
            i += 1
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    i = 0
    while ( i < len ( lst ) ) :
        if ( ( ( i + 1 ) < len ( lst ) ) and ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) ) :
            ( lst [ i ] , lst [ ( i + 1 ) ] ) = ( lst [ ( i + 1 ) ] , lst [ i ] )
            i = 0
        else :
            i += 1
    return lst


",N/A,7.391,0.076,0.000,0.002,0.047,0.487,0.340,8.686,6,6,1.106
question_4,0,0,wrong_4_168.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sortt = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sortt . append ( largest )
    return sort


","def sort_age ( lst ) :
    sortt = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
            pass
        lst . remove ( largest )
        sortt . append ( largest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sortt = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sortt . append ( largest )
    return sortt


",N/A,8.181,0.395,0.000,0.002,0.041,0.364,0.136,9.422,6,6,1.341
question_4,0,0,wrong_4_288.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = a [ 0 ]
        for element in a :
            if ( element > smallest ) :
                largest = element
        lst . remove ( largest )
        sort . append ( largest )
    print ( lst )


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = a [ 0 ]
        for element in a :
            pass
            if ( element > smallest ) :
                largest = element
            else :
                pass
            pass
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        lst . remove ( largest )
        sort . append ( largest )
    print ( lst )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    if False:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > largest [ 1 ] ) :
                largest = element
        lst . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.185,0.374,0.000,0.001,0.049,0.355,0.116,9.344,6,6,1.775
question_4,0,0,wrong_4_329.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                ( biggesr - k )
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > biggest [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            else :
                ( biggesr - k )
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.198,0.387,0.000,0.002,0.060,0.878,0.009,9.855,6,6,1.435
question_4,0,0,wrong_4_110.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        largest = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
        tpl = ( )
        for j in lst :
            if ( j [ 1 ] == largest ) :
                j = tpl
        lst . remove ( tpl )
        new . append ( tpl )
    return new


","def sort_age ( lst ) :
    new = [ ]
    if True :
        largest = lst [ 0 ] [ 1 ]
    elif False :
        pass
    largest = i [ 1 ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        tpl = ( )
        for j in lst :
            pass
            if ( j [ 1 ] == largest ) :
                j = tpl
            pass
        lst . remove ( tpl )
        new . append ( tpl )
    return new
","

def sort_age(lst):
    if True:
        pass
    elif False:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.j'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        largest = lst [ 0 ] [ 1 ]
        tpl = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
                tpl = i
        lst . remove ( tpl )
        new . append ( tpl )
    return new


",N/A,11.518,0.366,0.000,0.001,0.042,0.301,0.294,13.006,6,6,1.141
question_4,0,0,wrong_4_114.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    out = [ lst [ 0 ] ]
    for ele in lst [ 1 : ] :
        for indx in range ( len ( out ) ) :
            if ( out [ indx ] [ 1 ] < ele [ 1 ] ) :
                out . insert ( indx , ele )
                break
            elif ( indx == ( len ( out ) - 1 ) ) :
                out . append ( ele )
    return out


","def sort_age ( lst ) :
    out = [ lst [ 0 ] ]
    for ele in lst [ 1 : ] :
        for indx in range ( len ( out ) ) :
            if ( out [ indx ] [ 1 ] < ele [ 1 ] ) :
                out . insert ( indx , ele )
                break
            elif ( indx == ( len ( out ) - 1 ) ) :
                out . append ( ele )
    return out


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.j'},"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,0.075,0.037,0.000,0.000,0.059,0.513,0.085,1.284,6,6,0.952
question_4,0,0,wrong_4_312.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.l'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] , lst [ ( j + 1 ) ] ) = ( lst [ ( j + 1 ) ] , lst [ j ] )
            else :
                continue
    return lst
    pass


",N/A,0.038,0.026,0.000,0.000,0.048,0.216,1.043,2.276,6,6,0.489
question_4,0,0,wrong_4_130.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    people = [ ]
    while lst :
        i = lst [ 0 ]
        for a in lst :
            if ( a [ 1 ] >= i [ 1 ] ) :
                i = a
        lst . remove ( i )
        people . append ( i )
    return final


","def sort_age ( lst ) :
    people = [ ]
    if True :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        i = lst [ 0 ]
        for a in lst :
            pass
            if ( a [ 1 ] >= i [ 1 ] ) :
                i = a
            pass
        lst . remove ( i )
        people . append ( i )
    return final
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    people = [ ]
    while lst :
        i = lst [ 0 ]
        for a in lst :
            if ( a [ 1 ] > i [ 1 ] ) :
                i = a
        lst . remove ( i )
        people . append ( i )
    return people


",N/A,8.109,0.394,0.000,0.001,0.041,0.301,0.126,9.267,6,6,1.364
question_4,0,0,wrong_4_052.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        oldest = lst [ 0 ] [ 1 ]
        for person in lst :
            if ( person [ 1 ] > oldest ) :
                oldest = person [ 1 ]
                newlst . append ( person )
                lst . remove ( person )
        newlst . append ( lst [ 0 ] )
        lst . remove ( lst [ 0 ] )
    return newlst


","def sort_age ( lst ) :
    newlst = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ] [ 1 ]
        for person in lst :
            pass
            if ( person [ 1 ] > oldest ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                oldest = person [ 1 ]
                newlst . append ( person )
                lst . remove ( person )
            pass
        newlst . append ( lst [ 0 ] )
        lst . remove ( lst [ 0 ] )
    return newlst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] > oldest [ 1 ] ) :
                oldest = person
        newlst . append ( oldest )
        lst . remove ( oldest )
    return newlst


",N/A,8.192,0.513,0.000,0.002,0.076,0.507,0.230,10.145,6,6,1.190
question_4,0,0,wrong_4_304.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.189,0.218,0.000,0.002,0.052,0.026,0.099,8.772,6,6,3.458
question_4,0,0,wrong_4_002.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person > oldest ) :
                person = oldest
        a . remove ( smallest )
        sort . append ( smallest )
        print ( a )


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for person in lst :
            pass
            if ( person > oldest ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                pass
            else :
                person = oldest
            pass
        a . remove ( smallest )
        sort . append ( smallest )
        print ( a )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] > oldest [ 1 ] ) :
                oldest = person
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.210,0.375,0.000,0.001,0.084,0.131,0.112,9.265,6,6,2.050
question_4,0,0,wrong_4_357.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        maximum = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > maximum ) :
                maximum = i [ 1 ]
                newlst . append ( i )
                lst . remove ( i )
    return newlst


","def sort_age ( lst ) :
    newlst = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        maximum = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] > maximum ) :
                maximum = i [ 1 ]
                newlst . append ( i )
                lst . remove ( i )
            pass
        pass
    return newlst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        maximum = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > maximum [ 1 ] ) :
                maximum = i
        newlst . append ( maximum )
        lst . remove ( maximum )
    return newlst


",N/A,8.162,0.409,0.000,0.001,0.106,1.904,0.190,11.131,6,6,1.234
question_4,0,0,wrong_4_167.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sortt = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sortt . append ( largest )
    return sort


","def sort_age ( lst ) :
    sortt = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
            pass
        lst . remove ( largest )
        sortt . append ( largest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sortt = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sortt . append ( largest )
    return sortt


",N/A,8.202,0.375,0.000,0.002,0.042,0.315,0.009,8.960,6,6,1.341
question_4,0,0,wrong_4_302.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( len ( lst ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( len ( lst ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.l'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - i ) - 1 ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] , lst [ ( j + 1 ) ] ) = ( lst [ ( j + 1 ) ] , lst [ j ] )
            else :
                continue
    return lst
    pass


",N/A,0.075,0.025,0.000,0.000,0.048,0.213,1.032,2.204,6,6,0.494
question_4,0,0,wrong_4_257.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = list ( set ( lst ) )
    lst . clear ( )
    lst . append ( a )
    return lst


","def sort_age ( lst ) :
    a = list ( set ( lst ) )
    lst . clear ( )
    lst . append ( a )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if True :
                return lst
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.130,0.206,0.000,0.002,0.049,0.130,0.088,8.730,6,6,3.545
question_4,0,0,wrong_4_290.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_list = [ ]
    largest = 0
    while lst :
        for i in lst :
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
                count = i
        new_list = new_list . append ( count )
        lst . remove ( count )
        largest = 0
    return new_list


","def sort_age ( lst ) :
    new_list = [ ]
    largest = 0
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in lst :
            pass
            if ( i [ 1 ] > largest ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            elif False :
                largest = i [ 1 ]
                count = i
            pass
        new_list = new_list . append ( count )
        lst . remove ( count )
        largest = 0
    return new_list
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.h'}","def sort_age ( lst ) :
    new_list = [ ]
    largest = 0
    count = None
    while lst :
        for i in lst :
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
                count = i
        new_list . append ( count )
        lst . remove ( count )
        largest = 0
    return new_list


",N/A,8.235,0.430,0.000,0.002,0.058,0.256,0.188,9.607,6,6,1.604
question_4,0,0,wrong_4_131.py,success_w_gpt_only,N/A,0,N/A,N/A,N/A,N/A,N/A,"def sort ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                temp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = temp
    return lst
def sort_age ( lst ) :
    return sort ( lst )


",N/A,N/A,N/A,N/A,N/A,N/A,N/A,0.528,0.537,N/A,N/A,N/A
question_4,0,0,wrong_4_009.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( 0 , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] < this [ 1 ] ) :
                del lst [ i ]
                lst = ( ( lst [ 0 : j ] + [ this ] ) + lst [ j : ] )
                break
    return lst


","def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( 0 , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] < this [ 1 ] ) :
                del lst [ i ]
                lst = ( ( lst [ 0 : j ] + [ this ] ) + lst [ j : ] )
                break
    return lst


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > this [ 1 ] ) :
                lst [ i ] = lst [ j ]
                lst [ j ] = this
                this = lst [ i ]
    return lst


",N/A,0.001,0.019,0.000,0.000,0.080,1.385,0.537,2.601,6,6,0.545
question_4,0,0,wrong_4_054.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        current = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] < current [ 1 ] ) :
                current = element
        newlst += ( current , )
        lst . remove ( current )
    return newlst


","def sort_age ( lst ) :
    newlst = [ ]
    if True :
        pass
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        current = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] < current [ 1 ] ) :
                current = element
            pass
        newlst += ( current , )
        lst . remove ( current )
    return newlst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    newlst = lst [ : ]
    for i in range ( ( len ( newlst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( newlst ) ) :
            if ( newlst [ i ] [ 1 ] < newlst [ j ] [ 1 ] ) :
                ( newlst [ i ] , newlst [ j ] ) = ( newlst [ j ] , newlst [ i ] )
    return newlst


",N/A,8.231,0.393,0.000,0.002,0.043,0.324,0.285,9.581,6,6,1.318
question_4,0,0,wrong_4_003.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] > oldest [ 1 ] ) :
                person = oldest
        a . remove ( oldest )
        sort . append ( oldest )
        print ( sort )


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for person in lst :
            pass
            if ( person [ 1 ] > oldest [ 1 ] ) :
                pass
                if True :
                    pass
                return lst
            else :
                person = oldest
            pass
        a . remove ( oldest )
        sort . append ( oldest )
        print ( sort )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] > oldest [ 1 ] ) :
                oldest = person
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.259,0.410,0.000,0.001,0.087,0.221,0.134,9.444,6,6,1.457
question_4,0,0,wrong_4_169.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sorted_lst = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
        lst . remove ( smallest )
        sorted_lst . append ( smallest )
    return sorted_lst


","def sort_age ( lst ) :
    sorted_lst = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
            pass
        lst . remove ( smallest )
        sorted_lst . append ( smallest )
    return sorted_lst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.247,0.398,0.000,0.001,0.043,0.456,0.268,9.714,6,6,1.318
question_4,0,0,wrong_4_004.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] > oldest [ 1 ] ) :
                person = oldest
        a . remove ( oldest )
        sort . append ( oldest )
        print ( lst )


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for person in lst :
            pass
            if ( person [ 1 ] > oldest [ 1 ] ) :
                pass
                if True :
                    return lst
                return lst
            else :
                person = oldest
            pass
        a . remove ( oldest )
        sort . append ( oldest )
        print ( lst )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] > oldest [ 1 ] ) :
                oldest = person
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.237,0.404,0.000,0.001,0.085,0.205,0.134,9.394,6,6,1.457
question_4,0,0,wrong_4_137.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) == 1 ) :
        return lst
    else :
        new_list = [ ]
        while lst :
            minimum = lst [ 0 ]
            for i in lst :
                if ( i [ 1 ] < minimum [ 1 ] ) :
                    minimum = x
            new_list . append ( minimum )
            lst . remove ( minimum )
        return new_list


","def sort_age ( lst ) :
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        if True :
            pass
        new_list = [ ]
        if True :
            minimum = lst [ 0 ]
            for i in lst :
                pass
                if ( i [ 1 ] < minimum [ 1 ] ) :
                    minimum = x
                pass
            new_list . append ( minimum )
            lst . remove ( minimum )
        return new_list
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if False:
            pass
        if True:
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B1.g'}","def sort_age ( lst ) :
    if ( len ( lst ) == 1 ) :
        return lst
    else :
        new_list = [ ]
        while lst :
            maximum = lst [ 0 ]
            for i in lst :
                if ( i [ 1 ] > maximum [ 1 ] ) :
                    maximum = i
            new_list . append ( maximum )
            lst . remove ( maximum )
        return new_list


",N/A,9.223,0.316,0.000,0.001,0.044,0.244,0.289,10.612,6,6,1.170
question_4,0,0,wrong_4_265.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for a in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ a ] [ 1 ] ) :
                lst [ i ] = lst [ a ]
                lst [ a ] = lst [ i ]
    return lst


","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for a in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ a ] [ 1 ] ) :
                lst [ i ] = lst [ a ]
                lst [ a ] = lst [ i ]
    return lst


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for a in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ a ] [ 1 ] ) :
                temp = lst [ i ]
                lst [ i ] = lst [ a ]
                lst [ a ] = temp
    return lst


",N/A,0.001,0.017,0.000,0.000,0.050,0.545,0.492,1.633,6,6,0.161
question_4,0,0,wrong_4_278.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        if ( lst [ ( i + 1 ) ] [ 1 ] < lst [ i ] [ 1 ] ) :
            x = lst [ i ]
            lst [ i ] = lst [ ( i + 1 ) ]
            lst [ ( i + 1 ) ] = x
    return lst


","def sort_age ( lst ) :
    pass
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ( i + 1 ) ] [ 1 ] < lst [ i ] [ 1 ] ) :
                lst [ j ] = tmp
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                pass
            elif False :
                pass
            x = lst [ i ]
            lst [ i ] = lst [ ( i + 1 ) ]
            lst [ ( i + 1 ) ] = x
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                if True:
                    pass
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.h'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                x = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = x
    return lst


",N/A,8.151,0.470,0.000,0.002,0.054,0.399,0.449,10.078,6,6,0.571
question_4,0,0,wrong_4_283.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.l'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] , lst [ ( j + 1 ) ] ) = ( lst [ ( j + 1 ) ] , lst [ j ] )
            else :
                continue
    return lst
    pass


",N/A,0.075,0.001,0.000,0.000,0.048,0.223,0.009,0.369,6,6,0.489
question_4,0,0,wrong_4_255.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        i = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] >= i [ 1 ] ) :
                i = n
        lst . remove ( i )
        final . append ( i )
    return newlst


","def sort_age ( lst ) :
    newlst = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        i = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] >= i [ 1 ] ) :
                i = n
            pass
        lst . remove ( i )
        final . append ( i )
    return newlst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        i = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] >= i [ 1 ] ) :
                i = element
        lst . remove ( i )
        newlst . append ( i )
    return newlst


",N/A,8.137,0.393,0.000,0.001,0.041,0.375,0.127,9.372,6,6,1.386
question_4,0,0,wrong_4_273.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        largest = lst [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] > largest ) :
                largest = ele
        a . remove ( largest )
        new . append ( largest )
    return new


","def sort_age ( lst ) :
    new = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ]
        for ele in lst :
            pass
            if ( ele [ 1 ] > largest ) :
                largest = ele
            pass
        a . remove ( largest )
        new . append ( largest )
    return new
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        largest = lst [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] > largest [ 1 ] ) :
                largest = ele
        lst . remove ( largest )
        new . append ( largest )
    return new


",N/A,8.267,0.382,0.000,0.001,0.041,0.372,0.116,9.454,6,6,1.585
question_4,0,0,wrong_4_210.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.253,0.177,0.000,0.001,0.047,0.125,0.081,8.782,6,6,3.722
question_4,0,0,wrong_4_202.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    decoy = [ ]
    decoy2 = [ ]
    final = [ ]
    for i in lst :
        decoy . append ( i [ 1 ] )
    while ( decoy != [ ] ) :
        decoy2 . append ( min ( decoy ) )
        decoy . remove ( min ( decoy ) )
    for i in decoy2 :
        for j in lst :
            if ( i == j [ 1 ] ) :
                final . append ( j )
    return final


","def sort_age ( lst ) :
    decoy = [ ]
    decoy2 = [ ]
    final = [ ]
    if True :
        pass
        if True :
            decoy2 . append ( min ( decoy ) )
            decoy . remove ( min ( decoy ) )
        pass
        for i in decoy2 :
            pass
            for j in lst :
                pass
                if ( i == j [ 1 ] ) :
                    pass
                final . append ( j )
            pass
        pass
    return final
","

def sort_age(lst):
    if True:
        if True:
            pass
        for i in range(0, (len(lst) - 1)):
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
        return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B1.f'}","def sort_age ( lst ) :
    decoy = [ ]
    decoy2 = [ ]
    final = [ ]
    for i in lst :
        decoy . append ( i [ 1 ] )
    while ( decoy != [ ] ) :
        decoy2 . append ( max ( decoy ) )
        decoy . remove ( max ( decoy ) )
    for i in decoy2 :
        for j in lst :
            if ( i == j [ 1 ] ) :
                final . append ( j )
    return final


",N/A,9.909,0.818,0.000,0.001,0.047,0.129,0.269,11.692,6,6,1.219
question_4,0,0,wrong_4_341.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    l = len ( lst )
    for i in range ( 0 , l ) :
        for j in range ( 0 , ( ( l - i ) - 1 ) ) :
            if ( lst [ j ] [ 1 ] > lst [ ( j + 1 ) ] [ 1 ] ) :
                temp = lst [ j ]
                lst [ j ] = lst [ ( j + 1 ) ]
                lst [ ( j + 1 ) ] = temp
    return list . reverse ( lst )


","def sort_age ( lst ) :
    l = len ( lst )
    for i in range ( 0 , l ) :
        for j in range ( 0 , ( ( l - i ) - 1 ) ) :
            if ( lst [ j ] [ 1 ] > lst [ ( j + 1 ) ] [ 1 ] ) :
                temp = lst [ j ]
                lst [ j ] = lst [ ( j + 1 ) ]
                lst [ ( j + 1 ) ] = temp
    return list . reverse ( lst )


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    l = len ( lst )
    for i in range ( 0 , l ) :
        for j in range ( 0 , ( ( l - i ) - 1 ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                temp = lst [ j ]
                lst [ j ] = lst [ ( j + 1 ) ]
                lst [ ( j + 1 ) ] = temp
    return lst


",N/A,0.001,0.021,0.000,0.000,0.089,1.847,0.798,3.444,6,6,0.468
question_4,0,0,wrong_4_176.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlst = [ ]
    ages = [ ]
    for i in lst :
        ages . append ( i [ 1 ] )
    ages . sort ( )
    for x in ages [ : : ( - 1 ) ] :
        for i in lst :
            if ( i [ 1 ] == x ) :
                newlst . append ( i )
    return newlst


","def sort_age ( lst ) :
    newlst = [ ]
    ages = [ ]
    if False :
        ages . append ( i [ 1 ] )
    ages . sort ( )
    for x in ages [ : : ( - 1 ) ] :
        pass
        if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
            pass
        pass
        for i in lst :
            pass
            if ( i [ 1 ] == x ) :
                newlst . append ( i )
            pass
        pass
    return newlst
","

def sort_age(lst):
    if False:
        pass
    for i in range(0, (len(lst) - 1)):
        if False:
            pass
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B1.g'}","def sort_age ( lst ) :
    newlst = [ ]
    ages = [ ]
    for i in lst :
        ages . append ( i [ 1 ] )
    ages . sort ( )
    for x in ages [ : : ( - 1 ) ] :
        for i in lst :
            if ( i [ 1 ] == x ) :
                newlst . append ( i )
                lst . remove ( i )
    return newlst


",N/A,9.378,0.054,0.000,0.001,0.047,0.497,0.199,10.512,6,6,1.412
question_4,0,0,wrong_4_195.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        smallest = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] < smallest ) :
                smallest = i [ 1 ]
        lst . remove ( smallest )
        new . append ( smallest )
    return new


","def sort_age ( lst ) :
    new = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] < smallest ) :
                smallest = i [ 1 ]
            pass
        lst . remove ( smallest )
        new . append ( smallest )
    return new
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > smallest [ 1 ] ) :
                smallest = i
        lst . remove ( smallest )
        new . append ( smallest )
    return new


",N/A,8.230,0.415,0.000,0.001,0.061,0.313,0.148,9.496,6,6,1.298
question_4,0,0,wrong_4_339.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( lst == [ ] ) :
        return lst
    else :
        ( age_lst , new_lst ) = ( [ ] , [ ] )
        for x in lst :
            age_lst . append ( x [ 1 ] )
        while age_lst :
            max_age = max ( age_lst )
            for i in lst :
                if ( i [ 1 ] == max_age ) :
                    new_lst . append ( i )
        return new_lst
    pass


","def sort_age ( lst ) :
    pass
    if ( lst == [ ] ) :
        return lst
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            ( age_lst , new_lst ) = ( [ ] , [ ] )
            for x in lst :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    max_age = max ( age_lst )
                    if True :
                        pass
                    new_lst . append ( i )
                pass
            pass
        return new_lst
    pass
","

def sort_age(lst):
    if True:
        for i in range(0, (len(lst) - 1)):
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    if True:
                        pass
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
        return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B1.h'}","def sort_age ( lst ) :
    if ( lst == [ ] ) :
        return lst
    else :
        ( age_lst , new_lst ) = ( [ ] , [ ] )
        for x in lst :
            age_lst . append ( x [ 1 ] )
        while age_lst :
            max_age = max ( age_lst )
            for i in lst :
                if ( i [ 1 ] == max_age ) :
                    new_lst . append ( i )
                    age_lst . remove ( max_age )
        return new_lst
    pass


",N/A,10.664,0.023,0.000,0.001,0.047,0.220,0.315,11.811,6,6,1.273
question_4,0,0,wrong_4_348.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        if ( i [ 1 ] > current ) :
            tup += tuple ( i )
            current = i [ 1 ]
        else :
            tup = ( tuple ( i ) + tup )
    return [ tup ]


","def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( i [ 1 ] > current ) :
                    tup += tuple ( i )
                    current = i [ 1 ]
                else :
                    pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            tup = ( tuple ( i ) + tup )
        pass
    return [ tup ]
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,7.377,0.073,0.000,0.002,0.051,0.624,0.284,8.737,6,6,1.341
question_4,0,0,wrong_4_010.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ 0 ]
        for j in range ( 1 , ( len ( lst ) + 1 ) ) :
            a = ( len ( lst ) - j )
            if ( lst [ a ] [ 1 ] > this [ 1 ] ) :
                lst = ( ( lst [ 1 : ( a + 1 ) ] + [ this ] ) + lst [ ( a + 1 ) : ] )
                break
    return lst


","def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ 0 ]
        for j in range ( 1 , ( len ( lst ) + 1 ) ) :
            a = ( len ( lst ) - j )
            if ( lst [ a ] [ 1 ] > this [ 1 ] ) :
                lst = ( ( lst [ 1 : ( a + 1 ) ] + [ this ] ) + lst [ ( a + 1 ) : ] )
                break
    return lst


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    for i in range ( 0 , len ( lst ) ) :
        this = lst [ i ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > this [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
                this = lst [ i ]
    return lst


",N/A,0.001,0.021,0.000,0.000,0.127,0.415,0.749,2.015,6,6,0.675
question_4,0,0,wrong_4_291.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > biggest ) :
                biggest = i [ 1 ]
        lst . remove ( i )
        sort . append ( i )
    return lst


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] > biggest ) :
                biggest = i [ 1 ]
            pass
        lst . remove ( i )
        sort . append ( i )
    return lst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.175,0.408,0.000,0.002,0.044,0.250,0.139,9.361,6,6,1.277
question_4,0,0,wrong_4_338.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ lst [ 0 ] ]
    if ( lst == [ ] ) :
        return [ ]
    for x in lst [ 1 : ] :
        if ( x [ 1 ] > new_lst [ ( - 1 ) ] [ 1 ] ) :
            new_lst += [ x ]
        else :
            count = 0
            while ( count < len ( new_lst ) ) :
                if ( x [ 1 ] > new_lst [ count ] [ 1 ] ) :
                    count += 1
                    continue
                else :
                    new_lst = ( ( new_lst [ 0 : count ] + [ x ] ) + new_lst [ count : ] )
                    break
    return new_lst [ : : ( - 1 ) ]


","def sort_age ( lst ) :
    new_lst = [ lst [ 0 ] ]
    if ( lst == [ ] ) :
        return [ ]
        for x in lst [ 1 : ] :
            new_lst += [ x ]
            for j in range ( ( i + 1 ) , len ( lst ) ) :
                count = 0
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                    if ( x [ 1 ] > new_lst [ count ] [ 1 ] ) :
                        count += 1
                        continue
                    new_lst = ( ( new_lst [ 0 : count ] + [ x ] ) + new_lst [ count : ] )
                    break
                pass
            pass
        pass
    return new_lst [ : : ( - 1 ) ]
","

def sort_age(lst):
    if True:
        for i in range(0, (len(lst) - 1)):
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    if True:
                        tmp = lst[i]
                        lst[i] = lst[j]
                        lst[j] = tmp
        return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B1.f'}","def sort_age ( lst ) :
    if ( lst == [ ] ) :
        return [ ]
    new_lst = [ lst [ 0 ] ]
    for x in lst [ 1 : ] :
        if ( x [ 1 ] > new_lst [ ( - 1 ) ] [ 1 ] ) :
            new_lst . append ( x )
        else :
            count = 0
            while ( count < len ( new_lst ) ) :
                if ( x [ 1 ] <= new_lst [ count ] [ 1 ] ) :
                    new_lst . insert ( count , x )
                    break
                count += 1
    return new_lst [ : : ( - 1 ) ]


",N/A,16.764,0.442,0.000,0.002,0.045,0.638,1.074,20.180,6,6,0.929
question_4,0,0,wrong_4_099.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        while ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
            temp = lst [ i ]
            del lst [ i ]
            lst += [ temp ]
    return lst


","def sort_age ( lst ) :
    pass
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            temp = lst [ i ]
            del lst [ i ]
            lst += [ temp ]
            if False :
                pass
            pass
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                temp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = temp
    return lst


",N/A,8.154,0.411,0.000,0.001,0.108,0.193,0.422,9.706,6,6,0.736
question_4,0,0,wrong_4_240.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        return lst
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.221,0.196,0.000,0.001,0.048,0.015,0.091,8.685,6,6,3.045
question_4,0,0,wrong_4_217.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.217,0.186,0.000,0.001,0.047,0.122,0.009,8.595,6,6,3.250
question_4,0,0,wrong_4_125.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst1 = [ ]
    while lst :
        smallest = lst [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] < smallest [ 1 ] ) :
                smallest = ele
        lst . remove ( smallest )
        lst1 . append ( smallest )
    return lst1


","def sort_age ( lst ) :
    lst1 = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for ele in lst :
            pass
            if ( ele [ 1 ] < smallest [ 1 ] ) :
                smallest = ele
            pass
        lst . remove ( smallest )
        lst1 . append ( smallest )
    return lst1
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst1 = [ ]
    while lst :
        largest = lst [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] > largest [ 1 ] ) :
                largest = ele
        lst . remove ( largest )
        lst1 . append ( largest )
    return lst1


",N/A,8.198,0.407,0.000,0.001,0.043,0.375,0.146,9.469,6,6,1.364
question_4,0,0,wrong_4_221.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                pass
            return lst
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
        pass
    return lst


",N/A,8.148,0.185,0.000,0.002,0.048,0.022,0.094,8.661,6,6,3.950
question_4,0,0,wrong_4_101.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        while ( lst [ i ] [ 1 ] > lst [ ( i + 1 ) ] [ 1 ] ) :
            temp = lst [ i ]
            del lst [ i ]
            lst += [ temp ]
    lst . reverse ( )
    return lst


","def sort_age ( lst ) :
    pass
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            temp = lst [ i ]
            del lst [ i ]
            lst += [ temp ]
            if False :
                pass
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    lst . reverse ( )
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                temp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = temp
    return lst


",N/A,8.210,0.440,0.000,0.002,0.157,0.241,0.397,9.850,6,6,0.702
question_4,0,0,wrong_4_186.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
    print ( sort )


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = a [ 0 ]
        for item in a :
            pass
            if ( item [ 1 ] > largest [ 1 ] ) :
                pass
            else :
                largest = item
            pass
        a . remove ( largest )
        sort . append ( largest )
    print ( sort )
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = lst . copy ( )
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.249,0.425,0.000,0.002,0.049,0.280,0.148,9.472,6,6,1.388
question_4,0,0,wrong_4_206.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    agelist = [ lst [ 0 ] ]
    for i in range ( 1 , len ( lst ) ) :
        if ( lst [ i ] [ 1 ] > agelist [ 0 ] [ 1 ] ) :
            agelist . insert ( 0 , lst [ i ] )
        elif ( lst [ i ] [ 1 ] < agelist [ ( len ( agelist ) - 1 ) ] [ 1 ] ) :
            agelist . insert ( len ( agelist ) , lst [ i ] )
        else :
            for x in range ( 0 , len ( agelist ) ) :
                if ( agelist [ x ] [ 1 ] > lst [ i ] [ 1 ] > agelist [ ( x + 1 ) ] [ 1 ] ) :
                    agelist . insert ( ( x + 1 ) , lst [ i ] )
                    break
    return agelist


","def sort_age ( lst ) :
    agelist = [ lst [ 0 ] ]
    if ( len ( range ( 0 , ( len ( lst ) - 1 ) ) ) > 0 ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            agelist . insert ( 0 , lst [ i ] )
            if False :
                agelist . insert ( len ( agelist ) , lst [ i ] )
            pass
            for x in range ( 0 , len ( agelist ) ) :
                pass
                if ( agelist [ x ] [ 1 ] > lst [ i ] [ 1 ] > agelist [ ( x + 1 ) ] [ 1 ] ) :
                    agelist . insert ( ( x + 1 ) , lst [ i ] )
                    break
                pass
            pass
        pass
    return agelist
","

def sort_age(lst):
    if (len(range(0, (len(lst) - 1))) > 0):
        for i in range(0, (len(lst) - 1)):
            if False:
                pass
            for j in range((i + 1), len(lst)):
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,C1.n'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,10.820,0.529,0.000,0.002,0.085,0.643,1.487,15.743,6,6,0.814
question_4,0,0,wrong_4_133.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    while lst :
        smallest = lst [ 0 ]
    for e in lst [ 1 : ] :
        if ( e [ 1 ] < smallest ) :
            smallest = e [ 1 ]
    lst . remove ( smallest )
    lst . append ( smallest )
    return lst


","def sort_age ( lst ) :
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        if True :
            smallest = lst [ 0 ]
        pass
        for e in lst [ 1 : ] :
            pass
            if ( e [ 1 ] < smallest ) :
                pass
            else :
                return lst
            smallest = e [ 1 ]
        pass
    lst . remove ( smallest )
    lst . append ( smallest )
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if True:
            pass
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.l,B1.h'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.199,0.155,0.000,0.002,0.051,0.276,0.260,9.219,6,6,1.432
question_4,0,0,wrong_4_122.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    firstnum = lst [ 0 ] [ 1 ]
    result = ( lst [ 0 ] , )
    for x in lst [ 1 : ] :
        if ( x [ 1 ] > firstnum ) :
            result += ( x , )
        else :
            result = ( ( x , ) + result )
    return result
    pass


","def sort_age ( lst ) :
    firstnum = lst [ 0 ] [ 1 ]
    result = ( lst [ 0 ] , )
    for x in lst [ 1 : ] :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( x [ 1 ] > firstnum ) :
                    result += ( x , )
                else :
                    pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            result = ( ( x , ) + result )
        pass
    return result
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        firstnum = lst [ ref_i ] [ 1 ]
        for x in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ x ] [ 1 ] > firstnum ) :
                result = lst [ ref_i ]
                lst [ ref_i ] = lst [ x ]
                lst [ x ] = result
                firstnum = lst [ ref_i ] [ 1 ]
    return lst


",N/A,7.487,0.083,0.000,0.002,0.048,0.571,0.340,8.879,6,6,1.306
question_4,0,0,wrong_4_068.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,8.178,0.185,0.000,0.001,0.048,0.128,0.009,8.563,6,6,3.250
question_4,0,0,wrong_4_239.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for x in lst :
            if ( x [ 1 ] > oldest [ 1 ] ) :
                oldest = x
        a . remove ( oldest )
        sort . append ( oldest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for x in lst :
            pass
            if ( x [ 1 ] > oldest [ 1 ] ) :
                oldest = x
            pass
        a . remove ( oldest )
        sort . append ( oldest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for x in lst :
            if ( x [ 1 ] > oldest [ 1 ] ) :
                oldest = x
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.245,0.395,0.000,0.002,0.042,0.380,0.135,9.514,6,6,1.386
question_4,0,0,wrong_4_241.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = ( )
    i = 0
    smallest = lst [ 0 ] [ 1 ]
    s = lst [ 0 ]
    for i in range ( 1 , len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < smallest ) :
            smallest = lst [ i ] [ 1 ]
            s = lst [ i ]
    list1 += s
    return list1


","def sort_age ( lst ) :
    list1 = ( )
    i = 0
    smallest = lst [ 0 ] [ 1 ]
    s = lst [ 0 ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < smallest ) :
                pass
            else :
                pass
            smallest = lst [ i ] [ 1 ]
            s = lst [ i ]
        pass
    list1 += s
    return list1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    list1 = lst
    for i in range ( 0 , ( len ( list1 ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( list1 ) ) :
            if ( list1 [ i ] [ 1 ] < list1 [ j ] [ 1 ] ) :
                smallest = list1 [ i ]
                list1 [ i ] = list1 [ j ]
                list1 [ j ] = smallest
    return list1


",N/A,8.185,0.497,0.000,0.002,0.054,0.444,0.420,10.034,6,6,0.831
question_4,0,0,wrong_4_118.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
            pass
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        lst . remove ( biggest )
        sort . append ( biggest )
    sort . append ( biggest )
    return sort
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.226,0.429,0.000,0.002,0.173,0.487,0.137,9.778,6,6,1.367
question_4,0,0,wrong_4_328.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sorted = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        sorted . append ( lst . pop ( i ) )
    return sorted


","def sort_age ( lst ) :
    sorted = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
            pass
        sorted . append ( lst . pop ( i ) )
    return sorted
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sorted = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > oldest [ 1 ] ) :
                oldest = lst [ i ]
        sorted . append ( lst . pop ( lst . index ( oldest ) ) )
    return sorted


",N/A,8.217,0.436,0.000,0.002,0.042,0.451,0.009,9.172,6,6,0.962
question_4,0,0,wrong_4_237.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.214,0.195,0.000,0.001,0.048,0.016,0.097,8.719,6,6,3.091
question_4,0,0,wrong_4_245.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    smallest = lst [ 0 ] [ 1 ]
    s = ( lst [ 0 ] , )
    for i in range ( 1 , len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < smallest ) :
            smallest = lst [ i ] [ 1 ]
            s = ( lst [ i ] , )
        list1 += s
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    smallest = lst [ 0 ] [ 1 ]
    s = ( lst [ 0 ] , )
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < smallest ) :
                pass
            else :
                pass
            smallest = lst [ i ] [ 1 ]
            s = ( lst [ i ] , )
        list1 += s
    return list1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = ref_tmp
    return lst


",N/A,8.283,0.501,0.000,0.002,0.213,0.262,0.446,10.128,6,6,0.859
question_4,0,0,wrong_4_314.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                return lst
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                return lst
            pass
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.278,0.169,0.000,0.001,0.048,0.228,0.083,8.921,6,6,4.389
question_4,0,0,wrong_4_046.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    output = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < smallsest [ 1 ] ) :
                smallest = i
        lst . remove ( i )
        output . append ( i )
    return output


","def sort_age ( lst ) :
    output = [ ]
    if True :
        pass
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < smallsest [ 1 ] ) :
                smallest = i
            pass
        lst . remove ( i )
        output . append ( i )
    return output
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    output = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        output . append ( largest )
    return output


",N/A,8.221,0.397,0.000,0.002,0.043,0.398,0.135,9.495,6,6,1.273
question_4,0,0,wrong_4_140.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort_list = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        sort_list . append ( smallest )
    return sort_list


","def sort_age ( lst ) :
    sort_list = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
            pass
        lst . remove ( smallest )
        sort_list . append ( smallest )
    return sort_list
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort_list = [ ]
    while lst :
        largest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > largest [ 1 ] ) :
                largest = element
        lst . remove ( largest )
        sort_list . append ( largest )
    return sort_list


",N/A,8.242,0.406,0.000,0.001,0.043,0.386,0.146,9.522,6,6,1.364
question_4,0,0,wrong_4_064.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
        pass
    return lst


",N/A,8.227,0.188,0.000,0.002,0.050,0.017,0.094,8.730,6,6,3.200
question_4,0,0,wrong_4_159.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    i = 0
    while ( ( i + 1 ) < len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
            lst . extend ( [ lst [ i ] ] )
            del lst [ i ]
        else :
            i += 1
    return lst


","def sort_age ( lst ) :
    i = 0
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
                    lst . extend ( [ lst [ i ] ] )
                    del lst [ i ]
                else :
                    return lst
                pass
            i += 1
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    i = 0
    while ( i < len ( lst ) ) :
        j = ( i + 1 )
        while ( j < len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
            j += 1
        i += 1
    return lst


",N/A,7.462,0.082,0.000,0.002,0.064,0.552,0.389,9.034,6,6,0.759
question_4,0,0,wrong_4_109.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for k in lst :
            if ( k [ 1 ] > biggest [ 1 ] ) :
                biggest = k
        lst . remove ( biggest )
        sort . append ( biggest )


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        pass
    else :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for k in lst :
            pass
            if ( k [ 1 ] > biggest [ 1 ] ) :
                biggest = k
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    pass
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for k in lst :
            if ( k [ 1 ] > biggest [ 1 ] ) :
                biggest = k
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.259,0.378,0.000,0.002,0.043,0.281,0.124,9.390,6,6,1.452
question_4,0,0,wrong_4_048.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    output = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
        lst . remove ( smallest )
        output . append ( smallest )
    return output


","def sort_age ( lst ) :
    output = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
            pass
        lst . remove ( smallest )
        output . append ( smallest )
    return output
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    output = lst
    for i in range ( ( len ( output ) - 1 ) ) :
        smallest = i
        for j in range ( ( i + 1 ) , len ( output ) ) :
            if ( output [ j ] [ 1 ] > output [ smallest ] [ 1 ] ) :
                smallest = j
        ( output [ i ] , output [ smallest ] ) = ( output [ smallest ] , output [ i ] )
    return output


",N/A,8.271,0.394,0.000,0.002,0.042,0.451,0.271,9.729,6,6,1.318
question_4,0,0,wrong_4_256.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        i = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] >= i [ 1 ] ) :
                i = element
        lst . remove ( i )
        final . append ( i )
    return newlst


","def sort_age ( lst ) :
    newlst = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        i = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] >= i [ 1 ] ) :
                i = element
            pass
        lst . remove ( i )
        final . append ( i )
    return newlst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        i = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] >= i [ 1 ] ) :
                i = element
        lst . remove ( i )
        newlst . append ( i )
    return newlst


",N/A,8.311,0.395,0.000,0.001,0.064,0.400,0.127,9.620,6,6,1.364
question_4,0,0,wrong_4_039.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( lst == [ ] ) :
        return [ ]
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i > largest ) :
                largest = i
        lst . remove ( largest )
        sort . append ( largest )
    return sort
    pass


","def sort_age ( lst ) :
    pass
    if ( lst == [ ] ) :
        return [ ]
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ]
        for i in lst :
            pass
            if ( i > largest ) :
                pass
            elif True :
                largest = i
            pass
        lst . remove ( largest )
        sort . append ( largest )
    return sort
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            elif True:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.k,B1.h'}","def sort_age ( lst ) :
    if ( lst == [ ] ) :
        return [ ]
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,10.028,0.019,0.000,0.001,0.125,0.286,0.145,10.912,6,6,1.478
question_4,0,0,wrong_4_325.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newnew = [ ]
    for i in lst :
        for j in range ( len ( newnew ) ) :
            if ( i [ 1 ] > newnew [ j ] [ 1 ] ) :
                newnew . insert ( ( j + 1 ) , i )
            elif ( i [ 1 ] < newnew [ j ] [ 1 ] ) :
                newnew . insert ( j , i )
            else :
                newnew . append ( i )
            return newnew
        return newnew


","def sort_age ( lst ) :
    newnew = [ ]
    for i in lst :
        pass
        for j in range ( len ( newnew ) ) :
            pass
            if ( i [ 1 ] > newnew [ j ] [ 1 ] ) :
                newnew . insert ( ( j + 1 ) , i )
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                newnew . insert ( j , i )
            elif True :
                newnew . append ( i )
            return newnew
        return newnew
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                if True:
                    pass
                lst[j] = tmp
            elif True:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.k,B1.h'}","def sort_age ( lst ) :
    newnew = lst . copy ( )
    for i in range ( len ( newnew ) ) :
        for j in range ( ( i + 1 ) , len ( newnew ) ) :
            if ( newnew [ i ] [ 1 ] < newnew [ j ] [ 1 ] ) :
                ( newnew [ i ] , newnew [ j ] ) = ( newnew [ j ] , newnew [ i ] )
    return newnew


",N/A,8.283,0.299,0.000,0.001,0.057,0.302,0.573,10.434,6,6,0.928
question_4,0,0,wrong_4_261.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    return lst
                pass
            pass
        return lst
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
    return lst


",N/A,8.162,0.190,0.000,0.002,0.050,0.140,0.094,8.766,6,6,3.950
question_4,0,0,wrong_4_104.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort1 = [ ]
    while lst :
        largest = lst [ 0 ] [ 1 ]
        if ( i [ 1 ] > largest ) :
            largest = i [ 1 ]
        lst . remove ( i )
        sort1 . append ( i )
    return sort1


","def sort_age ( lst ) :
    sort1 = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            largest = lst [ 0 ] [ 1 ]
            if ( i [ 1 ] > largest ) :
                pass
            else :
                pass
            largest = i [ 1 ]
        lst . remove ( i )
        sort1 . append ( i )
    return sort1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort1 = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sort1 . append ( largest )
    return sort1


",N/A,8.283,0.372,0.000,0.002,0.049,0.358,0.123,9.473,6,6,1.341
question_4,0,0,wrong_4_351.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( )
    new = [ ]
    for i in range ( len ( lst ) ) :
        j = ( ( len ( lst ) - i ) - 1 )
        new . append ( lst [ j ] )
    return new


","def sort_age ( lst ) :
    lst . sort ( )
    new = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        return lst
    pass
    for i in range ( len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if True :
                pass
            pass
        j = ( ( len ( lst ) - i ) - 1 )
        new . append ( lst [ j ] )
    return new
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.290,0.347,0.000,0.002,0.042,0.302,0.236,9.436,6,6,1.513
question_4,0,0,wrong_4_070.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    store = [ ]
    oldest = lst [ 0 ]
    for i in lst [ 1 : ] :
        if ( i [ 1 ] > oldest [ 1 ] ) :
            oldest = i
    lst . remove ( oldest )
    sort . append ( oldest )
    return sort


","def sort_age ( lst ) :
    store = [ ]
    oldest = lst [ 0 ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for i in lst [ 1 : ] :
            pass
            if ( i [ 1 ] > oldest [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            else :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            oldest = i
        pass
    lst . remove ( oldest )
    sort . append ( oldest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        oldest = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ oldest ] [ 1 ] ) :
                oldest = j
        ( lst [ i ] , lst [ oldest ] ) = ( lst [ oldest ] , lst [ i ] )
    return lst


",N/A,8.289,0.384,0.000,0.002,0.052,0.572,0.198,9.763,6,6,1.333
question_4,0,0,wrong_4_303.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
            pass
        pass
    return lst


",N/A,8.290,0.205,0.000,0.002,0.050,0.141,0.141,8.975,6,6,3.500
question_4,0,0,wrong_4_293.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = 0
        for i in lst :
            if ( i [ 1 ] > biggest ) :
                biggest = i [ 1 ]
        lst . remove ( i )
        sort . append ( i )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = 0
        for i in lst :
            pass
            if ( i [ 1 ] > biggest ) :
                pass
            else :
                biggest = i [ 1 ]
            pass
        lst . remove ( i )
        sort . append ( i )
    return sort
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.311,0.381,0.000,0.001,0.048,0.269,0.119,9.414,6,6,1.439
question_4,0,0,wrong_4_194.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    biggest = lst [ 0 ] [ 1 ]
    for i in range ( len ( lst ) ) :
        if ( lst [ 0 ] [ 1 ] < lst [ i ] [ 1 ] ) :
            biggest = lst [ i ] [ 1 ]
            continue
        else :
            biggest = lst [ 0 ] [ 1 ]
    return ( [ biggest ] + sort_age ( lst [ 1 : len ( lst ) ] ) )
    pass


","def sort_age ( lst ) :
    biggest = lst [ 0 ] [ 1 ]
    for i in range ( len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ 0 ] [ 1 ] < lst [ i ] [ 1 ] ) :
                    biggest = lst [ i ] [ 1 ]
                    continue
                else :
                    pass
                pass
            biggest = lst [ 0 ] [ 1 ]
        pass
    return ( [ biggest ] + sort_age ( lst [ 1 : len ( lst ) ] ) )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        biggest = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ biggest ] [ 1 ] < lst [ j ] [ 1 ] ) :
                biggest = j
        ( lst [ i ] , lst [ biggest ] ) = ( lst [ biggest ] , lst [ i ] )
    return lst


",N/A,7.434,0.099,0.000,0.002,0.194,0.752,0.474,9.582,6,6,0.789
question_4,0,0,wrong_4_285.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.274,0.183,0.000,0.002,0.049,0.152,0.082,8.861,6,6,4.500
question_4,0,0,wrong_4_248.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        b = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > biggest ) :
                biggest = lst [ i ] [ 1 ]
                s = ( lst [ i ] , )
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ] [ 1 ]
        b = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > biggest ) :
                pass
            else :
                biggest = lst [ i ] [ 1 ]
                s = ( lst [ i ] , )
            pass
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        b = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > biggest ) :
                biggest = lst [ i ] [ 1 ]
                b = lst [ i ]
        lst . remove ( b )
        list1 . append ( b )
    return list1


",N/A,8.277,0.567,0.000,0.002,0.050,0.289,0.510,10.276,6,6,0.817
question_4,0,0,wrong_4_200.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.347,0.186,0.000,0.002,0.049,0.136,0.009,8.833,6,6,3.150
question_4,0,0,wrong_4_175.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ] [ 1 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < smallest ) :
                smallest = lst [ i ] [ 1 ]
        lst . remove ( smallest )
        sort . append ( smallest )
        sort . reverse ( smallest )
        return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ] [ 1 ]
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < smallest ) :
                smallest = lst [ i ] [ 1 ]
            pass
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        lst . remove ( smallest )
        sort . append ( smallest )
        sort . reverse ( smallest )
        return sort
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = min ( lst , key = ( lambda x : x [ 1 ] ) )
        lst . remove ( smallest )
        sort . append ( smallest )
    sort . reverse ( )
    return sort


",N/A,8.479,0.524,0.000,0.002,0.113,0.369,0.159,10.149,6,6,0.952
question_4,0,0,wrong_4_315.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    return lst
                else :
                    pass
                return lst
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,8.291,0.186,0.000,0.002,0.050,0.132,0.093,8.882,6,6,3.950
question_4,0,0,wrong_4_192.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( )
    lst . reverse ( )
    return lst
    pass


","def sort_age ( lst ) :
    lst . sort ( )
    lst . reverse ( )
    return lst
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                return lst
            pass
        pass
    pass
    if False :
        pass
    else :
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.280,0.158,0.000,0.001,0.044,0.157,0.061,8.762,6,6,4.467
question_4,0,0,wrong_4_179.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        largest = a [ 0 ] [ 1 ]
        for item in a :
            if ( item [ 1 ] > largest ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
        print ( sort )


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = a [ 0 ] [ 1 ]
        for item in a :
            pass
            if ( item [ 1 ] > largest ) :
                pass
                if True :
                    pass
                pass
            else :
                largest = item
            pass
        a . remove ( largest )
        sort . append ( largest )
        print ( sort )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.250,0.437,0.000,0.002,0.079,0.136,0.181,9.424,6,6,1.408
question_4,0,0,wrong_4_355.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        maximum = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > maximum ) :
                maximum = i [ 1 ]
        newlst . append ( i )
        lst . remove ( i )
    print ( newlst )


","def sort_age ( lst ) :
    newlst = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        maximum = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] > maximum ) :
                maximum = i [ 1 ]
            pass
        newlst . append ( i )
        lst . remove ( i )
    print ( newlst )
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        maximum = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > maximum [ 1 ] ) :
                maximum = i
        newlst . append ( maximum )
        lst . remove ( maximum )
    return newlst


",N/A,8.300,0.424,0.000,0.001,0.041,0.456,0.184,9.749,6,6,1.306
question_4,0,0,wrong_4_053.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    newlst = [ ]
    while lst :
        current = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] < current [ 1 ] ) :
                current = element
        newlst += current
        lst . remove ( current )
    return newlst


","def sort_age ( lst ) :
    newlst = [ ]
    if True :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        current = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] < current [ 1 ] ) :
                current = element
            pass
        newlst += current
        lst . remove ( current )
    return newlst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    newlst = lst . copy ( )
    for i in range ( ( len ( newlst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( newlst ) ) :
            if ( newlst [ i ] [ 1 ] < newlst [ j ] [ 1 ] ) :
                current = newlst [ i ]
                newlst [ i ] = newlst [ j ]
                newlst [ j ] = current
    return newlst


",N/A,8.205,0.388,0.000,0.001,0.044,0.319,0.282,9.536,6,6,1.372
question_4,0,0,wrong_4_218.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    for i in range ( len ( lst ) ) :
        max_num = max ( lst )
        lst . remove ( max_num )
        new_lst . append ( max_num )
    return new_lst


","def sort_age ( lst ) :
    new_lst = [ ]
    if True :
        pass
    pass
    for i in range ( len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if True :
                pass
            else :
                pass
            pass
        max_num = max ( lst )
        lst . remove ( max_num )
        new_lst . append ( max_num )
    return new_lst
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.232,0.292,0.000,0.001,0.052,0.202,0.177,9.118,6,6,1.903
question_4,0,0,wrong_4_299.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.256,0.156,0.000,0.002,0.048,0.141,0.072,8.782,6,6,5.125
question_4,0,0,wrong_4_276.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
        lst . remove ( i )
        sort . append ( i )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
            pass
        lst . remove ( i )
        sort . append ( i )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.311,0.413,0.000,0.001,0.106,0.395,0.141,9.696,6,6,1.298
question_4,0,0,wrong_4_062.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    final = [ ]
    while lst :
        old = lst [ 0 ]
        for i in lst :
            if ( old [ 1 ] < i [ 1 ] ) :
                old = i
            final . append ( old )
            lst . remove ( old )
    return final


","def sort_age ( lst ) :
    final = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        old = lst [ 0 ]
        for i in lst :
            pass
            if ( old [ 1 ] < i [ 1 ] ) :
                old = i
            final . append ( old )
            lst . remove ( old )
        pass
    return final
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    final = [ ]
    while lst :
        old = lst [ 0 ]
        for i in lst :
            if ( old [ 1 ] < i [ 1 ] ) :
                old = i
        final . append ( old )
        lst . remove ( old )
    return final


",N/A,8.296,0.402,0.000,0.001,0.067,0.346,0.134,9.573,6,6,1.295
question_4,0,0,wrong_4_296.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    ages = [ ]
    output = [ ]
    for item in lst :
        ages . append ( item [ 1 ] )
    for item in lst :
        if ( min ( ages ) == item [ 1 ] ) :
            output . append ( item )
            ages . remove ( age )
    return output


","def sort_age ( lst ) :
    ages = [ ]
    output = [ ]
    if True :
        ages . append ( item [ 1 ] )
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for item in lst :
            pass
            if ( min ( ages ) == item [ 1 ] ) :
                pass
            output . append ( item )
            ages . remove ( age )
        pass
    return output
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,8.434,0.617,0.000,0.001,0.043,0.255,0.056,9.707,6,6,1.457
question_4,0,0,wrong_4_346.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        if ( i [ 1 ] > current ) :
            tup += tuple ( i )
            current = i [ 1 ]
        else :
            tup = ( tuple ( i ) + tup )
    return tup


","def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( i [ 1 ] > current ) :
                    tup += tuple ( i )
                    current = i [ 1 ]
                else :
                    pass
                pass
            tup = ( tuple ( i ) + tup )
        pass
    return tup
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,7.467,0.071,0.000,0.001,0.052,0.757,0.273,8.954,6,6,1.372
question_4,0,0,wrong_4_353.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    A = map ( ( lambda x : x [ 1 ] ) , lst )
    a = [ ]
    counter = 0
    while ( counter < len ( lst ) ) :
        for i in A :
            if ( i > a [ 0 ] ) :
                a = i . extend ( a )
            elif ( i < a [ ( - 1 ) ] ) :
                a = a . extend ( i )
        counter += 1
    b = [ ]
    for i in a :
        for y in lst :
            if ( y [ 1 ] == i ) :
                b . append ( y )
    return b


","def sort_age ( lst ) :
    A = map ( ( lambda x : x [ 1 ] ) , lst )
    a = [ ]
    counter = 0
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        a = i . extend ( a )
        for j in range ( ( i + 1 ) , len ( lst ) ) [ : int ( ( len ( range ( ( i + 1 ) , len ( lst ) ) ) / 2 ) ) ] :
            a = a . extend ( i )
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                counter += 1
            b = [ ]
        pass
        for y in lst :
            pass
            if ( y [ 1 ] == i ) :
                b . append ( y )
            pass
        pass
    return b
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst))[:int((len(range((i + 1), len(lst))) / 2))]:
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
        for j in range((i + 1), len(lst))[int((len(range((i + 1), len(lst))) / 2)):]:
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'E1.z,B1.h'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,30.646,0.606,0.000,0.002,0.062,0.482,0.687,34.554,6,6,1.600
question_4,0,0,wrong_4_235.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
            pass
    return lst


",N/A,8.290,0.156,0.000,0.002,0.049,0.162,0.078,8.843,6,6,5.062
question_4,0,0,wrong_4_012.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    old_lst = lst
    new_lst = [ ]
    while old_lst :
        largest = old_lst [ 0 ]
        for i in lst :
            if ( i > largest ) :
                largest = i
        old_lst . remove ( largest )
        new_lst . append ( largest )
    return new_lst


","def sort_age ( lst ) :
    old_lst = lst
    new_lst = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = old_lst [ 0 ]
        for i in lst :
            pass
            if ( i > largest ) :
                largest = i
            pass
        old_lst . remove ( largest )
        new_lst . append ( largest )
    return new_lst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    old_lst = lst
    new_lst = [ ]
    while old_lst :
        largest = old_lst [ 0 ]
        for i in old_lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        old_lst . remove ( largest )
        new_lst . append ( largest )
    return new_lst


",N/A,8.382,0.383,0.000,0.002,0.045,0.336,0.124,9.544,6,6,1.683
question_4,0,0,wrong_4_036.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    'selection sort'
    l = len ( lst )
    for i in range ( l ) :
        largest = lst [ i ]
        for j in range ( ( i + 1 ) , l ) :
            if ( lst [ j ] [ 1 ] > largest [ 1 ] ) :
                largest = lst [ j ]
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ j ] )
    return lst


","def sort_age ( lst ) :
    'selection sort'
    l = len ( lst )
    for i in range ( l ) :
        largest = lst [ i ]
        for j in range ( ( i + 1 ) , l ) :
            if ( lst [ j ] [ 1 ] > largest [ 1 ] ) :
                largest = lst [ j ]
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ j ] )
    return lst


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    'selection sort'
    l = len ( lst )
    for i in range ( l ) :
        largest = i
        for j in range ( ( i + 1 ) , l ) :
            if ( lst [ j ] [ 1 ] > lst [ largest ] [ 1 ] ) :
                largest = j
        ( lst [ i ] , lst [ largest ] ) = ( lst [ largest ] , lst [ i ] )
    return lst


",N/A,0.001,0.020,0.000,0.000,0.088,0.560,0.511,1.758,6,6,0.528
question_4,0,0,wrong_4_058.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
            pass
        pass
    return lst


",N/A,8.218,0.193,0.000,0.002,0.051,0.018,0.096,8.723,6,6,3.200
question_4,0,0,wrong_4_150.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    i = 0
    while ( ( i + 1 ) < len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
            lst . extend ( [ lst [ i ] ] )
            lst . pop ( [ lst [ i ] ] )
        else :
            i += 1
    return lst


","def sort_age ( lst ) :
    i = 0
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            return lst
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
                    lst . extend ( [ lst [ i ] ] )
                    lst . pop ( [ lst [ i ] ] )
                else :
                    pass
                pass
            i += 1
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    i = 0
    while ( i < len ( lst ) ) :
        j = ( i + 1 )
        while ( j < len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
            j += 1
        i += 1
    return lst


",N/A,7.495,0.085,0.000,0.002,0.045,0.778,0.458,9.398,6,6,0.721
question_4,0,0,wrong_4_027.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 1 ]
        for element in lst :
            if ( element > biggest ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 1 ]
        for element in lst :
            pass
            if ( element > biggest ) :
                biggest = element
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.209,0.365,0.000,0.001,0.042,0.379,0.140,9.351,6,6,1.711
question_4,0,0,wrong_4_177.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.275,0.188,0.000,0.001,0.049,0.023,0.137,8.808,6,6,3.950
question_4,0,0,wrong_4_088.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    holder = [ ]
    for x in lst :
        if ( holder == [ ] ) :
            holder = x
        elif ( x [ 1 ] > holder [ 1 ] ) :
            holder = x
    return ( holder + sort_age ( lst [ 1 : ] ) )


","def sort_age ( lst ) :
    holder = [ ]
    for x in lst :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if ( holder == [ ] ) :
                    holder = x
                elif ( x [ 1 ] > holder [ 1 ] ) :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            holder = x
        pass
    return ( holder + sort_age ( lst [ 1 : ] ) )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if True:
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                elif False:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.f'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        holder = lst [ i ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > holder [ 1 ] ) :
                holder = lst [ j ]
                lst [ j ] = lst [ i ]
                lst [ i ] = holder
    return lst


",N/A,8.061,0.811,0.000,0.002,0.291,0.369,0.268,10.142,6,6,1.619
question_4,0,0,wrong_4_300.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            return lst
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            return lst
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = ref_tmp
    return lst


",N/A,8.280,0.204,0.000,0.001,0.048,0.136,0.100,8.885,6,6,2.833
question_4,0,0,wrong_4_266.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    while lst :
        smallest = lst [ 0 ] [ 1 ]
        for x in lst :
            if ( x [ 1 ] < smallest ) :
                smallest = x
        lst . remove ( smallest )
        sort . append ( smallest )
        return lst


","def sort_age ( lst ) :
    pass
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ] [ 1 ]
        for x in lst :
            pass
            if ( x [ 1 ] < smallest ) :
                pass
            else :
                smallest = x
            pass
        lst . remove ( smallest )
        sort . append ( smallest )
        return lst
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sorted_lst = sorted ( lst , key = ( lambda x : x [ 1 ] ) , reverse = True )
    return sorted_lst


",N/A,8.319,0.375,0.000,0.002,0.049,0.136,0.066,9.236,6,6,1.561
question_4,0,0,wrong_4_201.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    agelist = [ lst [ 0 ] ]
    for i in lst :
        if ( i [ 1 ] > agelist [ 0 ] [ 1 ] ) :
            agelist . insert ( 0 , i )
        elif ( i [ 1 ] < agelist [ ( len ( agelist ) - 1 ) ] [ 1 ] ) :
            agelist . insert ( len ( agelist ) , i )
        else :
            for x in range ( 0 , len ( agelist ) ) :
                if ( agelist [ x ] [ 1 ] < i [ 1 ] < agelist [ ( x + 1 ) ] [ 1 ] ) :
                    agelist . insert ( ( x + 1 ) , i )
    return agelist


","def sort_age ( lst ) :
    agelist = [ lst [ 0 ] ]
    if True :
        pass
        if ( i [ 1 ] > agelist [ 0 ] [ 1 ] ) :
            agelist . insert ( 0 , i )
        pass
    agelist . insert ( len ( agelist ) , i )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for x in range ( 0 , len ( agelist ) ) :
            pass
            if ( agelist [ x ] [ 1 ] < i [ 1 ] < agelist [ ( x + 1 ) ] [ 1 ] ) :
                pass
            pass
        pass
    return agelist
","

def sort_age(lst):
    if True:
        if True:
            pass
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B1.h'}","def sort_age ( lst ) :
    agelist = [ ]
    for i in lst :
        if ( ( not agelist ) or ( i [ 1 ] > agelist [ 0 ] [ 1 ] ) ) :
            agelist . insert ( 0 , i )
        elif ( i [ 1 ] < agelist [ ( - 1 ) ] [ 1 ] ) :
            agelist . append ( i )
        else :
            for x in range ( ( len ( agelist ) - 1 ) ) :
                if ( agelist [ x ] [ 1 ] >= i [ 1 ] >= agelist [ ( x + 1 ) ] [ 1 ] ) :
                    agelist . insert ( ( x + 1 ) , i )
                    break
    return agelist


",N/A,10.830,0.460,0.000,0.002,0.042,0.311,2.112,14.987,6,6,0.914
question_4,0,0,wrong_4_158.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    print ( lst )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    print ( lst )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return lst
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.235,0.195,0.000,0.001,0.048,0.137,0.136,8.892,6,6,3.727
question_4,0,0,wrong_4_095.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( ( lambda x : x [ 1 ] ) )
    return lst


","def sort_age ( lst ) :
    lst . sort ( ( lambda x : x [ 1 ] ) )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if True :
                    pass
                else :
                    pass
                return lst
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,8.222,0.163,0.000,0.002,0.051,0.213,0.020,8.758,6,6,3.706
question_4,0,0,wrong_4_252.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in range ( 1 , ( len ( lst ) + 1 ) ) :
            if ( lst [ i ] [ 1 ] > biggest [ 1 ] ) :
                biggest = lst [ i ] [ 1 ]
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1


","def sort_age ( lst ) :
    list1 = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in range ( 1 , ( len ( lst ) + 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] > biggest [ 1 ] ) :
                biggest = lst [ i ] [ 1 ]
            pass
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    list1 = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > biggest [ 1 ] ) :
                biggest = lst [ i ]
        lst . remove ( biggest )
        list1 . append ( biggest )
    return list1


",N/A,8.242,0.508,0.000,0.002,0.044,0.412,0.310,10.037,6,6,0.902
question_4,0,0,wrong_4_119.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    first = lst [ 0 ] [ 1 ]
    result = [ ]
    for x in lst [ 1 : ] :
        if ( x [ 1 ] > first ) :
            result = ( ( first , ) + ( x [ 1 ] , ) )
        else :
            result = ( ( x [ 1 ] , ) + ( first , ) )
    pass


","def sort_age ( lst ) :
    first = lst [ 0 ] [ 1 ]
    result = [ ]
    for x in lst [ 1 : ] :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( x [ 1 ] > first ) :
                    result = ( ( first , ) + ( x [ 1 ] , ) )
                else :
                    return lst
                pass
            result = ( ( x [ 1 ] , ) + ( first , ) )
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,7.473,0.088,0.000,0.002,0.047,0.407,0.823,9.264,6,6,1.245
question_4,0,0,wrong_4_268.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
            else :
                pass
        pass
    return lst


",N/A,8.244,0.191,0.000,0.002,0.052,0.018,0.104,8.758,6,6,3.150
question_4,0,0,wrong_4_075.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                return lst
                if True :
                    pass
                else :
                    pass
                pass
            return lst
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = ref_tmp
        pass
    return lst


",N/A,8.322,0.186,0.000,0.001,0.048,0.134,0.094,8.887,6,6,3.150
question_4,0,0,wrong_4_196.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        largest = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
        lst . remove ( i )
        new . append ( i )
    return new


","def sort_age ( lst ) :
    new = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
            pass
        lst . remove ( i )
        new . append ( i )
    return new
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        new . append ( largest )
    return new


",N/A,8.332,0.408,0.000,0.001,0.106,0.385,0.140,9.715,6,6,1.298
question_4,0,0,wrong_4_219.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    for i in range ( len ( lst ) ) :
        max_num = max ( lst )
        lst . remove ( max_num )
        new_lst . append ( max_num )
    return new_lst


","def sort_age ( lst ) :
    new_lst = [ ]
    if True :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
            else :
                return lst
            return lst
        max_num = max ( lst )
        lst . remove ( max_num )
        new_lst . append ( max_num )
    return new_lst
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        max_num = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ max_num ] [ 1 ] ) :
                max_num = j
        ( lst [ i ] , lst [ max_num ] ) = ( lst [ max_num ] , lst [ i ] )
    return lst


",N/A,8.237,0.277,0.000,0.002,0.049,0.107,0.166,9.001,6,6,1.871
question_4,0,0,wrong_4_144.py,fail_exception,N/A,0,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,0.000,9.243,N/A,N/A,N/A
question_4,0,0,wrong_4_102.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    largest = lst [ 0 ] [ 1 ]
    sort1 = [ ]
    for i in lst :
        if ( i > largest ) :
            largest = i
            sort1 . append ( i )
    return sort1


","def sort_age ( lst ) :
    largest = lst [ 0 ] [ 1 ]
    sort1 = [ ]
    for i in lst :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if ( i > largest ) :
                largest = i
                sort1 . append ( i )
            pass
        pass
    pass
    if False :
        pass
    else :
        pass
    return sort1
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        largest = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ largest ] [ 1 ] ) :
                largest = j
        ( lst [ i ] , lst [ largest ] ) = ( lst [ largest ] , lst [ i ] )
    return lst


",N/A,8.311,0.314,0.000,0.001,0.047,0.802,0.195,9.857,6,6,1.882
question_4,0,0,wrong_4_343.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if True :
                    pass
                else :
                    pass
                pass
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
    return lst


",N/A,8.313,0.175,0.000,0.002,0.049,0.162,0.084,8.881,6,6,3.556
question_4,0,0,wrong_4_236.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    def age ( i ) :
        return i [ 1 ]
    def position ( seq , ele ) :
        n = len ( seq )
        for i in range ( n ) :
            if ( seq [ i ] == ele ) :
                return i
    def largest_age ( seq ) :
        largest = age ( seq [ 0 ] )
        largest_pos = 0
        for i in seq :
            if ( age ( i ) > largest ) :
                largest = age ( i )
                largest_pos = position ( seq , i )
        return seq [ largest_pos ]
    n = len ( lst )
    if ( n == 0 ) :
        return [ ]
    elif ( n == 1 ) :
        return lst
    else :
        return ( [ largest_age ( lst ) ] + [ sort_age ( lst [ 1 : ] ) ] )
    pass


","def sort_age ( lst ) :
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) [ : int ( ( len ( range ( 0 , ( len ( lst ) - 1 ) ) ) / 2 ) ) ] :
        n = len ( seq )
        for i in range ( n ) :
            pass
            if ( seq [ i ] == ele ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        largest = age ( seq [ 0 ] )
        largest_pos = 0
        for i in seq :
            pass
            if ( age ( i ) > largest ) :
                largest = age ( i )
                largest_pos = position ( seq , i )
            pass
        return seq [ largest_pos ]
    n = len ( lst )
    if ( n == 0 ) :
        return [ ]
        if True :
            return lst
        return ( [ largest_age ( lst ) ] + [ sort_age ( lst [ 1 : ] ) ] )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1))[:int((len(range(0, (len(lst) - 1))) / 2))]:
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    for i in range(0, (len(lst) - 1))[int((len(range(0, (len(lst) - 1))) / 2)):]:
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if True:
        if True:
            pass
        return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'E1.z,B1.h,B1.f'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,36.725,0.861,0.000,0.003,0.054,0.851,0.796,41.740,6,6,1.545
question_4,0,0,wrong_4_289.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_list = [ ]
    largest = 0
    while lst :
        for i in lst :
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
        new_list = new_list . append ( i )
        lst . remove ( i )
    return new_list


","def sort_age ( lst ) :
    new_list = [ ]
    largest = 0
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in lst :
            pass
            if ( i [ 1 ] > largest ) :
                pass
            else :
                largest = i [ 1 ]
            pass
        new_list = new_list . append ( i )
        lst . remove ( i )
    return new_list
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        largest = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ largest ] [ 1 ] ) :
                largest = j
        ( lst [ i ] , lst [ largest ] ) = ( lst [ largest ] , lst [ i ] )
    return lst


",N/A,8.261,0.399,0.000,0.001,0.103,0.226,0.259,9.553,6,6,1.429
question_4,0,0,wrong_4_033.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        smallest = a [ 0 ]
        for element in a :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
        a . remove ( smallest )
        sort . append ( smallest )
        sort . reverse
    return sort


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = a [ 0 ]
        for element in a :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                pass
            else :
                smallest = element
            pass
        a . remove ( smallest )
        sort . append ( smallest )
        sort . reverse
    return sort
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = lst . copy ( )
    sort = [ ]
    while a :
        smallest = a [ 0 ]
        for element in a :
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
        a . remove ( smallest )
        sort . append ( smallest )
    return sort


",N/A,8.280,0.445,0.000,0.001,0.094,0.223,0.179,9.648,6,6,1.540
question_4,0,0,wrong_4_030.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) == 0 ) :
        return [ ]
    elif ( len ( lst ) == 1 ) :
        return lst
    else :
        mid = ( len ( lst ) // 2 )
        lst1 = sort_age ( lst [ : mid ] )
        lst2 = sort_age ( lst [ mid : ] )
        result = [ ]
        while ( lst1 and lst2 ) :
            if ( lst1 [ 0 ] [ 1 ] < lst2 [ 0 ] [ 1 ] ) :
                result . append ( lst1 . pop ( ) )
            else :
                result . append ( lst2 . pop ( ) )
        result . extend ( lst1 )
        result . extend ( lst2 )
        return result


","def sort_age ( lst ) :
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        return [ ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                mid = ( len ( lst ) // 2 )
                lst1 = sort_age ( lst [ : mid ] )
                lst2 = sort_age ( lst [ mid : ] )
                result = [ ]
                if False :
                    pass
                result . append ( lst1 . pop ( ) )
            else :
                result . append ( lst2 . pop ( ) )
            pass
        result . extend ( lst1 )
        result . extend ( lst2 )
        return result
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if False:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.l,B1.g'}","def sort_age ( lst ) :
    if ( len ( lst ) == 0 ) :
        return [ ]
    elif ( len ( lst ) == 1 ) :
        return lst
    else :
        mid = ( len ( lst ) // 2 )
        lst1 = sort_age ( lst [ : mid ] )
        lst2 = sort_age ( lst [ mid : ] )
        result = [ ]
        while ( lst1 and lst2 ) :
            if ( lst1 [ 0 ] [ 1 ] > lst2 [ 0 ] [ 1 ] ) :
                result . append ( lst1 . pop ( 0 ) )
            else :
                result . append ( lst2 . pop ( 0 ) )
        result . extend ( lst1 )
        result . extend ( lst2 )
        return result


",N/A,9.974,0.636,0.000,0.002,0.054,0.082,1.438,13.202,6,6,0.887
question_4,0,0,wrong_4_294.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] >= biggest ) :
                biggest = i [ 1 ]
        lst . remove ( i )
        sort . append ( i )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        return lst
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] >= biggest ) :
                biggest = i [ 1 ]
            pass
        lst . remove ( i )
        sort . append ( i )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] >= biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.263,0.416,0.000,0.001,0.043,0.430,0.140,9.640,6,6,1.277
question_4,0,0,wrong_4_115.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    if ( lst == ( ) ) :
        return lst
    out = [ lst [ 0 ] ]
    for ele in lst [ 1 : ] :
        for indx in range ( len ( out ) ) :
            if ( out [ indx ] [ 1 ] < ele [ 1 ] ) :
                out . insert ( indx , ele )
                break
            elif ( indx == ( len ( out ) - 1 ) ) :
                out . append ( ele )
    return out


","def sort_age ( lst ) :
    if ( lst == ( ) ) :
        return lst
    out = [ lst [ 0 ] ]
    for ele in lst [ 1 : ] :
        for indx in range ( len ( out ) ) :
            if ( out [ indx ] [ 1 ] < ele [ 1 ] ) :
                out . insert ( indx , ele )
                break
            elif ( indx == ( len ( out ) - 1 ) ) :
                out . append ( ele )
    return out


","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.j'}","def sort_age ( lst ) :
    if ( lst == [ ] ) :
        return lst
    out = [ lst [ 0 ] ]
    for ele in lst [ 1 : ] :
        inserted = False
        for indx in range ( len ( out ) ) :
            if ( out [ indx ] [ 1 ] < ele [ 1 ] ) :
                out . insert ( indx , ele )
                inserted = True
                break
        if ( not inserted ) :
            out . append ( ele )
    return out


",N/A,0.282,0.045,0.000,0.000,0.062,0.783,0.457,2.203,6,6,0.884
question_4,0,0,wrong_4_163.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst = ( )
    for i in lst :
        if ( lst [ i ] [ 1 ] < lst [ 0 ] [ 1 ] ) :
            lst += lst [ 0 ]
        else :
            lst += lst [ i ]
    return lst


","def sort_age ( lst ) :
    lst = ( )
    for i in lst :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ 0 ] [ 1 ] ) :
                    lst += lst [ 0 ]
                else :
                    pass
                pass
            lst += lst [ i ]
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,7.358,0.065,0.000,0.001,0.042,0.414,0.278,8.497,6,6,0.977
question_4,0,0,wrong_4_141.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort_list = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > smallest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort_list . append ( biggest )
    return sort_list


","def sort_age ( lst ) :
    sort_list = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] > smallest [ 1 ] ) :
                biggest = element
            pass
        lst . remove ( biggest )
        sort_list . append ( biggest )
    return sort_list
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort_list = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort_list . append ( biggest )
    return sort_list


",N/A,8.235,0.394,0.000,0.001,0.042,0.398,0.126,9.495,6,6,1.386
question_4,0,0,wrong_4_162.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.233,0.186,0.000,0.002,0.049,0.173,0.095,8.869,6,6,3.950
question_4,0,0,wrong_4_055.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    result = [ ]
    while lst :
        oldest = lst [ 0 ]
        for people in lst :
            if ( people [ 1 ] > oldest [ 1 ] ) :
                oldest = people
        lst . remove ( oldest )
        result += ( oldest , )


","def sort_age ( lst ) :
    result = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for people in lst :
            pass
            if ( people [ 1 ] > oldest [ 1 ] ) :
                oldest = people
            pass
        lst . remove ( oldest )
        result += ( oldest , )
    pass
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    result = lst
    for i in range ( ( len ( result ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( result ) ) :
            if ( result [ i ] [ 1 ] < result [ j ] [ 1 ] ) :
                ( result [ i ] , result [ j ] ) = ( result [ j ] , result [ i ] )
    return result


",N/A,8.322,0.384,0.000,0.002,0.042,0.304,0.276,9.630,6,6,1.452
question_4,0,0,wrong_4_223.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = [ ]
    while lst :
        for i in lst :
            if ( i == max ( lst ) ) :
                a . append ( i )
    return a


","def sort_age ( lst ) :
    a = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in lst :
            pass
            if ( i == max ( lst ) ) :
                a . append ( i )
            pass
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    return a
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    a = [ ]
    while lst :
        max_age = max ( lst , key = ( lambda x : x [ 1 ] ) )
        a . append ( max_age )
        lst . remove ( max_age )
    return a


",N/A,8.341,0.289,0.000,0.001,0.086,0.477,0.060,9.417,6,6,2.500
question_4,0,0,wrong_4_136.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    smallest = a [ 0 ] [ 1 ]
    while a :
        for element in a :
            if ( element [ 1 ] > smallest ) :
                smallest = element
        a . remove ( smallest )
        sort . append ( smallest )
    pass


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    smallest = a [ 0 ] [ 1 ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for element in a :
            pass
            if ( element [ 1 ] > smallest ) :
                pass
            else :
                smallest = element
            pass
        a . remove ( smallest )
        sort . append ( smallest )
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        smallest = a [ 0 ]
        for element in a :
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
        a . remove ( smallest )
        sort . append ( smallest )
    return sort


",N/A,8.369,0.409,0.000,0.001,0.050,0.224,0.129,9.484,6,6,1.500
question_4,0,0,wrong_4_001.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    result = [ ]
    while ( lst != [ ] ) :
        lowest = lst [ 0 ] [ 1 ]
        index = 0
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lowest ) :
                index = i
                lowest = lst [ i ] [ 1 ]
        result = ( result + [ lst [ index ] ] )
        lst . pop [ index ]
    return result


","def sort_age ( lst ) :
    result = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        lowest = lst [ 0 ] [ 1 ]
        index = 0
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lowest ) :
                pass
            else :
                index = i
                lowest = lst [ i ] [ 1 ]
            pass
        result = ( result + [ lst [ index ] ] )
        lst . pop [ index ]
    return result
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    result = [ ]
    while ( lst != [ ] ) :
        highest = lst [ 0 ] [ 1 ]
        index = 0
        for i in range ( 1 , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > highest ) :
                index = i
                highest = lst [ i ] [ 1 ]
        result . append ( lst . pop ( index ) )
    return result


",N/A,8.352,0.579,0.000,0.002,0.049,0.322,0.495,10.385,6,6,0.808
question_4,0,0,wrong_4_310.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    for i in range ( len ( ( lst - 1 ) ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( len ( ( lst - 1 ) ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.l'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] , lst [ ( j + 1 ) ] ) = ( lst [ ( j + 1 ) ] , lst [ j ] )
            else :
                continue
    return lst
    pass


",N/A,0.077,0.001,0.000,0.000,0.049,0.265,0.009,0.414,6,6,0.523
question_4,0,0,wrong_4_344.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        if ( i [ 1 ] > current ) :
            tup += tuple ( i )
            current = i [ 1 ]
        else :
            ( tuple ( i ) + tup )
    return tup


","def sort_age ( lst ) :
    current = 0
    tup = ( )
    for i in lst :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                return lst
                if ( i [ 1 ] > current ) :
                    tup += tuple ( i )
                    current = i [ 1 ]
                else :
                    return lst
                pass
            ( tuple ( i ) + tup )
        pass
    return tup
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,7.476,0.056,0.000,0.002,0.050,0.851,0.263,9.019,6,6,1.381
question_4,0,0,wrong_4_040.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort_lst = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        sort_lst . append ( smallest )
    return sort_lst . reverse ( )


","def sort_age ( lst ) :
    sort_lst = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                pass
                if True :
                    tmp = lst [ i ]
                tmp = lst [ i ]
            elif False :
                smallest = element
            pass
        lst . remove ( smallest )
        sort_lst . append ( smallest )
    return sort_lst . reverse ( )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.h'}","def sort_age ( lst ) :
    sort_lst = lst [ : ]
    for i in range ( len ( sort_lst ) ) :
        smallest = i
        for j in range ( ( i + 1 ) , len ( sort_lst ) ) :
            if ( sort_lst [ j ] [ 1 ] > sort_lst [ smallest ] [ 1 ] ) :
                smallest = j
        ( sort_lst [ i ] , sort_lst [ smallest ] ) = ( sort_lst [ smallest ] , sort_lst [ i ] )
    return sort_lst


",N/A,8.305,0.420,0.000,0.001,0.210,0.346,0.276,9.890,6,6,1.435
question_4,0,0,wrong_4_352.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    while True :
        changed = False
        for i in range ( ( len ( lst ) - 1 ) ) :
            if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
                ( lst [ i ] , lst [ ( i + 1 ) ] ) = ( lst [ ( i + 1 ) ] , lst [ i ] )
                changed = True
        if ( not changed ) :
            break
    return lst


","def sort_age ( lst ) :
    pass
    if True :
        pass
    changed = False
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
            ( lst [ i ] , lst [ ( i + 1 ) ] ) = ( lst [ ( i + 1 ) ] , lst [ i ] )
            changed = True
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( not changed ) :
                pass
            break
        pass
    return lst
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        if True:
            pass
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B1.h'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,9.687,0.475,0.000,0.002,0.084,0.164,0.677,12.096,6,6,0.757
question_4,0,0,wrong_4_153.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            return lst
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.309,0.155,0.000,0.001,0.047,0.016,0.077,8.731,6,6,4.125
question_4,0,0,wrong_4_151.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        small = lst [ 0 ] [ 1 ]
        name = lst [ 0 ] [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] < small ) :
                small = ele [ 1 ]
                name = ele [ 0 ]
        new . append ( ( name , small ) )
        lst . remove ( ( name , small ) )
    return new . reverse


","def sort_age ( lst ) :
    new = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        small = lst [ 0 ] [ 1 ]
        name = lst [ 0 ] [ 0 ]
        for ele in lst :
            pass
            if ( ele [ 1 ] < small ) :
                small = ele [ 1 ]
                name = ele [ 0 ]
            pass
        pass
    pass
    if False :
        pass
    elif False :
        new . append ( ( name , small ) )
        lst . remove ( ( name , small ) )
    return new . reverse
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    elif False:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.j'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        small = lst [ 0 ] [ 1 ]
        name = lst [ 0 ] [ 0 ]
        for ele in lst :
            if ( ele [ 1 ] > small ) :
                small = ele [ 1 ]
                name = ele [ 0 ]
        new . append ( ( name , small ) )
        lst . remove ( ( name , small ) )
    return new


",N/A,8.320,0.566,0.000,0.002,0.263,1.037,0.414,11.153,6,6,1.015
question_4,0,0,wrong_4_021.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    product = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < larget [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        product . append ( largest )
    return product


","def sort_age ( lst ) :
    product = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < larget [ 1 ] ) :
                largest = i
            pass
        lst . remove ( largest )
        product . append ( largest )
    return product
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    product = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        product . append ( largest )
    return product


",N/A,8.325,0.399,0.000,0.001,0.047,0.407,0.127,9.624,6,6,1.318
question_4,0,0,wrong_4_049.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.416,0.181,0.000,0.002,0.054,0.017,0.120,8.899,6,6,3.667
question_4,0,0,wrong_4_097.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.344,0.185,0.000,0.001,0.047,0.016,0.009,8.752,6,6,3.250
question_4,0,0,wrong_4_188.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if True :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    return lst
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.380,0.175,0.000,0.002,0.048,0.161,0.009,8.894,6,6,4.444
question_4,0,0,wrong_4_096.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    return lst
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for tmp in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( tmp + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ tmp ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                i = lst [ tmp ]
                lst [ tmp ] = lst [ ref_j ]
                lst [ ref_j ] = i
            pass
        pass
    return lst


",N/A,8.362,0.171,0.000,0.001,0.049,1.065,0.084,9.827,6,6,3.611
question_4,0,0,wrong_4_182.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    print ( lst )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    print ( lst )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.364,0.197,0.000,0.001,0.047,0.151,0.097,8.972,6,6,3.091
question_4,0,0,wrong_4_316.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst1 = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i > largest ) :
                largest = i
    lst . remove ( largest )
    lst1 . append ( largest )
    return lst1


","def sort_age ( lst ) :
    lst1 = [ ]
    if True :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ]
        for i in lst :
            pass
            if ( i > largest ) :
                largest = i
            pass
        pass
    lst . remove ( largest )
    lst1 . append ( largest )
    return lst1
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst1 = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        lst1 . append ( largest )
    return lst1


",N/A,8.378,0.365,0.000,0.001,0.041,0.557,0.136,9.682,6,6,1.763
question_4,0,0,wrong_4_208.py,success_w_gpt_only,N/A,0,N/A,N/A,N/A,N/A,N/A,"def sort_age ( lst ) :
    n = len ( lst )
    if ( n < 2 ) :
        return lst
    for i in range ( n ) :
        for j in range ( ( i + 1 ) , n ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,N/A,N/A,N/A,N/A,N/A,N/A,0.396,0.405,N/A,N/A,N/A
question_4,0,0,wrong_4_231.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i >= biggest ) :
                biggest = i
        lst . remove ( biggest )
        a . append ( biggest )
    return a


","def sort_age ( lst ) :
    a = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in lst :
            pass
            if ( i >= biggest ) :
                biggest = i
            pass
        lst . remove ( biggest )
        a . append ( biggest )
    return a
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        a . append ( biggest )
    return a


",N/A,8.318,0.370,0.000,0.001,0.113,0.383,0.140,9.545,6,6,1.711
question_4,0,0,wrong_4_020.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    new_lst . append ( lst [ 0 ] )
    for i in lst [ 1 : ] :
        for j in range ( len ( new_lst ) ) :
            if ( ( i [ 1 ] > new_lst [ j ] [ 1 ] ) and ( j == 0 ) ) :
                new_lst . insert ( 0 , i )
            elif ( i [ 1 ] < new_lst [ j ] [ ( - 1 ) ] ) :
                new_lst . insert ( ( - 1 ) , i )
            elif ( i [ 1 ] > new_lst [ j ] [ 1 ] ) :
                new_lst . insert ( j , i )
    return new_lst


","def sort_age ( lst ) :
    new_lst = [ ]
    new_lst . append ( lst [ 0 ] )
    for i in lst [ 1 : ] :
        pass
        for j in range ( len ( new_lst ) ) :
            pass
            if ( ( i [ 1 ] > new_lst [ j ] [ 1 ] ) and ( j == 0 ) ) :
                new_lst . insert ( 0 , i )
                if True :
                    new_lst . insert ( ( - 1 ) , i )
                elif ( i [ 1 ] > new_lst [ j ] [ 1 ] ) :
                    pass
                new_lst . insert ( j , i )
            pass
        pass
    return new_lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                if True:
                    lst[j] = tmp
                elif True:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.k'}","def sort_age ( lst ) :
    new_lst = lst [ : ]
    for i in range ( len ( new_lst ) ) :
        for j in range ( ( i + 1 ) , len ( new_lst ) ) :
            if ( new_lst [ i ] [ 1 ] < new_lst [ j ] [ 1 ] ) :
                ( new_lst [ i ] , new_lst [ j ] ) = ( new_lst [ j ] , new_lst [ i ] )
    return new_lst


",N/A,7.983,0.145,0.000,0.002,0.091,0.498,0.976,11.182,6,6,0.740
question_4,0,0,wrong_4_180.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = lst
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
        print ( a )
        print ( sort )


","def sort_age ( lst ) :
    a = lst
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = a [ 0 ]
        for item in a :
            pass
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        a . remove ( largest )
        sort . append ( largest )
        print ( a )
        print ( sort )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    a = lst . copy ( )
    sort = [ ]
    while a :
        largest = a [ 0 ]
        for item in a :
            if ( item [ 1 ] > largest [ 1 ] ) :
                largest = item
        a . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.240,0.437,0.000,0.002,0.101,0.344,0.009,9.493,6,6,1.321
question_4,0,0,wrong_4_116.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if True :
                    return lst
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
            pass
        pass
    return lst


",N/A,8.291,0.189,0.000,0.001,0.048,0.150,0.094,8.877,6,6,3.200
question_4,0,0,wrong_4_146.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    youngest = lst [ 0 ] [ 1 ]
    sorted = [ ]
    while lst :
        for elem in lst :
            if ( elem [ 1 ] < youngest ) :
                youngest = elem [ 1 ]
        lst . remove ( youngest )
        sorted . append ( youngest )
    return sorted


","def sort_age ( lst ) :
    youngest = lst [ 0 ] [ 1 ]
    sorted = [ ]
    if True :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for elem in lst :
            pass
            if ( elem [ 1 ] < youngest ) :
                pass
            else :
                youngest = elem [ 1 ]
            pass
        lst . remove ( youngest )
        sorted . append ( youngest )
    return sorted
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,8.310,0.409,0.000,0.001,0.092,0.233,0.061,9.428,6,6,1.404
question_4,0,0,wrong_4_006.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] >= oldest [ 1 ] ) :
                person = oldest
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for person in lst :
            pass
            if ( person [ 1 ] >= oldest [ 1 ] ) :
                person = oldest
            pass
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for person in lst :
            if ( person [ 1 ] > oldest [ 1 ] ) :
                oldest = person
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.331,0.408,0.000,0.001,0.043,0.370,0.127,9.583,6,6,1.386
question_4,0,0,wrong_4_105.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort1 = [ ]
    while lst :
        largest = lst [ 0 ] [ 1 ]
        for i in lst :
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
        lst . remove ( i )
        sort1 . append ( i )
    return sort1


","def sort_age ( lst ) :
    sort1 = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        largest = lst [ 0 ] [ 1 ]
        for i in lst :
            pass
            if ( i [ 1 ] > largest ) :
                largest = i [ 1 ]
            pass
        lst . remove ( i )
        sort1 . append ( i )
    return sort1
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort1 = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        sort1 . append ( largest )
    return sort1


",N/A,8.331,0.418,0.000,0.001,0.110,0.389,0.139,9.730,6,6,1.298
question_4,0,0,wrong_4_279.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        if ( lst [ ( i + 1 ) ] [ 1 ] > lst [ i ] [ 1 ] ) :
            x = lst [ i ]
            lst [ i ] = lst [ ( i + 1 ) ]
            lst [ ( i + 1 ) ] = x
    return lst


","def sort_age ( lst ) :
    pass
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            if ( lst [ ( i + 1 ) ] [ 1 ] > lst [ i ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                pass
            elif False :
                pass
            x = lst [ i ]
            lst [ i ] = lst [ ( i + 1 ) ]
            lst [ ( i + 1 ) ] = x
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                if True:
                    pass
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.h'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                x = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = x
    return lst


",N/A,8.310,0.471,0.000,0.002,0.052,0.202,0.470,10.240,6,6,0.810
question_4,0,0,wrong_4_324.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    newnew = [ lst [ 0 ] ]
    for i in lst :
        for j in range ( len ( newnew ) ) :
            if ( i [ 1 ] > newnew [ j ] [ 1 ] ) :
                newnew . insert ( ( j + 1 ) , i )
            elif ( i [ 1 ] < newnew [ j ] [ 1 ] ) :
                newnew . insert ( j , i )
            return newnew
        return newnew


","def sort_age ( lst ) :
    newnew = [ lst [ 0 ] ]
    for i in lst :
        for j in range ( len ( newnew ) ) :
            if ( i [ 1 ] > newnew [ j ] [ 1 ] ) :
                newnew . insert ( ( j + 1 ) , i )
            elif ( i [ 1 ] < newnew [ j ] [ 1 ] ) :
                newnew . insert ( j , i )
            return newnew
        return newnew


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.j'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,0.074,0.039,0.000,0.000,0.043,0.299,0.614,1.676,6,6,0.824
question_4,0,0,wrong_4_042.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if True :
                    pass
                else :
                    return lst
                return lst
            return lst
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
        pass
    return lst


",N/A,8.335,0.178,0.000,0.001,0.047,0.231,0.086,8.976,6,6,3.667
question_4,0,0,wrong_4_229.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    youngest = lst [ 0 ] [ 1 ]
    for item in lst :
        if ( item [ 1 ] < youngest ) :
            youngest = item [ 1 ]
            lst . remove ( item )
            lst = ( [ item ] + lst )
    return lst


","def sort_age ( lst ) :
    youngest = lst [ 0 ] [ 1 ]
    for item in lst :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( item [ 1 ] < youngest ) :
                tmp = lst [ i ]
                if True :
                    pass
                return lst
            elif False :
                pass
            youngest = item [ 1 ]
            lst . remove ( item )
            lst = ( [ item ] + lst )
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.h'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                item = lst [ i ]
                if True :
                    pass
                lst [ i ] = lst [ j ]
                lst [ j ] = item
            elif False :
                pass
        pass
    return lst


",N/A,8.344,0.380,0.000,0.001,0.108,0.268,0.316,9.765,6,6,1.341
question_4,0,0,wrong_4_132.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
            pass
        pass
    return lst


",N/A,8.334,0.185,0.000,0.001,0.047,0.154,0.104,8.839,6,6,4.000
question_4,0,0,wrong_4_063.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    final = [ ]
    while lst :
        old = lst [ 0 ]
        for i in lst :
            if ( old [ 1 ] < i [ 1 ] ) :
                old = i
            lst . remove ( old )
            final . append ( old )
    return final


","def sort_age ( lst ) :
    final = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        old = lst [ 0 ]
        for i in lst :
            pass
            if ( old [ 1 ] < i [ 1 ] ) :
                old = i
            lst . remove ( old )
            final . append ( old )
        pass
    return final
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    final = [ ]
    while lst :
        old = lst [ 0 ]
        for i in lst :
            if ( old [ 1 ] < i [ 1 ] ) :
                old = i
        lst . remove ( old )
        final . append ( old )
    return final


",N/A,8.315,0.400,0.000,0.001,0.042,0.444,0.139,9.666,6,6,1.273
question_4,0,0,wrong_4_193.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    pass


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if False :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            return lst
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
        pass
    pass
    return lst


",N/A,8.366,0.195,0.000,0.002,0.044,0.202,0.096,9.014,6,6,3.143
question_4,0,0,wrong_4_259.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if True :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    return lst
                else :
                    pass
                pass
            return lst
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
        pass
    return lst


",N/A,8.271,0.187,0.000,0.001,0.048,0.147,0.093,8.877,6,6,3.950
question_4,0,0,wrong_4_171.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( ( lambda x : x [ 1 ] ) )
    return lst


","def sort_age ( lst ) :
    lst . sort ( ( lambda x : x [ 1 ] ) )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            return lst
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,8.340,0.156,0.000,0.002,0.049,0.734,0.008,9.377,6,6,3.706
question_4,0,0,wrong_4_280.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if True :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            pass
        pass
    return lst


",N/A,8.302,0.186,0.000,0.002,0.048,0.015,0.092,8.791,6,6,3.150
question_4,0,0,wrong_4_157.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        curr = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < curr [ 1 ] ) :
                curr = i
        lst . remove ( i )
        new . append ( i )
    return new


","def sort_age ( lst ) :
    new = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        curr = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < curr [ 1 ] ) :
                curr = i
            pass
        lst . remove ( i )
        new . append ( i )
    return new
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        curr = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > curr [ 1 ] ) :
                curr = i
        lst . remove ( curr )
        new . append ( curr )
    return new


",N/A,8.380,0.395,0.000,0.002,0.043,0.434,0.135,9.694,6,6,1.273
question_4,0,0,wrong_4_107.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    smallest = lst [ 0 ] [ 1 ]
    sort = [ ]
    while lst :
        for k in lst :
            if ( k [ 1 ] < smallest ) :
                smallest = k [ 1 ]
                smallest_tuple = k
        lst . remove ( k )
        sort . append ( k )


","def sort_age ( lst ) :
    smallest = lst [ 0 ] [ 1 ]
    sort = [ ]
    if True :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for k in lst :
            pass
            if ( k [ 1 ] < smallest ) :
                pass
            else :
                smallest = k [ 1 ]
                smallest_tuple = k
            pass
        lst . remove ( k )
        sort . append ( k )
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.344,0.414,0.000,0.002,0.050,0.151,0.317,9.624,6,6,1.396
question_4,0,0,wrong_4_295.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ] [ 1 ]
        for i in range ( len ( lst ) ) :
            count = 0
            if ( lst [ i ] [ 1 ] >= biggest ) :
                biggest = lst [ i ] [ 1 ]
            else :
                i += 1
                count += 1
        lst . remove ( lst [ ( i - count ) ] )
        sort . append ( lst [ ( i - count ) ] )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ] [ 1 ]
        for i in range ( len ( lst ) ) :
            count = 0
            if ( lst [ i ] [ 1 ] >= biggest ) :
                biggest = lst [ i ] [ 1 ]
                if True :
                    pass
                elif False :
                    pass
                i += 1
                count += 1
            pass
        lst . remove ( lst [ ( i - count ) ] )
        sort . append ( lst [ ( i - count ) ] )
    return sort
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                if True:
                    pass
                elif False:
                    pass
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.j'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] >= biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,7.367,0.319,0.000,0.002,0.100,0.613,0.309,9.444,6,6,0.825
question_4,0,0,wrong_4_233.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ] [ 1 ]
        for element in lst :
            if ( element [ 1 ] < smallest ) :
                smallest = element
        lst . remove ( smallest )
        sort . append ( smallest )
    return lst


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ] [ 1 ]
        for element in lst :
            pass
            if ( element [ 1 ] < smallest ) :
                smallest = element
            pass
        lst . remove ( smallest )
        sort . append ( smallest )
    return lst
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for element in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ element ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ element ]
                lst [ element ] = ref_tmp
    return lst


",N/A,8.231,0.394,0.000,0.001,0.079,0.264,0.302,9.573,6,6,1.432
question_4,0,0,wrong_4_199.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    for i in range ( len ( lst ) ) :
        if ( lst [ i ] [ 1 ] > lst [ ( i + 1 ) ] [ 1 ] ) :
            new_lst . append ( lst [ i ] )
    return lst
    pass


","def sort_age ( lst ) :
    new_lst = [ ]
    if True :
        pass
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > lst [ ( i + 1 ) ] [ 1 ] ) :
                pass
            else :
                pass
            new_lst . append ( lst [ i ] )
        pass
    return lst
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst
    pass


",N/A,8.337,0.384,0.000,0.001,0.048,0.162,0.287,9.540,6,6,1.022
question_4,0,0,wrong_4_207.py,success_w_gpt_only,N/A,0,N/A,N/A,N/A,N/A,N/A,"def merge ( one , two ) :
    new_tup = [ ]
    while ( one and two ) :
        if ( one [ 0 ] [ 1 ] < two [ 0 ] [ 1 ] ) :
            new_tup . append ( two . pop ( 0 ) )
        else :
            new_tup . append ( one . pop ( 0 ) )
    while one :
        new_tup . append ( one . pop ( 0 ) )
    while two :
        new_tup . append ( two . pop ( 0 ) )
    return new_tup
def sort_age ( lst ) :
    n = len ( lst )
    if ( n < 2 ) :
        return lst
    mid = ( n // 2 )
    left = lst [ : mid ]
    right = lst [ mid : ]
    return merge ( sort_age ( left ) , sort_age ( right ) )


",N/A,N/A,N/A,N/A,N/A,N/A,N/A,0.544,0.555,N/A,N/A,N/A
question_4,0,0,wrong_4_173.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ] [ 1 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < smallest ) :
                smallest = lst [ i ] [ 1 ]
        a . remove ( smallest )
        sort . append ( smallest )
        sort . reverse ( smallest )
        return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ] [ 1 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < smallest ) :
                smallest = lst [ i ] [ 1 ]
            pass
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        a . remove ( smallest )
        sort . append ( smallest )
        sort . reverse ( smallest )
        return sort
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < smallest [ 1 ] ) :
                smallest = lst [ i ]
        lst . remove ( smallest )
        sort . append ( smallest )
    sort . reverse ( )
    return sort


",N/A,8.286,0.513,0.000,0.002,0.124,0.331,0.299,10.047,6,6,1.000
question_4,0,0,wrong_4_228.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    youngest = lst [ 0 ] [ 1 ]
    for item in lst :
        if ( item [ 1 ] < youngest ) :
            youngest = item [ 1 ]
            lst . remove ( item )
            lst = ( item + lst )
    return lst


","def sort_age ( lst ) :
    youngest = lst [ 0 ] [ 1 ]
    for item in lst :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( item [ 1 ] < youngest ) :
                youngest = item [ 1 ]
                lst . remove ( item )
                lst = ( item + lst )
            else :
                pass
            pass
        pass
    pass
    if False :
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    if False:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
            else :
                pass
            pass
        pass
    pass
    return lst


",N/A,8.266,0.359,0.000,0.002,0.111,2.119,0.286,11.456,6,6,1.372
question_4,0,0,wrong_4_211.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    n = len ( lst )
    result = [ ]
    while ( n != 0 ) :
        test = [ ]
        for counter in range ( n ) :
            test . append ( lst [ counter ] [ 1 ] )
        first = test ( max )
        for counter in range ( n ) :
            if ( lst [ counter ] [ 1 ] == first ) :
                result . append ( lst . pop ( counter ) )
        n = len ( lst )
    return result


","def sort_age ( lst ) :
    n = len ( lst )
    result = [ ]
    if True :
        test = [ ]
        for counter in range ( n ) :
            test . append ( lst [ counter ] [ 1 ] )
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                first = test ( max )
                for counter in range ( n ) :
                    pass
                    if ( lst [ counter ] [ 1 ] == first ) :
                        pass
                    pass
                result . append ( lst . pop ( counter ) )
            pass
        n = len ( lst )
    return result
","

def sort_age(lst):
    if True:
        for i in range(0, (len(lst) - 1)):
            if True:
                for j in range((i + 1), len(lst)):
                    if (lst[i][1] < lst[j][1]):
                        tmp = lst[i]
                        lst[i] = lst[j]
                        lst[j] = tmp
        return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B1.f'}","def sort_age ( lst ) :
    n = len ( lst )
    result = [ ]
    while ( n != 0 ) :
        test = [ ]
        for counter in range ( n ) :
            test . append ( lst [ counter ] [ 1 ] )
        first = max ( test )
        for counter in range ( n ) :
            if ( lst [ counter ] [ 1 ] == first ) :
                result . append ( lst . pop ( counter ) )
                break
        n = len ( lst )
    return result


",N/A,8.771,0.025,0.000,0.002,0.052,0.309,0.471,10.374,6,6,1.000
question_4,0,0,wrong_4_051.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    final = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        final . append ( biggest )
        print ( final )


","def sort_age ( lst ) :
    final = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > biggest [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                pass
            elif False :
                biggest = i
            pass
        lst . remove ( biggest )
        final . append ( biggest )
        print ( final )
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.j,B1.h'}","def sort_age ( lst ) :
    final = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        final . append ( biggest )
    return final


",N/A,8.180,0.409,0.000,0.001,0.067,0.145,0.163,9.394,6,6,1.652
question_4,0,0,wrong_4_331.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                ( biggesr - i )
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > biggest [ 1 ] ) :
                ( biggesr - i )
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > biggest [ 1 ] ) :
                biggest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.338,0.416,0.000,0.002,0.044,0.444,0.137,9.711,6,6,1.326
question_4,0,0,wrong_4_334.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    for i in range ( 1 , len ( lst ) ) :
        while ( lst [ i ] [ 1 ] < lst [ ( i - 1 ) ] [ 1 ] ) :
            lst . pop ( i )
            lst . insert ( ( i - 1 ) , lst [ i ] )
    return lst . reverse ( )


","def sort_age ( lst ) :
    pass
    for i in range ( 1 , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            lst . pop ( i )
            lst . insert ( ( i - 1 ) , lst [ i ] )
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
            pass
        pass
    pass
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    return lst . reverse ( )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( 1 , len ( lst ) ) :
        while ( ( i > 0 ) and ( lst [ i ] [ 1 ] > lst [ ( i - 1 ) ] [ 1 ] ) ) :
            ( lst [ i ] , lst [ ( i - 1 ) ] ) = ( lst [ ( i - 1 ) ] , lst [ i ] )
            i -= 1
    return lst


",N/A,8.296,0.452,0.000,0.002,0.067,0.163,0.411,9.788,6,6,0.925
question_4,0,0,wrong_4_198.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ( ) ]
    for i in range ( len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
            new_lst . append ( lst [ i ] )
    lst . reverse ( )
    return lst
    pass


","def sort_age ( lst ) :
    new_lst = [ ( ) ]
    for i in range ( len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ( i + 1 ) ] [ 1 ] ) :
                new_lst . append ( lst [ i ] )
            pass
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    lst . reverse ( )
    return lst
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.273,0.421,0.000,0.002,0.093,0.438,0.302,9.876,6,6,1.000
question_4,0,0,wrong_4_135.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( lst == [ ] ) :
        return new
    new = [ ]
    small = lst [ 0 ] [ 1 ]
    for i in range ( 1 , len ( lst ) ) :
        if ( lst [ i ] [ 1 ] < small ) :
            small = lst [ i ] [ 1 ]
    new . append ( small )
    lst . remove ( small )
    return sort_age ( lst )


","def sort_age ( lst ) :
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        if ( lst == [ ] ) :
            return new
        new = [ ]
        small = lst [ 0 ] [ 1 ]
        for i in range ( 1 , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < small ) :
                pass
                if False :
                    pass
                pass
            small = lst [ i ] [ 1 ]
        pass
    new . append ( small )
    lst . remove ( small )
    return sort_age ( lst )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if False:
            pass
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if False:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B1.g'}","def sort_age ( lst ) :
    if ( not lst ) :
        return [ ]
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,8.426,0.044,0.000,0.002,0.136,0.332,0.399,9.756,6,6,1.015
question_4,0,0,wrong_4_082.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            return lst
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
        pass
    return lst


",N/A,8.126,0.177,0.000,0.002,0.048,0.022,0.125,8.623,6,6,4.500
question_4,0,0,wrong_4_326.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    newnew = [ lst [ 0 ] ]
    for i in lst :
        for j in range ( len ( newnew ) ) :
            if ( i [ 1 ] > newnew [ j ] [ 1 ] ) :
                newnew . insert ( j , i )
            elif ( i [ 1 ] < newnew [ j ] [ 1 ] ) :
                newnew . insert ( ( j + 1 ) , i )
            return newnew
        return newnew


","def sort_age ( lst ) :
    newnew = [ lst [ 0 ] ]
    for i in lst :
        for j in range ( len ( newnew ) ) :
            if ( i [ 1 ] > newnew [ j ] [ 1 ] ) :
                newnew . insert ( j , i )
            elif ( i [ 1 ] < newnew [ j ] [ 1 ] ) :
                newnew . insert ( ( j + 1 ) , i )
            return newnew
        return newnew


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            elif False:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.j'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,0.074,0.039,0.000,0.000,0.043,0.313,0.600,1.667,6,6,0.809
question_4,0,0,wrong_4_156.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new = [ ]
    while lst :
        curr = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < curr [ 1 ] ) :
                curr = i
        lst . remove ( i )
        new . append ( i )
    return new


","def sort_age ( lst ) :
    new = [ ]
    if True :
        return lst
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        curr = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < curr [ 1 ] ) :
                curr = i
            pass
        lst . remove ( i )
        new . append ( i )
    return new
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    new = [ ]
    while lst :
        curr = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > curr [ 1 ] ) :
                curr = i
        lst . remove ( curr )
        new . append ( curr )
    return new


",N/A,8.220,0.380,0.000,0.002,0.041,0.328,0.017,9.293,6,6,1.295
question_4,0,0,wrong_4_013.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                pass
            return lst
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
        pass
    return lst


",N/A,8.284,0.179,0.000,0.002,0.052,0.742,0.087,9.466,6,6,4.500
question_4,0,0,wrong_4_213.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            pass
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                pass
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
            pass
    return lst


",N/A,8.305,0.186,0.000,0.002,0.048,0.017,0.134,8.801,6,6,3.200
question_4,0,0,wrong_4_191.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
    for element in lst :
        if ( element [ 1 ] > biggest [ 1 ] ) :
            biggest = element
    lst . remove ( biggest )
    sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        if True :
            biggest = lst [ 0 ]
        pass
        for element in lst :
            pass
            if ( element [ 1 ] > biggest [ 1 ] ) :
                return lst
            else :
                pass
            biggest = element
        pass
    lst . remove ( biggest )
    sort . append ( biggest )
    return sort
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if True:
            pass
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B2.l,B1.h'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.320,0.139,0.000,0.001,0.074,0.530,0.009,9.354,6,6,1.500
question_4,0,0,wrong_4_209.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in a :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
            lst . remove ( smallest )
            sort . append ( smallest )
    pass


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        pass
    else :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for element in a :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
            lst . remove ( smallest )
            sort . append ( smallest )
        pass
    pass
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        largest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > largest [ 1 ] ) :
                largest = element
        lst . remove ( largest )
        sort . append ( largest )
    return sort


",N/A,8.229,0.387,0.000,0.001,0.042,0.266,0.150,9.394,6,6,1.372
question_4,0,0,wrong_4_336.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    if ( len ( lst ) == 1 ) :
        return lst
    else :
        temp = lst [ 0 ] [ 1 ]
        count = 0
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] > temp ) :
                temp = lst [ i ] [ 1 ]
                count = i
        result = [ lst [ count ] ]
        pop = lst . pop ( count )
        return ( result + sort_age ( lst ) )
    pass


","def sort_age ( lst ) :
    pass
    if ( len ( lst ) == 1 ) :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        temp = lst [ 0 ] [ 1 ]
        count = 0
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] > temp ) :
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if True :
                    pass
                temp = lst [ i ] [ 1 ]
                count = i
            pass
        result = [ lst [ count ] ]
        pop = lst . pop ( count )
        return ( result + sort_age ( lst ) )
    pass
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    pass
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B1.h'}","def sort_age ( lst ) :
    pass
    if ( len ( lst ) == 1 ) :
        return lst
    else :
        for i in range ( len ( lst ) ) :
            for j in range ( ( i + 1 ) , len ( lst ) ) :
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    temp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = temp
    return lst


",N/A,8.789,0.482,0.000,0.002,0.067,1.106,0.671,11.768,6,6,0.855
question_4,0,0,wrong_4_025.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element > biggest ) :
                smallest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        biggest = lst [ 0 ]
        for element in lst :
            pass
            if ( element > biggest ) :
                smallest = element
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        biggest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > biggest [ 1 ] ) :
                biggest = element
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


",N/A,8.286,0.367,0.000,0.002,0.042,0.403,0.139,9.456,6,6,1.737
question_4,0,0,wrong_4_305.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    return lst
                pass
            pass
        return lst
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.176,0.208,0.000,0.001,0.047,0.016,0.134,8.701,6,6,2.875
question_4,0,0,wrong_4_298.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        a . append ( oldest )
    pass


","def sort_age ( lst ) :
    a = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
            pass
        lst . remove ( oldest )
        a . append ( oldest )
    pass
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    a = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        a . append ( oldest )
    return a


",N/A,8.278,0.395,0.000,0.002,0.041,0.290,0.127,9.431,6,6,1.372
question_4,0,0,wrong_4_317.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    a = [ ]
    for i in lst :
        a . append ( i [ 1 ] )
    print ( a )
    sort = [ ]
    while a :
        smallest = a [ 0 ]
        for element in a :
            if ( element < smallest ) :
                smallest = element
        a . remove ( smallest )
        sort . append ( smallest )
    print ( sort )
    lst2 = [ ]
    counter = 0
    for i in sort :
        for j in lst :
            if ( j [ 1 ] == i ) :
                lst2 . append ( j )
                counter += 1
    return lst2


","def sort_age ( lst ) :
    a = [ ]
    for i in lst :
        a . append ( i [ 1 ] )
        for element in a :
            pass
            if ( element < smallest ) :
                smallest = element
            pass
        a . remove ( smallest )
        sort . append ( smallest )
    print ( sort )
    lst2 = [ ]
    counter = 0
    for i in sort :
        pass
        for j in lst :
            pass
            if ( j [ 1 ] == i ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                lst2 . append ( j )
                counter += 1
            pass
        pass
    return lst2
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1))[:int((len(range(0, (len(lst) - 1))) / 2))]:
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    for i in range(0, (len(lst) - 1))[int((len(range(0, (len(lst) - 1))) / 2)):]:
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                if True:
                    lst[i] = lst[j]
                    lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'E1.z,B1.f'}","def sort_age ( lst ) :
    return sorted ( lst , key = ( lambda x : x [ 1 ] ) , reverse = True )


",N/A,30.395,0.122,0.000,0.002,0.053,0.568,0.119,33.126,6,6,1.944
question_4,0,0,wrong_4_018.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sample = lst [ 0 ]
    newlst = [ ]
    for i in lst :
        if ( i [ 1 ] > sample [ 1 ] ) :
            newlst = ( [ i ] + newlst )
        else :
            newlst += [ i ]
    return newlst


","def sort_age ( lst ) :
    sample = lst [ 0 ]
    newlst = [ ]
    for i in lst :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( i [ 1 ] > sample [ 1 ] ) :
                    newlst = ( [ i ] + newlst )
                else :
                    pass
                pass
            newlst += [ i ]
        pass
    return newlst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                sample = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = sample
            else :
                pass
            pass
        pass
    return lst


",N/A,7.400,0.069,0.000,0.002,0.050,0.278,0.278,8.396,6,6,1.415
question_4,0,0,wrong_4_090.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    holder = [ ]
    if ( lst == [ ] ) :
        return [ ]
    for x in lst :
        if ( holder == [ ] ) :
            holder = x
        elif ( x [ 1 ] > holder [ 1 ] ) :
            holder = x
    return ( [ holder ] + sort_age ( lst [ 1 : ] ) )


","def sort_age ( lst ) :
    holder = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        if ( lst == [ ] ) :
            return [ ]
        pass
        for x in lst :
            pass
            if True :
                pass
                if ( holder == [ ] ) :
                    holder = x
                pass
            holder = x
        pass
    return ( [ holder ] + sort_age ( lst [ 1 : ] ) )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if False:
            pass
        for j in range((i + 1), len(lst)):
            if True:
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B1.f'}","def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        holder = lst [ i ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > holder [ 1 ] ) :
                holder = lst [ j ]
                lst [ j ] = lst [ i ]
                lst [ i ] = holder
    return lst


",N/A,7.891,0.187,0.000,0.001,0.818,0.256,0.285,9.824,6,6,1.360
question_4,0,0,wrong_4_281.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] > lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] ) = ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] )
            else :
                continue
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] > lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] ) = ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] )
            else :
                continue
    return lst
    pass


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.l'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - i ) - 1 ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] , lst [ ( j + 1 ) ] ) = ( lst [ ( j + 1 ) ] , lst [ j ] )
            else :
                continue
    return lst
    pass


",N/A,0.074,0.025,0.000,0.000,0.048,0.208,1.097,2.343,6,6,0.500
question_4,0,0,wrong_4_350.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    result = [ ]
    for i in lst :
        result += [ i [ : : ( - 1 ) ] ]
    result . sort ( )
    result . reverse ( )
    ans = [ ]
    for i in result :
        ans += [ i [ : : ( - 1 ) ] ]
    return ans


","def sort_age ( lst ) :
    result = [ ]
    if False :
        pass
    else :
        pass
    pass
    for i in lst :
        result += [ i [ : : ( - 1 ) ] ]
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                result . sort ( )
                result . reverse ( )
                ans = [ ]
            pass
        ans += [ i [ : : ( - 1 ) ] ]
    return ans
","

def sort_age(lst):
    if False:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    result = lst
    for i in range ( ( len ( result ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( result ) ) :
            if ( result [ i ] [ 1 ] < result [ j ] [ 1 ] ) :
                ( result [ i ] , result [ j ] ) = ( result [ j ] , result [ i ] )
    return result


",N/A,7.981,0.268,0.000,0.002,0.046,1.753,0.264,10.593,6,6,1.522
question_4,0,0,wrong_4_234.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sorted = [ ]
    while lst :
        oldest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > oldest [ 1 ] ) :
                oldest = element
            lst . remove ( oldest )
            sorted . append ( oldest )
    return sorted


","def sort_age ( lst ) :
    sorted = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        tmp = lst [ i ]
        lst [ i ] = lst [ j ]
        lst [ j ] = tmp
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] > oldest [ 1 ] ) :
                oldest = element
            lst . remove ( oldest )
            sorted . append ( oldest )
        pass
    return sorted
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sorted = [ ]
    while lst :
        oldest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > oldest [ 1 ] ) :
                oldest = element
        lst . remove ( oldest )
        sorted . append ( oldest )
    return sorted


",N/A,8.215,0.396,0.000,0.002,0.041,0.345,0.134,9.445,6,6,1.341
question_4,0,0,wrong_4_067.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )


","def sort_age ( lst ) :
    return lst . sort ( key = ( lambda x : x [ 1 ] ) )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if True :
                    pass
                else :
                    pass
                pass
            return lst
        pass
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ref_tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = ref_tmp
    return lst


",N/A,8.215,0.155,0.000,0.001,0.047,0.016,0.072,8.626,6,6,4.125
question_4,0,0,wrong_4_313.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( )
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    pass


","def sort_age ( lst ) :
    lst . sort ( )
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if False :
                pass
            pass
        pass
    pass
    if False :
        pass
    else :
        return lst
    return lst
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


",N/A,8.233,0.234,0.000,0.001,0.043,0.129,0.166,8.923,6,6,2.640
question_4,0,0,wrong_4_301.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) )
    lst . reverse ( )
    print ( lst )
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            return lst
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ ref_i ] , lst [ j ] ) = ( lst [ j ] , lst [ ref_i ] )
    return lst


",N/A,8.182,0.205,0.000,0.002,0.048,0.023,0.096,8.739,6,6,3.458
question_4,0,0,wrong_4_089.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    holder = [ ]
    if ( lst == [ ] ) :
        return [ ]
    for x in lst :
        if ( holder == [ ] ) :
            holder = x
        elif ( x [ 1 ] > holder [ 1 ] ) :
            holder = x
    return ( holder + sort_age ( lst [ 1 : ] ) )


","def sort_age ( lst ) :
    holder = [ ]
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        if ( lst == [ ] ) :
            return [ ]
        pass
        for x in lst :
            pass
            if True :
                pass
                if ( holder == [ ] ) :
                    holder = x
                pass
            holder = x
        pass
    return ( holder + sort_age ( lst [ 1 : ] ) )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        if False:
            pass
        for j in range((i + 1), len(lst)):
            if True:
                if (lst[i][1] < lst[j][1]):
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B1.f'}","def sort_age ( lst ) :
    for ref_i in range ( len ( lst ) ) :
        holder = lst [ ref_i ]
        for x in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ x ] [ 1 ] > holder [ 1 ] ) :
                holder = lst [ x ]
                lst [ x ] = lst [ ref_i ]
                lst [ ref_i ] = holder
    return lst


",N/A,7.961,0.182,0.000,0.001,0.047,0.302,0.288,9.164,6,6,1.388
question_4,0,0,wrong_4_047.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    output = [ ]
    while lst :
        smallest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
        lst . remove ( i )
        output . append ( i )
    return output


","def sort_age ( lst ) :
    output = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        return lst
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] < smallest [ 1 ] ) :
                smallest = i
            pass
        lst . remove ( i )
        output . append ( i )
    return output
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    output = [ ]
    while lst :
        largest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > largest [ 1 ] ) :
                largest = i
        lst . remove ( largest )
        output . append ( largest )
    return output


",N/A,8.086,0.405,0.000,0.001,0.043,0.352,0.134,9.327,6,6,1.295
question_4,0,0,wrong_4_260.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        sort . append ( smallest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        pass
    else :
        return lst
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = lst [ 0 ]
        for element in lst :
            pass
            if ( element [ 1 ] < smallest [ 1 ] ) :
                smallest = element
            pass
        lst . remove ( smallest )
        sort . append ( smallest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        sort . append ( smallest )
    return sort


",N/A,8.191,0.397,0.000,0.001,0.148,0.302,0.132,9.480,6,6,1.364
question_4,0,0,wrong_4_282.py,success_w_gpt_better,1,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] > lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - 1 ) - i ) ) :
            if ( lst [ j ] [ 1 ] > lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] [ 1 ] , lst [ ( j + 1 ) ] [ 1 ] ) = ( lst [ ( j + 1 ) ] [ 1 ] , lst [ j ] [ 1 ] )
            else :
                continue
    return lst
    pass


","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},{'sort_age': 'B2.l'},"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( ( len ( lst ) - i ) - 1 ) ) :
            if ( lst [ j ] [ 1 ] < lst [ ( j + 1 ) ] [ 1 ] ) :
                ( lst [ j ] , lst [ ( j + 1 ) ] ) = ( lst [ ( j + 1 ) ] , lst [ j ] )
            else :
                continue
    return lst
    pass


",N/A,0.076,0.025,0.000,0.000,0.047,0.207,1.081,2.315,6,6,0.500
question_4,0,0,wrong_4_065.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    rslt = [ ]
    while lst :
        smallest = a [ 0 ]
        for element in a :
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        rslt . append ( smallest )
    return rslt


","def sort_age ( lst ) :
    rslt = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    else :
        pass
    pass
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        smallest = a [ 0 ]
        for element in a :
            pass
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
            pass
        lst . remove ( smallest )
        rslt . append ( smallest )
    return rslt
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    rslt = [ ]
    while lst :
        smallest = lst [ 0 ]
        for element in lst :
            if ( element [ 1 ] > smallest [ 1 ] ) :
                smallest = element
        lst . remove ( smallest )
        rslt . append ( smallest )
    return rslt


",N/A,8.201,0.394,0.000,0.001,0.041,0.354,0.126,9.413,6,6,1.432
question_4,0,0,wrong_4_038.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        return lst
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            tmp = lst [ i ]
            lst [ i ] = lst [ j ]
            lst [ j ] = tmp
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                else :
                    pass
                pass
            pass
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for ref_i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( ref_i + 1 ) , len ( lst ) ) :
            if ( lst [ ref_i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ ref_i ]
                lst [ ref_i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",N/A,8.165,0.185,0.000,0.002,0.049,0.024,0.018,8.608,6,6,3.900
question_4,0,0,wrong_4_069.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    store = [ ]
    oldest = lst [ 0 ]
    for i in lst [ 1 : ] :
        if ( i [ 1 ] > oldest [ 1 ] ) :
            oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


","def sort_age ( lst ) :
    store = [ ]
    oldest = lst [ 0 ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    pass
    for j in range ( ( i + 1 ) , len ( lst ) ) :
        pass
        for i in lst [ 1 : ] :
            pass
            if ( i [ 1 ] > oldest [ 1 ] ) :
                pass
            else :
                pass
            oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        oldest = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ oldest ] [ 1 ] ) :
                oldest = j
        ( lst [ i ] , lst [ oldest ] ) = ( lst [ oldest ] , lst [ i ] )
    return lst


",N/A,8.142,0.383,0.000,0.002,0.048,0.223,0.250,9.322,6,6,1.289
question_4,0,0,wrong_4_127.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort


","def sort_age ( lst ) :
    sort = [ ]
    if True :
        pass
    else :
        pass
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in lst :
            pass
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
            pass
        lst . remove ( biggest )
        sort . append ( biggest )
    return sort
","

def sort_age(lst):
    if True:
        pass
    else:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sort = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in lst :
            if ( i [ 1 ] > oldest [ 1 ] ) :
                oldest = i
        lst . remove ( oldest )
        sort . append ( oldest )
    return sort


",N/A,8.235,0.396,0.000,0.001,0.041,0.353,0.126,9.454,6,6,1.318
question_4,0,0,wrong_4_092.py,success_w_gpt_better,1,1,"def sort_age ( lst ) :
    answer = [ ]
    for i in range ( 0 , len ( lst ) , ( - 1 ) ) :
        biggest = lst [ i ]
        for a in range ( i ) :
            if ( lst [ a ] [ 1 ] > biggest [ 1 ] ) :
                biggest = lst [ a ]
        answer += biggest
    return answer


","def sort_age ( lst ) :
    answer = [ ]
    for i in range ( 0 , len ( lst ) , ( - 1 ) ) :
        biggest = lst [ i ]
        for a in range ( i ) :
            if ( lst [ a ] [ 1 ] > biggest [ 1 ] ) :
                biggest = lst [ a ]
        answer += biggest
    return answer


","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
    return lst


",{'sort_age': 'reference.py'},{'sort_age': ''},"def sort_age ( lst ) :
    for i in range ( len ( lst ) ) :
        biggest = i
        for a in range ( i , len ( lst ) ) :
            if ( lst [ a ] [ 1 ] > lst [ biggest ] [ 1 ] ) :
                biggest = a
        ( lst [ i ] , lst [ biggest ] ) = ( lst [ biggest ] , lst [ i ] )
    return lst


",N/A,0.001,0.016,0.000,0.000,0.039,0.298,0.343,1.067,6,6,0.800
question_4,0,0,wrong_4_043.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    result = [ lst [ 0 ] ]
    for i in lst [ 1 : ] :
        if ( i [ 1 ] > result [ 0 ] [ 1 ] ) :
            result . insert ( 0 , i )
        elif ( i [ 1 ] < result [ ( - 1 ) ] [ 1 ] ) :
            result . append ( i )
        else :
            for j in range ( ( len ( result ) - 1 ) ) :
                if ( ( i [ 1 ] < result [ j ] [ 1 ] ) and ( i [ 1 ] > result [ ( j + 1 ) ] [ 1 ] ) ) :
                    result . insert ( j , i )
    return result


","def sort_age ( lst ) :
    result = [ lst [ 0 ] ]
    if True :
        pass
        if ( i [ 1 ] > result [ 0 ] [ 1 ] ) :
            result . insert ( 0 , i )
        pass
    result . append ( i )
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( len ( result ) - 1 ) ) :
            pass
            if ( ( i [ 1 ] < result [ j ] [ 1 ] ) and ( i [ 1 ] > result [ ( j + 1 ) ] [ 1 ] ) ) :
                pass
            pass
        pass
    return result
","

def sort_age(lst):
    if True:
        if True:
            pass
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B1.h'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                ( lst [ i ] , lst [ j ] ) = ( lst [ j ] , lst [ i ] )
    return lst


",N/A,10.866,0.461,0.000,0.002,0.043,0.368,1.123,14.154,6,6,0.852
question_4,0,0,wrong_4_212.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    n = len ( lst )
    result = [ ]
    while ( n != 0 ) :
        test = [ ]
        for counter in range ( n ) :
            test . append ( lst [ counter ] [ 1 ] )
        first = max ( test )
        for counter in range ( n ) :
            if ( lst [ counter ] [ 1 ] == first ) :
                result . append ( lst . pop ( counter ) )
        n = len ( lst )
    return result


","def sort_age ( lst ) :
    n = len ( lst )
    result = [ ]
    if True :
        test = [ ]
        for counter in range ( n ) :
            test . append ( lst [ counter ] [ 1 ] )
            if True :
                first = max ( test )
                for counter in range ( n ) :
                    pass
                    if ( lst [ counter ] [ 1 ] == first ) :
                        pass
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                result . append ( lst . pop ( counter ) )
            pass
        n = len ( lst )
    return result
","

def sort_age(lst):
    if True:
        for i in range(0, (len(lst) - 1)):
            if True:
                for j in range((i + 1), len(lst)):
                    if (lst[i][1] < lst[j][1]):
                        tmp = lst[i]
                        lst[i] = lst[j]
                        lst[j] = tmp
        return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B1.f'}","def sort_age ( lst ) :
    n = len ( lst )
    result = [ ]
    while ( n != 0 ) :
        test = [ ]
        for counter in range ( n ) :
            test . append ( lst [ counter ] [ 1 ] )
        first = max ( test )
        for counter in range ( ( n - 1 ) , ( - 1 ) , ( - 1 ) ) :
            if ( lst [ counter ] [ 1 ] == first ) :
                result . append ( lst . pop ( counter ) )
                break
        n = len ( lst )
    return result


",N/A,8.699,0.002,0.000,0.002,0.070,0.184,0.011,9.707,6,6,0.986
question_4,0,0,wrong_4_189.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst


","def sort_age ( lst ) :
    lst . sort ( key = ( lambda x : x [ 1 ] ) , reverse = True )
    return lst
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for i in range ( 0 , ( len ( lst ) - 1 ) ) :
            pass
            if True :
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    tmp = lst [ i ]
                    lst [ i ] = lst [ j ]
                    lst [ j ] = tmp
                else :
                    pass
                tmp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = tmp
            return lst
        pass
    pass
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                else:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        pass
        for ref_j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ ref_j ] [ 1 ] ) :
                tmp = lst [ i ]
                lst [ i ] = lst [ ref_j ]
                lst [ ref_j ] = tmp
        pass
    return lst


",N/A,8.131,0.204,0.000,0.002,0.049,0.135,0.096,8.744,6,6,3.900
question_4,0,0,wrong_4_220.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    male = [ ]
    female = [ ]
    for i in range ( len ( lst ) ) :
        if ( lst [ i ] [ 0 ] == 'M' ) :
            male . append ( lst [ i ] )
        else :
            female . append ( lst [ i ] )
    male . sort ( )
    female . sort ( )
    combine = ( male [ : : ( - 1 ) ] + female [ : : ( - 1 ) ] )
    return combine


","def sort_age ( lst ) :
    male = [ ]
    female = [ ]
    for i in range ( len ( lst ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
                if ( lst [ i ] [ 0 ] == 'M' ) :
                    male . append ( lst [ i ] )
                else :
                    pass
                pass
            female . append ( lst [ i ] )
        pass
    male . sort ( )
    female . sort ( )
    combine = ( male [ : : ( - 1 ) ] + female [ : : ( - 1 ) ] )
    return combine
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    tmp = lst[i]
                    lst[i] = lst[j]
                    lst[j] = tmp
                else:
                    pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.f,B2.l'}","def sort_age ( lst ) :
    return sorted ( lst , key = ( lambda x : x [ 1 ] ) , reverse = True )


",N/A,7.407,0.109,0.000,0.002,0.163,0.847,0.079,9.145,6,6,1.000
question_4,0,0,wrong_4_081.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    new_lst = [ ]
    while lst :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            if ( lst [ i ] [ 1 ] >= oldest [ 1 ] ) :
                oldest = lst [ i ]
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )


","def sort_age ( lst ) :
    new_lst = [ ]
    if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
        pass
    tmp = lst [ i ]
    lst [ i ] = lst [ j ]
    lst [ j ] = tmp
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        oldest = lst [ 0 ]
        for i in range ( len ( lst ) ) :
            pass
            if ( lst [ i ] [ 1 ] >= oldest [ 1 ] ) :
                pass
            else :
                oldest = lst [ i ]
            pass
        lst . remove ( oldest )
        new_lst . append ( oldest )
    print ( new_lst )
","

def sort_age(lst):
    if True:
        pass
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        oldest = i
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ j ] [ 1 ] > lst [ oldest ] [ 1 ] ) :
                oldest = j
        ( lst [ i ] , lst [ oldest ] ) = ( lst [ oldest ] , lst [ i ] )
    return lst


",N/A,8.230,0.476,0.000,0.002,0.051,0.259,0.763,10.192,6,6,0.929
question_4,0,0,wrong_4_100.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        while ( lst [ i ] [ 1 ] > lst [ ( i + 1 ) ] [ 1 ] ) :
            temp = lst [ i ]
            del lst [ i ]
            lst += [ temp ]
    return lst . reverse ( )


","def sort_age ( lst ) :
    pass
    for i in range ( ( len ( lst ) - 1 ) ) :
        pass
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            temp = lst [ i ]
            del lst [ i ]
            lst += [ temp ]
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                pass
            pass
        pass
    pass
    if False :
        pass
    else :
        pass
    return lst . reverse ( )
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
    if False:
        pass
    else:
        pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.g,B2.l'}","def sort_age ( lst ) :
    for i in range ( ( len ( lst ) - 1 ) ) :
        for j in range ( ( i + 1 ) , len ( lst ) ) :
            if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                temp = lst [ i ]
                lst [ i ] = lst [ j ]
                lst [ j ] = temp
    return lst


",N/A,8.241,0.439,0.000,0.001,0.116,0.081,0.412,9.700,6,6,0.764
question_4,0,0,wrong_4_147.py,success_w_gpt_better,0,0,"def sort_age ( lst ) :
    sorted = [ ]
    while lst :
        youngest = lst [ 0 ]
        for elem in lst :
            if ( elem [ 1 ] < youngest [ 1 ] ) :
                youngest = elem
        print ( youngest )
        lst . remove ( youngest )
        sorted . append ( youngest )
    return sorted


","def sort_age ( lst ) :
    sorted = [ ]
    for i in range ( 0 , ( len ( lst ) - 1 ) ) :
        youngest = lst [ 0 ]
        for elem in lst :
            pass
            if ( elem [ 1 ] < youngest [ 1 ] ) :
                pass
                if ( lst [ i ] [ 1 ] < lst [ j ] [ 1 ] ) :
                    pass
                pass
            else :
                youngest = elem
            pass
        print ( youngest )
        lst . remove ( youngest )
        sorted . append ( youngest )
    return sorted
","

def sort_age(lst):
    for i in range(0, (len(lst) - 1)):
        for j in range((i + 1), len(lst)):
            if (lst[i][1] < lst[j][1]):
                if True:
                    pass
                tmp = lst[i]
                lst[i] = lst[j]
                lst[j] = tmp
            else:
                pass
    return lst
",{'sort_age': 'reference.py'},"{'sort_age': 'B1.h,B2.l'}","def sort_age ( lst ) :
    sorted = [ ]
    while lst :
        youngest = lst [ 0 ]
        for elem in lst :
            if ( elem [ 1 ] > youngest [ 1 ] ) :
                youngest = elem
        lst . remove ( youngest )
        sorted . append ( youngest )
    return sorted


",N/A,8.275,0.419,0.000,0.001,0.077,0.225,0.172,9.584,6,6,1.542
